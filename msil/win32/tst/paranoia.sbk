// file=tst/paranoia.c uname=
.field public static float64 'Zero' at $Zero
.data $Zero = {
float64 (0.0)
}
.field public static float64 'Half' at $Half
.data $Half = {
float64 (5.000000e-001)
}
.field public static float64 'One' at $One
.data $One = {
float64 (1.000000e+000)
}
.field public static float64 'Two' at $Two
.data $Two = {
float64 (2.000000e+000)
}
.field public static float64 'Three' at $Three
.data $Three = {
float64 (3.000000e+000)
}
.field public static float64 'Four' at $Four
.data $Four = {
float64 (4.000000e+000)
}
.field public static float64 'Five' at $Five
.data $Five = {
float64 (5.000000e+000)
}
.field public static float64 'Eight' at $Eight
.data $Eight = {
float64 (8.000000e+000)
}
.field public static float64 'Nine' at $Nine
.data $Nine = {
float64 (9.000000e+000)
}
.field public static float64 'TwentySeven' at $TwentySeven
.data $TwentySeven = {
float64 (2.700000e+001)
}
.field public static float64 'ThirtyTwo' at $ThirtyTwo
.data $ThirtyTwo = {
float64 (3.200000e+001)
}
.field public static float64 'TwoForty' at $TwoForty
.data $TwoForty = {
float64 (2.400000e+002)
}
.field public static float64 'MinusOne' at $MinusOne
.data $MinusOne = {
float64 (-1.000000e+000)
}
.field public static float64 'OneAndHalf' at $OneAndHalf
.data $OneAndHalf = {
float64 (1.500000e+000)
}
.field public static int32 'NoTrials' at $NoTrials
.data $NoTrials = {
int32 (20)
}
.class private value explicit ansi sealed 'int8[]' { .pack 1 .size 35 }
.class private value explicit ansi sealed 'int32[]' { .pack 1 .size 64 }
.method public hidebysig static void 'sigfpe'(int32) cil managed {
.locals ([0] void* '1')
.locals ([1] void* '2')
.maxstack 3
ldsflda int32 'fpecount'
stloc 0
ldloc 0
ldloc 0
ldind.i4
ldc.i4 1
add
stind.i4
ldsflda valuetype 'int8[]' $_4
call vararg int32 'printf'(void*)
pop
call void* '__getstdout'()
stloc 1
ldloc 1
call int32 'fflush'(void*)
pop
ldsfld method void *() 'sigsave'
conv.u4
ldc.i4 0
beq $L5
ldc.i4 8
ldsfld method void *() 'sigsave'
ldsfld int8 __is_unmanaged_signal
brfalse $L10
call void* __getUMThunk(void*)
$L10:
call void* 'signal'(int32,method void *(int32))
ldsfld int8 __is_unmanaged_signal
brfalse $L11
call void* __getMUThunk(void*)
$L11:
pop
ldc.i4 0
stsfld method void *() 'sigsave'
ldsflda valuetype 'int32[]' 'ovfl_buf'
ldc.i4 1
call void 'longjmp'(void*,int32)
$L5:
call int32 'abort'()
pop
$L1:
ret
}
.class private value explicit ansi sealed 'void*[]' { .pack 1 .size 0 }
.field public static valuetype 'void*[]' $800_msg at $801
.data $801 = {
&($803),
&($805),
&($807),
&($809)
}
.method public hidebysig static int32 'main'() cil managed {
.locals ([0] void* '1')
.locals ([1] void* '2')
.locals ([2] float64 '3')
.locals ([3] void* '4')
.locals ([4] float64 '5')
.locals ([5] void* '6')
.locals ([6] float64 '7')
.locals ([7] void* '8')
.locals ([8] float64 '9')
.locals ([9] void* '10')
.locals ([10] void* '11')
.locals ([11] void* '12')
.locals ([12] void* '13')
.locals ([13] int32 '14')
.locals ([14] int32 '19')
.locals ([15] float64 '15')
.locals ([16] float64 '16')
.locals ([17] void* '17')
.locals ([18] void* '18')
.locals ([19] int32 '27')
.locals ([20] float64 '19')
.locals ([21] float64 '20')
.locals ([22] float64 '21')
.locals ([23] float64 '22')
.locals ([24] float64 '23')
.locals ([25] int32 '31')
.locals ([26] float64 '24')
.locals ([27] float64 '25')
.locals ([28] float64 '26')
.locals ([29] float64 '27')
.locals ([30] float64 '28')
.locals ([31] float64 '29')
.locals ([32] int32 '35')
.locals ([33] float64 '30')
.locals ([34] int32 '40')
.locals ([35] float64 '31')
.locals ([36] float64 '32')
.locals ([37] float64 '33')
.locals ([38] float64 '34')
.locals ([39] float64 '35')
.locals ([40] float64 '36')
.locals ([41] int32 '44')
.locals ([42] float64 '37')
.locals ([43] float64 '38')
.locals ([44] float64 '39')
.locals ([45] float64 '40')
.locals ([46] float64 '41')
.locals ([47] void* '42')
.locals ([48] float64 '43')
.locals ([49] void* '44')
.locals ([50] float64 '45')
.locals ([51] float64 '46')
.locals ([52] void* '47')
.locals ([53] float64 '48')
.locals ([54] void* '49')
.locals ([55] float64 '50')
.locals ([56] void* '51')
.locals ([57] float64 '52')
.locals ([58] void* '53')
.locals ([59] float64 '54')
.locals ([60] void* '55')
.locals ([61] void* '56')
.locals ([62] float64 '57')
.locals ([63] void* '58')
.locals ([64] void* '59')
.locals ([65] void* '60')
.locals ([66] float64 '61')
.locals ([67] float64 '62')
.locals ([68] float64 '63')
.locals ([69] void* '64')
.locals ([70] void* '65')
.locals ([71] void* '66')
.locals ([72] float64 '67')
.locals ([73] float64 '68')
.locals ([74] float64 '69')
.locals ([75] void* '70')
.locals ([76] void* '71')
.locals ([77] float64 '72')
.locals ([78] void* '73')
.locals ([79] float64 '74')
.locals ([80] float64 '75')
.locals ([81] void* '76')
.locals ([82] void* '77')
.locals ([83] void* '78')
.locals ([84] float64 '79')
.locals ([85] float64 '80')
.locals ([86] float64 '81')
.locals ([87] float64 '82')
.locals ([88] float64 '83')
.locals ([89] float64 '84')
.locals ([90] int32 '90')
.locals ([91] float64 '85')
.locals ([92] int32 '95')
.locals ([93] float64 '86')
.locals ([94] int32 '104')
.locals ([95] float64 '87')
.locals ([96] int32 '108')
.locals ([97] void* '88')
.locals ([98] void* '89')
.locals ([99] float64 '90')
.locals ([100] float64 '91')
.locals ([101] float64 '92')
.locals ([102] void* '93')
.locals ([103] float64 '94')
.locals ([104] float64 '95')
.locals ([105] float64 '96')
.locals ([106] float64 '97')
.locals ([107] float64 '98')
.locals ([108] void* '99')
.locals ([109] float64 '100')
.locals ([110] float64 '101')
.locals ([111] float64 '102')
.locals ([112] float64 '103')
.locals ([113] int32 '129')
.locals ([114] float64 '104')
.locals ([115] float64 '105')
.locals ([116] float64 '106')
.locals ([117] float64 '107')
.locals ([118] float64 '108')
.locals ([119] float64 '109')
.locals ([120] void* '110')
.locals ([121] void* '111')
.locals ([122] float64 '112')
.locals ([123] float64 '113')
.locals ([124] float64 '114')
.locals ([125] float64 '115')
.locals ([126] float64 '116')
.locals ([127] float64 '117')
.locals ([128] void* '118')
.locals ([129] void* '119')
.locals ([130] float64 '120')
.locals ([131] float64 '121')
.locals ([132] float64 '122')
.locals ([133] void* '123')
.locals ([134] void* '124')
.locals ([135] float64 '125')
.locals ([136] float64 '126')
.locals ([137] float64 '127')
.locals ([138] void* '128')
.locals ([139] void* '129')
.locals ([140] float64 '130')
.locals ([141] float64 '131')
.locals ([142] float64 '132')
.locals ([143] float64 '133')
.locals ([144] float64 '134')
.locals ([145] float64 '135')
.locals ([146] float64 '136')
.locals ([147] float64 '137')
.locals ([148] float64 '138')
.locals ([149] void* '139')
.locals ([150] void* '140')
.locals ([151] float64 '141')
.locals ([152] float64 '142')
.locals ([153] float64 '143')
.locals ([154] int32 '191')
.locals ([155] void* '144')
.locals ([156] float64 '145')
.locals ([157] void* '146')
.locals ([158] float64 '147')
.locals ([159] void* '148')
.locals ([160] void* '149')
.locals ([161] float64 '150')
.locals ([162] float64 '151')
.locals ([163] void* '152')
.locals ([164] float64 '153')
.locals ([165] float64 '154')
.locals ([166] void* '155')
.locals ([167] void* '156')
.locals ([168] float64 '157')
.locals ([169] float64 '158')
.locals ([170] float64 '159')
.locals ([171] void* '160')
.locals ([172] float64 '161')
.locals ([173] float64 '162')
.locals ([174] void* '163')
.locals ([175] float64 '164')
.locals ([176] float64 '165')
.locals ([177] float64 '166')
.locals ([178] int32 '167')
.locals ([179] int32 '202')
.locals ([180] void* '168')
.locals ([181] void* '169')
.locals ([182] float64 '170')
.locals ([183] float64 '171')
.locals ([184] float64 '172')
.locals ([185] float64 '173')
.locals ([186] void* '174')
.locals ([187] float64 '175')
.locals ([188] float64 '176')
.locals ([189] float64 '177')
.locals ([190] int32 '206')
.locals ([191] void* '178')
.locals ([192] float64 '179')
.locals ([193] float64 '180')
.locals ([194] void* '181')
.locals ([195] void* '182')
.locals ([196] float64 '183')
.locals ([197] float64 '184')
.locals ([198] float64 '185')
.locals ([199] void* '186')
.locals ([200] float64 '187')
.locals ([201] void* '188')
.locals ([202] float64 '189')
.locals ([203] float64 '190')
.locals ([204] void* '191')
.locals ([205] float64 '192')
.locals ([206] void* '193')
.locals ([207] float64 '194')
.locals ([208] float64 '195')
.locals ([209] int32 '196')
.locals ([210] int32 '213')
.locals ([211] void* '197')
.locals ([212] float64 '198')
.locals ([213] void* '199')
.locals ([214] float64 '200')
.locals ([215] int32 '217')
.locals ([216] void* '201')
.locals ([217] float64 '202')
.locals ([218] float64 '203')
.locals ([219] void* '204')
.locals ([220] float64 '205')
.locals ([221] void* '206')
.locals ([222] float64 '207')
.locals ([223] void* '208')
.locals ([224] float64 '209')
.locals ([225] void* '210')
.locals ([226] void* '211')
.locals ([227] float64 '212')
.locals ([228] void* '213')
.locals ([229] float64 '214')
.locals ([230] void* '215')
.locals ([231] float64 '216')
.locals ([232] float64 '217')
.locals ([233] float64 '218')
.locals ([234] int32 '219')
.locals ([235] float64 '220')
.locals ([236] float64 '221')
.locals ([237] int32 '222')
.locals ([238] int32 '223')
.locals ([239] float64 '224')
.locals ([240] void* '225')
.locals ([241] float64 '226')
.locals ([242] float64 '227')
.locals ([243] int32 '241')
.locals ([244] void* '228')
.locals ([245] float64 '229')
.locals ([246] int32 '252')
.locals ([247] void* '230')
.locals ([248] float64 '231')
.locals ([249] int32 '256')
.locals ([250] void* '232')
.locals ([251] void* '233')
.locals ([252] float64 '234')
.locals ([253] float64 '235')
.locals ([254] void* '236')
.locals ([255] void* '237')
.locals ([256] float64 '238')
.locals ([257] void* '239')
.locals ([258] void* '240')
.locals ([259] float64 '241')
.locals ([260] float64 '242')
.locals ([261] void* '243')
.locals ([262] float64 '244')
.locals ([263] float64 '245')
.locals ([264] float64 '246')
.locals ([265] void* '247')
.locals ([266] float64 '248')
.locals ([267] float64 '249')
.locals ([268] float64 '250')
.locals ([269] float64 '251')
.locals ([270] void* '252')
.locals ([271] float64 '253')
.locals ([272] void* '254')
.locals ([273] void* '255')
.locals ([274] void* '256')
.locals ([275] float64 '257')
.locals ([276] float64 '258')
.locals ([277] float64 '259')
.locals ([278] void* '260')
.locals ([279] float64 '261')
.locals ([280] void* '262')
.locals ([281] float64 '263')
.locals ([282] float64 '264')
.locals ([283] float64 '265')
.locals ([284] void* '266')
.locals ([285] float64 '267')
.locals ([286] float64 '268')
.locals ([287] void* '269')
.locals ([288] void* '270')
.locals ([289] float64 '271')
.locals ([290] float64 '272')
.locals ([291] void* '273')
.locals ([292] float64 '274')
.locals ([293] float64 '275')
.locals ([294] void* '276')
.locals ([295] void* '277')
.locals ([296] float64 '278')
.locals ([297] float64 '279')
.locals ([298] float64 '280')
.locals ([299] void* '281')
.locals ([300] float64 '282')
.locals ([301] void* '283')
.locals ([302] float64 '284')
.locals ([303] void* '285')
.locals ([304] float64 '286')
.locals ([305] void* '287')
.locals ([306] float64 '288')
.locals ([307] void* '289')
.locals ([308] void* '290')
.locals ([309] float64 '291')
.locals ([310] float64 '292')
.locals ([311] float64 '293')
.locals ([312] float64 '294')
.locals ([313] float64 '295')
.locals ([314] float64 '296')
.locals ([315] float64 '297')
.locals ([316] float64 '298')
.locals ([317] int32 '286')
.locals ([318] void* '299')
.locals ([319] float64 '300')
.locals ([320] float64 '301')
.locals ([321] int32 '291')
.locals ([322] float64 '302')
.locals ([323] float64 '303')
.locals ([324] void* '304')
.locals ([325] float64 '305')
.locals ([326] float64 '306')
.locals ([327] void* '307')
.locals ([328] float64 '308')
.locals ([329] void* '309')
.locals ([330] float64 '310')
.locals ([331] float64 '311')
.locals ([332] void* '312')
.locals ([333] float64 '313')
.locals ([334] float64 '314')
.locals ([335] void* '315')
.locals ([336] float64 '316')
.locals ([337] float64 '317')
.locals ([338] void* '318')
.locals ([339] float64 '319')
.locals ([340] float64 '320')
.locals ([341] float64 '321')
.locals ([342] void* '322')
.locals ([343] float64 '323')
.locals ([344] float64 '324')
.locals ([345] float64 '325')
.locals ([346] void* '326')
.locals ([347] float64 '327')
.locals ([348] void* '328')
.locals ([349] void* '329')
.locals ([350] float64 '330')
.locals ([351] float64 '331')
.locals ([352] void* '332')
.locals ([353] void* '333')
.locals ([354] int32 '334')
.locals ([355] float64 '335')
.locals ([356] void* '336')
.locals ([357] float64 '337')
.locals ([358] float64 '338')
.locals ([359] void* '339')
.locals ([360] float64 '340')
.locals ([361] float64 '341')
.locals ([362] void* '342')
.locals ([363] void* '343')
.locals ([364] float64 '344')
.locals ([365] void* '345')
.locals ([366] float64 '346')
.locals ([367] float64 '347')
.locals ([368] void* '348')
.locals ([369] float64 '349')
.locals ([370] float64 '350')
.locals ([371] void* '351')
.locals ([372] float64 '352')
.locals ([373] float64 '353')
.locals ([374] float64 '354')
.locals ([375] float64 '355')
.locals ([376] void* '356')
.locals ([377] float64 '357')
.locals ([378] float64 '358')
.locals ([379] float64 '359')
.locals ([380] void* '360')
.locals ([381] float64 '361')
.locals ([382] void* '362')
.locals ([383] float64 '363')
.locals ([384] void* '364')
.locals ([385] float64 '365')
.locals ([386] void* '366')
.locals ([387] int32 '333')
.locals ([388] int32 '367')
.locals ([389] float64 '368')
.locals ([390] float64 '369')
.locals ([391] float64 '370')
.locals ([392] void* '371')
.locals ([393] float64 '372')
.locals ([394] float64 '373')
.locals ([395] void* '374')
.locals ([396] void* '375')
.locals ([397] void* '376')
.locals ([398] float64 '377')
.locals ([399] float64 '378')
.locals ([400] void* '379')
.locals ([401] float64 '380')
.locals ([402] float64 '381')
.locals ([403] float64 '382')
.locals ([404] float64 '383')
.locals ([405] int32 '353')
.locals ([406] float64 '384')
.locals ([407] float64 '385')
.locals ([408] float64 '386')
.locals ([409] float64 '387')
.locals ([410] float64 '388')
.locals ([411] float64 '389')
.locals ([412] float64 '390')
.locals ([413] float64 '391')
.locals ([414] float64 '392')
.locals ([415] float64 '393')
.locals ([416] void* '394')
.locals ([417] float64 '395')
.locals ([418] void* '396')
.locals ([419] void* '397')
.locals ([420] float64 '398')
.locals ([421] int32 '399')
.locals ([422] void* '400')
.locals ([423] void* '401')
.locals ([424] float64 '402')
.locals ([425] float64 '403')
.locals ([426] void* '404')
.locals ([427] float64 '405')
.locals ([428] float64 '406')
.locals ([429] void* '407')
.locals ([430] float64 '408')
.locals ([431] float64 '409')
.locals ([432] void* '410')
.locals ([433] float64 '411')
.locals ([434] float64 '412')
.locals ([435] void* '413')
.locals ([436] float64 '414')
.locals ([437] float64 '415')
.locals ([438] int32 '416')
.locals ([439] void* '417')
.locals ([440] float64 '418')
.locals ([441] void* '419')
.locals ([442] float64 '420')
.locals ([443] float64 '421')
.locals ([444] float64 '422')
.locals ([445] void* '423')
.locals ([446] void* '424')
.locals ([447] float64 '425')
.locals ([448] float64 '426')
.locals ([449] float64 '427')
.locals ([450] void* '428')
.locals ([451] void* '429')
.locals ([452] void* '430')
.locals ([453] float64 '431')
.locals ([454] float64 '432')
.locals ([455] void* '433')
.locals ([456] float64 '434')
.locals ([457] float64 '435')
.locals ([458] float64 '436')
.locals ([459] void* '437')
.locals ([460] float64 '438')
.locals ([461] void* '439')
.locals ([462] void* '440')
.locals ([463] int32 '441')
.locals ([464] void* '442')
.locals ([465] float64 '443')
.locals ([466] float64 '444')
.locals ([467] float64 '445')
.locals ([468] void* '446')
.locals ([469] void* '447')
.locals ([470] int32 '448')
.locals ([471] float64 '449')
.locals ([472] float64 '450')
.locals ([473] float64 '451')
.locals ([474] float64 '452')
.locals ([475] float64 '453')
.locals ([476] float64 '454')
.locals ([477] float64 '455')
.locals ([478] float64 '456')
.locals ([479] float64 '457')
.locals ([480] void* '458')
.locals ([481] void* '459')
.locals ([482] float64 '460')
.locals ([483] float64 '461')
.locals ([484] float64 '462')
.locals ([485] float64 '463')
.locals ([486] void* '464')
.locals ([487] void* '465')
.locals ([488] void* '466')
.locals ([489] void* '467')
.locals ([490] void* '468')
.locals ([491] void* '469')
.locals ([492] float64 '470')
.locals ([493] void* '471')
.locals ([494] float64 '472')
.locals ([495] float64 '473')
.locals ([496] float64 '474')
.locals ([497] float64 '475')
.locals ([498] void* '476')
.locals ([499] float64 '477')
.locals ([500] float64 '478')
.locals ([501] void* '479')
.locals ([502] void* '480')
.locals ([503] float64 '481')
.locals ([504] float64 '482')
.locals ([505] float64 '483')
.locals ([506] float64 '484')
.locals ([507] float64 '485')
.locals ([508] void* '486')
.locals ([509] float64 '487')
.locals ([510] float64 '488')
.locals ([511] float64 '489')
.locals ([512] float64 '490')
.locals ([513] float64 '491')
.locals ([514] int32 '492')
.locals ([515] float64 '493')
.locals ([516] float64 '494')
.locals ([517] float64 '495')
.locals ([518] float64 '496')
.locals ([519] int32 '471')
.locals ([520] float64 '497')
.locals ([521] int32 '498')
.locals ([522] void* '499')
.locals ([523] float64 '500')
.locals ([524] float64 '501')
.locals ([525] float64 '502')
.locals ([526] void* '503')
.locals ([527] float64 '504')
.locals ([528] float64 '505')
.locals ([529] void* '506')
.locals ([530] float64 '507')
.locals ([531] float64 '508')
.locals ([532] void* '509')
.locals ([533] void* '510')
.locals ([534] void* '511')
.locals ([535] void* '512')
.locals ([536] float64 '513')
.locals ([537] float64 '514')
.locals ([538] void* '515')
.locals ([539] void* '516')
.locals ([540] void* '517')
.locals ([541] float64 '518')
.locals ([542] void* '519')
.locals ([543] float64 '520')
.locals ([544] float64 '521')
.locals ([545] void* '522')
.locals ([546] void* '523')
.locals ([547] void* '524')
.locals ([548] float64 '525')
.locals ([549] float64 '526')
.locals ([550] void* '527')
.locals ([551] void* '528')
.locals ([552] void* '529')
.locals ([553] float64 '530')
.locals ([554] void* '531')
.locals ([555] void* '532')
.locals ([556] void* '533')
.locals ([557] float64 '534')
.locals ([558] void* '535')
.locals ([559] void* '536')
.locals ([560] float64 '537')
.locals ([561] void* '538')
.locals ([562] float64 '539')
.locals ([563] void* '540')
.locals ([564] float64 '541')
.locals ([565] float64 '542')
.locals ([566] void* '543')
.locals ([567] float64 '544')
.locals ([568] void* '545')
.locals ([569] float64 '546')
.locals ([570] void* '547')
.locals ([571] int32 '559')
.locals ([572] int32 '560')
.locals ([573] int32 '561')
.locals ([574] int32 '562')
.locals ([575] float64 '548')
.locals ([576] float64 '549')
.locals ([577] void* '550')
.locals ([578] float64 '551')
.locals ([579] float64 '552')
.locals ([580] float64 '553')
.locals ([581] int32 '594')
.locals ([582] void* '554')
.locals ([583] float64 '555')
.locals ([584] float64 '556')
.locals ([585] float64 '557')
.locals ([586] void* '558')
.locals ([587] int32 '563')
.locals ([588] float64 '564')
.locals ([589] float64 '565')
.locals ([590] void* '566')
.locals ([591] float64 '567')
.locals ([592] float64 '568')
.locals ([593] float64 '569')
.locals ([594] void* '570')
.locals ([595] float64 '571')
.locals ([596] float64 '572')
.locals ([597] float64 '573')
.locals ([598] float64 '574')
.locals ([599] void* '575')
.locals ([600] int32 '576')
.locals ([601] float64 '577')
.locals ([602] void* '578')
.locals ([603] float64 '579')
.locals ([604] void* '580')
.locals ([605] float64 '581')
.locals ([606] float64 '582')
.locals ([607] float64 '583')
.locals ([608] float64 '584')
.locals ([609] float64 '585')
.locals ([610] float64 '586')
.locals ([611] float64 '587')
.locals ([612] float64 '588')
.locals ([613] float64 '589')
.locals ([614] void* '590')
.locals ([615] void* '591')
.locals ([616] void* '592')
.locals ([617] void* '593')
.locals ([618] int32 '594')
.locals ([619] void* '595')
.locals ([620] void* '596')
.locals ([621] float64 '597')
.locals ([622] float64 '598')
.locals ([623] void* '599')
.locals ([624] float64 '600')
.locals ([625] void* '601')
.locals ([626] float64 '602')
.locals ([627] void* '603')
.locals ([628] float64 '604')
.locals ([629] void* '605')
.locals ([630] float64 '606')
.locals ([631] float64 '607')
.locals ([632] float64 '608')
.locals ([633] float64 '609')
.locals ([634] float64 '610')
.locals ([635] float64 '611')
.locals ([636] float64 '612')
.locals ([637] void* '613')
.locals ([638] void* '614')
.locals ([639] float64 '615')
.locals ([640] void* '616')
.locals ([641] float64 '617')
.locals ([642] void* '618')
.locals ([643] void* '619')
.locals ([644] float64 '620')
.locals ([645] void* '621')
.locals ([646] float64 '622')
.locals ([647] float64 '623')
.locals ([648] float64 '624')
.locals ([649] float64 '625')
.locals ([650] void* '626')
.locals ([651] float64 '627')
.locals ([652] void* '628')
.locals ([653] int32 '629')
.locals ([654] void* '630')
.locals ([655] void* '631')
.locals ([656] void* '632')
.locals ([657] float64 '633')
.locals ([658] void* '634')
.locals ([659] float64 '635')
.locals ([660] void* '636')
.locals ([661] float64 '637')
.locals ([662] float64 '638')
.locals ([663] float64 '639')
.locals ([664] void* '640')
.locals ([665] float64 '641')
.locals ([666] void* '642')
.locals ([667] float64 '643')
.locals ([668] float64 '644')
.locals ([669] float64 '645')
.locals ([670] void* '646')
.locals ([671] void* '647')
.locals ([672] float64 '648')
.locals ([673] float64 '649')
.locals ([674] float64 '650')
.locals ([675] int32 '651')
.locals ([676] int32 '652')
.locals ([677] float64 '653')
.locals ([678] float64 '654')
.locals ([679] float64 '655')
.locals ([680] float64 '656')
.locals ([681] float64 '657')
.locals ([682] float64 '658')
.locals ([683] void* '659')
.locals ([684] float64 '660')
.locals ([685] void* '661')
.locals ([686] void* '662')
.locals ([687] float64 '663')
.locals ([688] float64 '664')
.locals ([689] float64 '665')
.locals ([690] void* '666')
.locals ([691] float64 '667')
.locals ([692] float64 '668')
.locals ([693] float64 '669')
.locals ([694] float64 '670')
.locals ([695] float64 '671')
.locals ([696] float64 '672')
.locals ([697] int32 '673')
.locals ([698] int32 '674')
.locals ([699] int32 '675')
.locals ([700] int32 '676')
.locals ([701] int32 '677')
.locals ([702] void* '678')
.locals ([703] float64 '679')
.locals ([704] void* '680')
.locals ([705] int32 '681')
.locals ([706] void* '682')
.locals ([707] int32 '683')
.locals ([708] int32 'i')
.locals ([709] int32 '684')
.locals ([710] void* '685')
.locals ([711] void* '686')
.locals ([712] int32 '687')
.locals ([713] void* '688')
.locals ([714] int32 '689')
.locals ([715] void* '690')
.locals ([716] int32 '691')
.locals ([717] float64 '692')
.locals ([718] float64 '693')
.locals ([719] float64 '694')
.locals ([720] float64 '695')
.locals ([721] float64 '696')
.maxstack 11
ldc.r8 0.0
stsfld float64 'Zero'
ldsflda float64 'One'
stloc 0
ldloc 0
ldc.r8 1.000000e+000
stind.r8
ldsflda float64 'Two'
stloc 1
ldloc 0
ldind.r8
stloc 2
ldloc 1
ldloc 2
ldloc 2
add
stind.r8
ldsflda float64 'Three'
stloc 3
ldloc 1
ldind.r8
stloc 4
ldloc 3
ldloc 4
ldloc 2
add
stind.r8
ldsflda float64 'Four'
stloc 5
ldloc 3
ldind.r8
stloc 6
ldloc 5
ldloc 6
ldloc 2
add
stind.r8
ldsflda float64 'Five'
stloc 7
ldloc 5
ldind.r8
stloc 8
ldloc 7
ldloc 8
ldloc 2
add
stind.r8
ldsflda float64 'Eight'
stloc 9
ldloc 9
ldloc 8
ldloc 8
add
stind.r8
ldsflda float64 'Nine'
stloc 10
ldloc 10
ldloc 6
ldloc 6
mul
stind.r8
ldloc 10
ldind.r8
ldloc 6
mul
stsfld float64 'TwentySeven'
ldloc 8
ldloc 9
ldind.r8
mul
stsfld float64 'ThirtyTwo'
ldloc 8
ldloc 7
ldind.r8
mul
ldloc 6
mul
ldloc 8
mul
stsfld float64 'TwoForty'
ldloc 2
neg
stsfld float64 'MinusOne'
ldsflda float64 'Half'
stloc 11
ldloc 11
ldloc 2
ldloc 4
div
stind.r8
ldloc 2
ldloc 11
ldind.r8
add
stsfld float64 'OneAndHalf'
ldsflda valuetype 'int32[]' 'ErrCnt'
stloc 12
ldc.i4 0
stloc 13
ldloc 12
ldloc 13
stind.i4
ldloc 12
ldc.i4 4
add
ldloc 13
stind.i4
ldsflda valuetype 'int32[]' 'ErrCnt'
ldc.i4 8
add
ldc.i4 0
stind.i4
ldsflda valuetype 'int32[]' 'ErrCnt'
ldc.i4 12
add
ldc.i4 0
stind.i4
ldc.i4 1
stsfld int32 'PageNo'
ldc.i4 0
stsfld int32 'Milestone'
ldc.i4 8
ldftn void 'sigfpe'(int32)
ldsfld int8 __is_unmanaged_signal
brfalse $L860
call void* __getUMThunk(void*)
$L860:
call void* 'signal'(int32,method void *(int32))
ldsfld int8 __is_unmanaged_signal
brfalse $L861
call void* __getMUThunk(void*)
$L861:
pop
call int32 'Instructions'()
pop
call int32 'Pause'()
pop
call int32 'Heading'()
pop
call int32 'Pause'()
pop
call int32 'Characteristics'()
pop
call int32 'Pause'()
pop
call int32 'History'()
pop
call int32 'Pause'()
pop
ldc.i4 7
stsfld int32 'Milestone'
ldsflda valuetype 'int8[]' $_18
call vararg int32 'printf'(void*)
pop
ldc.i4 0
ldsfld float64 'Zero'
stloc 15
ldloc 15
ldloc 15
add
ldloc 15
bne.un $L21
ldsfld float64 'One'
stloc 16
ldloc 16
ldloc 16
sub
ldloc 15
bne.un $L21
ldloc 16
ldloc 15
ble $L21
ldloc 16
ldloc 16
add
ldsfld float64 'Two'
bne.un $L21
ldc.i4 1
stloc 14
br $L22
$L21:
ldc.i4 0
stloc 14
$L22:
ldloc 14
ldsflda valuetype 'int8[]' $_20
call int32 'TstCond'(int32,int32,void*)
pop
ldsflda float64 'Z'
stloc 17
ldloc 17
ldsfld float64 'Zero'
neg
stind.r8
ldloc 17
ldind.r8
ldc.r8 0.0
beq $L23
ldsflda valuetype 'int32[]' 'ErrCnt'
stloc 18
ldloc 18
ldloc 18
ldind.i4
ldc.i4 1
add
stind.i4
ldsflda valuetype 'int8[]' $_25
call vararg int32 'printf'(void*)
pop
ldc.r8 1.000000e-003
stsfld float64 'U1'
ldc.r8 1.000000e+000
stsfld float64 'Radix'
call int32 'TstPtUf'()
pop
$L23:
ldc.i4 0
ldsfld float64 'Three'
stloc 20
ldsfld float64 'Two'
stloc 21
ldsfld float64 'One'
stloc 22
ldloc 20
ldloc 21
ldloc 22
add
bne.un $L29
ldsfld float64 'Four'
stloc 23
ldloc 23
ldloc 20
ldloc 22
add
bne.un $L29
ldsfld float64 'Zero'
stloc 24
ldloc 23
ldloc 21
ldloc 21
neg
mul
add
ldloc 24
bne.un $L29
ldloc 23
ldloc 20
sub
ldloc 22
sub
ldloc 24
bne.un $L29
ldc.i4 1
stloc 19
br $L30
$L29:
ldc.i4 0
stloc 19
$L30:
ldloc 19
ldsflda valuetype 'int8[]' $_28
call int32 'TstCond'(int32,int32,void*)
pop
ldsfld float64 'MinusOne'
stloc 26
ldsfld float64 'One'
stloc 27
ldloc 26
ldc.r8 0.0
ldloc 27
sub
bne.un $L33
ldsfld float64 'Zero'
stloc 28
ldloc 26
ldloc 27
add
ldloc 28
bne.un $L33
ldloc 27
ldloc 26
add
ldloc 28
bne.un $L33
ldloc 27
call float64 'fabs'(float64)
stloc 29
ldsfld float64 'Zero'
stloc 30
ldloc 26
ldloc 29
add
ldloc 30
bne.un $L33
ldsfld float64 'MinusOne'
stloc 31
ldloc 31
ldloc 31
ldloc 31
mul
add
ldloc 30
bne.un $L33
ldc.i4 1
stloc 25
br $L34
$L33:
ldc.i4 0
stloc 25
$L34:
ldc.i4 0
ldloc 25
ldsflda valuetype 'int8[]' $_32
call int32 'TstCond'(int32,int32,void*)
pop
ldc.i4 0
ldsfld float64 'Half'
stloc 33
ldloc 33
ldsfld float64 'MinusOne'
add
ldloc 33
add
ldsfld float64 'Zero'
bne.un $L37
ldc.i4 1
stloc 32
br $L38
$L37:
ldc.i4 0
stloc 32
$L38:
ldloc 32
ldsflda valuetype 'int8[]' $_36
call int32 'TstCond'(int32,int32,void*)
pop
ldc.i4 10
stsfld int32 'Milestone'
ldc.i4 0
ldsfld float64 'Nine'
stloc 35
ldsfld float64 'Three'
stloc 36
ldloc 35
ldloc 36
ldloc 36
mul
bne.un $L42
ldsfld float64 'TwentySeven'
stloc 37
ldloc 37
ldloc 35
ldloc 36
mul
bne.un $L42
ldsfld float64 'Eight'
stloc 38
ldsfld float64 'Four'
stloc 39
ldloc 38
ldloc 39
ldloc 39
add
bne.un $L42
ldsfld float64 'ThirtyTwo'
stloc 40
ldloc 40
ldloc 38
ldloc 39
mul
bne.un $L42
ldloc 40
ldloc 37
sub
ldloc 39
sub
ldsfld float64 'One'
sub
ldsfld float64 'Zero'
bne.un $L42
ldc.i4 1
stloc 34
br $L43
$L42:
ldc.i4 0
stloc 34
$L43:
ldloc 34
ldsflda valuetype 'int8[]' $_41
call int32 'TstCond'(int32,int32,void*)
pop
ldc.i4 0
ldsfld float64 'Five'
stloc 42
ldsfld float64 'Four'
stloc 43
ldloc 42
ldloc 43
ldsfld float64 'One'
add
bne.un $L46
ldsfld float64 'TwoForty'
stloc 44
ldsfld float64 'Three'
stloc 45
ldloc 44
ldloc 43
ldloc 42
mul
ldloc 45
mul
ldloc 43
mul
bne.un $L46
ldsfld float64 'Zero'
stloc 46
ldloc 44
ldloc 45
div
ldloc 43
ldloc 43
mul
ldloc 42
mul
sub
ldloc 46
bne.un $L46
ldloc 44
ldloc 43
div
ldloc 42
ldloc 45
mul
ldloc 43
mul
sub
ldloc 46
bne.un $L46
ldloc 44
ldloc 42
div
ldloc 43
ldloc 45
mul
ldloc 43
mul
sub
ldloc 46
bne.un $L46
ldc.i4 1
stloc 41
br $L47
$L46:
ldc.i4 0
stloc 41
$L47:
ldloc 41
ldsflda valuetype 'int8[]' $_45
call int32 'TstCond'(int32,int32,void*)
pop
ldsflda valuetype 'int32[]' 'ErrCnt'
ldind.i4
ldc.i4 0
bne.un $L48
ldsflda valuetype 'int8[]' $_50
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_51
call vararg int32 'printf'(void*)
pop
$L48:
ldsflda valuetype 'int8[]' $_52
call vararg int32 'printf'(void*)
pop
ldsfld float64 'One'
stsfld float64 'W'
$L53:
ldsflda float64 'W'
stloc 47
ldloc 47
ldind.r8
stloc 48
ldloc 47
ldloc 48
ldloc 48
add
stind.r8
ldsflda float64 'Y'
stloc 49
ldloc 47
ldind.r8
stloc 50
ldsfld float64 'One'
stloc 51
ldloc 49
ldloc 50
ldloc 51
add
stind.r8
ldsflda float64 'Z'
stloc 52
ldloc 52
ldloc 49
ldind.r8
ldloc 50
sub
stind.r8
ldloc 49
ldloc 52
ldind.r8
ldloc 51
sub
stind.r8
$L54:
ldsfld float64 'Y'
call float64 'fabs'(float64)
stloc 53
ldsfld float64 'MinusOne'
ldloc 53
add
ldsfld float64 'Zero'
blt $L53
ldsfld float64 'Zero'
stsfld float64 'Precision'
ldsfld float64 'One'
stsfld float64 'Y'
$L56:
ldsflda float64 'Radix'
stloc 54
ldsfld float64 'W'
stloc 55
ldsflda float64 'Y'
stloc 56
ldloc 56
ldind.r8
stloc 57
ldloc 54
ldloc 55
ldloc 57
add
stind.r8
ldloc 56
ldloc 57
ldloc 57
add
stind.r8
ldloc 54
ldloc 54
ldind.r8
ldloc 55
sub
stind.r8
$L57:
ldsfld float64 'Radix'
ldsfld float64 'Zero'
beq $L56
ldsfld float64 'Radix'
ldsfld float64 'Two'
bge $L59
ldsfld float64 'One'
stsfld float64 'Radix'
$L59:
ldsflda valuetype 'int8[]' $_61
ldsfld float64 'Radix'
call vararg int32 'printf'(void*,...,float64)
pop
ldsfld float64 'Radix'
ldc.r8 1.000000e+000
beq $L62
ldsfld float64 'One'
stsfld float64 'W'
$L64:
ldsflda float64 'Precision'
stloc 58
ldsfld float64 'One'
stloc 59
ldloc 58
ldloc 58
ldind.r8
ldloc 59
add
stind.r8
ldsflda float64 'W'
stloc 60
ldloc 60
ldloc 60
ldind.r8
ldsfld float64 'Radix'
mul
stind.r8
ldloc 60
ldind.r8
ldloc 59
add
stsfld float64 'Y'
$L65:
ldsfld float64 'Y'
ldsfld float64 'W'
sub
ldsfld float64 'One'
beq $L64
$L62:
ldsflda float64 'U1'
stloc 61
ldloc 61
ldsfld float64 'One'
ldsfld float64 'W'
div
stind.r8
ldloc 61
ldind.r8
stloc 62
ldsfld float64 'Radix'
ldloc 62
mul
stsfld float64 'U2'
ldsflda valuetype 'int8[]' $_67
ldloc 62
call vararg int32 'printf'(void*,...,float64)
pop
ldsflda valuetype 'int8[]' $_68
call vararg int32 'printf'(void*)
pop
ldsfld float64 'Radix'
stsfld float64 'E0'
ldsfld float64 'U1'
stsfld float64 'E1'
ldsfld float64 'U2'
stsfld float64 'E9'
ldsfld float64 'Precision'
stsfld float64 'E3'
ldsflda float64 'X'
stloc 63
ldloc 63
ldsfld float64 'Four'
ldsfld float64 'Three'
div
stind.r8
ldsflda float64 'Third'
stloc 64
ldloc 64
ldloc 63
ldind.r8
ldsfld float64 'One'
sub
stind.r8
ldsflda float64 'F6'
stloc 65
ldloc 64
ldind.r8
stloc 66
ldloc 65
ldsfld float64 'Half'
ldloc 66
sub
stind.r8
ldloc 65
ldind.r8
stloc 67
ldloc 63
ldloc 67
ldloc 67
add
stind.r8
ldloc 63
ldind.r8
ldloc 66
sub
conv.r8
call float64 'fabs'(float64)
stloc 68
ldloc 63
ldloc 68
stind.r8
ldsfld float64 'X'
ldsfld float64 'U2'
bge $L69
ldsfld float64 'U2'
stsfld float64 'X'
$L69:
$L71:
ldsflda float64 'U2'
stloc 69
ldsflda float64 'X'
stloc 70
ldloc 69
ldloc 70
ldind.r8
stind.r8
ldsflda float64 'Y'
stloc 71
ldloc 69
ldind.r8
stloc 72
ldloc 71
ldsfld float64 'Half'
ldloc 72
mul
ldsfld float64 'ThirtyTwo'
ldloc 72
mul
ldloc 72
mul
add
stind.r8
ldsfld float64 'One'
stloc 73
ldloc 71
ldloc 73
ldloc 71
ldind.r8
add
stind.r8
ldloc 70
ldloc 71
ldind.r8
ldloc 73
sub
stind.r8
$L72:
ldsfld float64 'X'
stloc 74
ldsfld float64 'U2'
ldloc 74
ble $L74
ldloc 74
ldsfld float64 'Zero'
bgt $L71
$L74:
ldsflda float64 'X'
stloc 75
ldloc 75
ldsfld float64 'Two'
ldsfld float64 'Three'
div
stind.r8
ldsflda float64 'F6'
stloc 76
ldsfld float64 'Half'
stloc 77
ldloc 76
ldloc 75
ldind.r8
ldloc 77
sub
stind.r8
ldsflda float64 'Third'
stloc 78
ldloc 76
ldind.r8
stloc 79
ldloc 78
ldloc 79
ldloc 79
add
stind.r8
ldloc 75
ldloc 78
ldind.r8
ldloc 77
sub
stind.r8
ldloc 75
ldind.r8
ldloc 79
add
conv.r8
call float64 'fabs'(float64)
stloc 80
ldloc 75
ldloc 80
stind.r8
ldsfld float64 'X'
ldsfld float64 'U1'
bge $L75
ldsfld float64 'U1'
stsfld float64 'X'
$L75:
$L77:
ldsflda float64 'U1'
stloc 81
ldsflda float64 'X'
stloc 82
ldloc 81
ldloc 82
ldind.r8
stind.r8
ldsflda float64 'Y'
stloc 83
ldsfld float64 'Half'
stloc 84
ldloc 81
ldind.r8
stloc 85
ldloc 83
ldloc 84
ldloc 85
mul
ldsfld float64 'ThirtyTwo'
ldloc 85
mul
ldloc 85
mul
add
stind.r8
ldloc 83
ldloc 84
ldloc 83
ldind.r8
sub
stind.r8
ldloc 82
ldloc 84
ldloc 83
ldind.r8
add
stind.r8
ldloc 83
ldloc 84
ldloc 82
ldind.r8
sub
stind.r8
ldloc 82
ldloc 84
ldloc 83
ldind.r8
add
stind.r8
$L78:
ldsfld float64 'X'
stloc 86
ldsfld float64 'U1'
ldloc 86
ble $L80
ldloc 86
ldsfld float64 'Zero'
bgt $L77
$L80:
ldsfld float64 'U1'
ldsfld float64 'E1'
bne.un $L81
ldsflda valuetype 'int8[]' $_83
call vararg int32 'printf'(void*)
pop
br $L82
$L81:
ldsflda valuetype 'int8[]' $_84
ldsfld float64 'U1'
call vararg int32 'printf'(void*,...,float64)
pop
$L82:
ldsfld float64 'U1'
stloc 87
ldsfld float64 'One'
ldloc 87
div
stsfld float64 'W'
ldsfld float64 'Half'
stloc 88
ldloc 88
ldloc 87
sub
ldloc 88
add
stsfld float64 'F9'
ldsfld float64 'U2'
ldloc 87
div
ldc.r8 1.000000e-002
add
conv.r8
call float64 'floor'(float64)
stloc 89
ldloc 89
stsfld float64 'Radix'
ldsfld float64 'Radix'
ldsfld float64 'E0'
bne.un $L86
ldsflda valuetype 'int8[]' $_88
call vararg int32 'printf'(void*)
pop
br $L87
$L86:
ldsflda valuetype 'int8[]' $_89
ldsfld float64 'Radix'
call vararg int32 'printf'(void*,...,float64)
pop
$L87:
ldc.i4 2
ldsfld float64 'Eight'
stloc 91
ldsfld float64 'Radix'
ldloc 91
ldloc 91
add
bgt $L93
ldc.i4 1
stloc 90
br $L94
$L93:
ldc.i4 0
stloc 90
$L94:
ldloc 90
ldsflda valuetype 'int8[]' $_91
call int32 'TstCond'(int32,int32,void*)
pop
ldc.i4 3
ldsfld float64 'Radix'
stloc 93
ldloc 93
ldsfld float64 'Two'
beq $L101
ldloc 93
ldc.r8 1.000000e+001
beq $L101
ldloc 93
ldsfld float64 'One'
bne.un $L98
$L101:
ldc.i4 1
stloc 92
br $L99
$L98:
ldc.i4 0
stloc 92
$L99:
ldloc 92
ldsflda valuetype 'int8[]' $_96
call int32 'TstCond'(int32,int32,void*)
pop
ldc.i4 20
stsfld int32 'Milestone'
ldc.i4 0
ldsfld float64 'Half'
stloc 95
ldsfld float64 'F9'
ldloc 95
sub
ldloc 95
bge $L106
ldc.i4 1
stloc 94
br $L107
$L106:
ldc.i4 0
stloc 94
$L107:
ldloc 94
ldsflda valuetype 'int8[]' $_105
call int32 'TstCond'(int32,int32,void*)
pop
ldsflda float64 'X'
stloc 97
ldloc 97
ldsfld float64 'F9'
stind.r8
ldc.i4 1
stsfld int32 'I'
ldsflda float64 'Y'
stloc 98
ldsfld float64 'Half'
stloc 99
ldloc 98
ldloc 97
ldind.r8
ldloc 99
sub
stind.r8
ldloc 98
ldind.r8
ldloc 99
sub
stsfld float64 'Z'
ldc.i4 0
ldsfld float64 'X'
ldsfld float64 'One'
bne.un $L112
ldsfld float64 'Z'
ldsfld float64 'Zero'
bne.un $L110
$L112:
ldc.i4 1
stloc 96
br $L111
$L110:
ldc.i4 0
stloc 96
$L111:
ldloc 96
ldsflda valuetype 'int8[]' $_109
call int32 'TstCond'(int32,int32,void*)
pop
ldsfld float64 'One'
stloc 100
ldsfld float64 'U2'
stloc 101
ldloc 100
ldloc 101
add
stsfld float64 'X'
ldc.i4 0
stsfld int32 'I'
ldc.i4 25
stsfld int32 'Milestone'
ldsflda float64 'BMinusU2'
stloc 102
ldsfld float64 'Radix'
stloc 103
ldloc 102
ldloc 103
ldloc 100
sub
stind.r8
ldloc 102
ldloc 102
ldind.r8
ldloc 101
sub
ldloc 100
add
stind.r8
ldloc 103
ldloc 100
beq $L114
ldsfld float64 'U1'
call float64 'log'(float64)
stloc 104
ldsfld float64 'Radix'
call float64 'log'(float64)
stloc 105
ldsfld float64 'TwoForty'
neg
ldloc 104
mul
ldloc 105
div
stsfld float64 'X'
ldsfld float64 'Half'
ldsfld float64 'X'
add
conv.r8
call float64 'floor'(float64)
stloc 106
ldloc 106
stsfld float64 'Y'
ldsfld float64 'X'
ldsfld float64 'Y'
sub
conv.r8
call float64 'fabs'(float64)
stloc 107
ldloc 107
ldsfld float64 'Four'
mul
ldsfld float64 'One'
bge $L116
ldsfld float64 'Y'
stsfld float64 'X'
$L116:
ldsflda float64 'Precision'
stloc 108
ldloc 108
ldsfld float64 'X'
ldsfld float64 'TwoForty'
div
stind.r8
ldsfld float64 'Half'
ldloc 108
ldind.r8
add
conv.r8
call float64 'floor'(float64)
stloc 109
ldloc 109
stsfld float64 'Y'
ldsfld float64 'Precision'
ldsfld float64 'Y'
sub
conv.r8
call float64 'fabs'(float64)
stloc 110
ldloc 110
ldsfld float64 'TwoForty'
mul
ldsfld float64 'Half'
bge $L118
ldsfld float64 'Y'
stsfld float64 'Precision'
$L118:
$L114:
ldsfld float64 'Precision'
stloc 111
ldloc 111
call float64 'floor'(float64)
stloc 112
ldloc 111
ldloc 112
bne.un $L122
ldsfld float64 'Radix'
ldsfld float64 'One'
bne.un $L120
$L122:
ldsflda valuetype 'int8[]' $_123
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_124
call vararg int32 'printf'(void*)
pop
$L120:
ldsfld float64 'Radix'
ldsfld float64 'One'
bne.un $L125
ldsflda valuetype 'int8[]' $_127
call vararg int32 'printf'(void*)
pop
br $L126
$L125:
ldsflda valuetype 'int8[]' $_128
ldsfld float64 'Precision'
call vararg int32 'printf'(void*,...,float64)
pop
$L126:
ldc.i4 1
ldsfld float64 'Nine'
stloc 114
ldsfld float64 'U2'
ldloc 114
mul
ldloc 114
mul
ldsfld float64 'TwoForty'
mul
ldsfld float64 'One'
bge $L131
ldc.i4 1
stloc 113
br $L132
$L131:
ldc.i4 0
stloc 113
$L132:
ldloc 113
ldsflda valuetype 'int8[]' $_130
call int32 'TstCond'(int32,int32,void*)
pop
ldc.i4 30
stsfld int32 'Milestone'
ldsfld float64 'Four'
stloc 115
ldsfld float64 'Three'
stloc 116
ldsfld float64 'One'
stloc 117
ldloc 117
ldloc 115
div
conv.r8
stloc 118
ldloc 115
ldloc 116
div
ldloc 117
sub
ldloc 118
sub
ldloc 116
mul
ldloc 118
sub
conv.r8
call float64 'fabs'(float64)
stloc 119
ldloc 119
stsfld float64 'X'
$L134:
ldsflda float64 'Z2'
stloc 120
ldsflda float64 'X'
stloc 121
ldloc 120
ldloc 121
ldind.r8
stind.r8
ldsfld float64 'One'
stloc 122
ldloc 120
ldind.r8
stloc 123
ldloc 121
ldloc 122
ldsfld float64 'Half'
ldloc 123
mul
ldsfld float64 'ThirtyTwo'
ldloc 123
mul
ldloc 123
mul
add
add
ldloc 122
sub
stind.r8
$L135:
ldsfld float64 'X'
stloc 124
ldsfld float64 'Z2'
ldloc 124
ble $L137
ldloc 124
ldsfld float64 'Zero'
bgt $L134
$L137:
ldsfld float64 'Three'
stloc 125
ldsfld float64 'Four'
stloc 126
ldloc 125
ldloc 126
div
ldsfld float64 'Two'
ldloc 125
div
sub
ldloc 125
mul
ldsfld float64 'One'
ldloc 126
div
sub
conv.r8
call float64 'fabs'(float64)
stloc 127
ldloc 127
stsfld float64 'Z'
ldloc 127
stsfld float64 'Y'
ldloc 127
stsfld float64 'X'
$L138:
ldsflda float64 'Z1'
stloc 128
ldsflda float64 'Z'
stloc 129
ldloc 128
ldloc 129
ldind.r8
stind.r8
ldsfld float64 'One'
ldsfld float64 'Two'
div
conv.r8
stloc 130
ldloc 128
ldind.r8
stloc 131
ldloc 129
ldloc 130
ldloc 130
ldsfld float64 'Half'
ldloc 131
mul
ldsfld float64 'ThirtyTwo'
ldloc 131
mul
ldloc 131
mul
add
sub
ldloc 130
add
sub
ldloc 130
add
stind.r8
$L139:
ldsfld float64 'Z'
stloc 132
ldsfld float64 'Z1'
ldloc 132
ble $L141
ldloc 132
ldsfld float64 'Zero'
bgt $L138
$L141:
$L142:
$L145:
ldsflda float64 'Y1'
stloc 133
ldsflda float64 'Y'
stloc 134
ldloc 133
ldloc 134
ldind.r8
stind.r8
ldsfld float64 'Half'
stloc 135
ldloc 133
ldind.r8
stloc 136
ldloc 134
ldloc 135
ldloc 135
ldloc 135
ldloc 136
mul
ldsfld float64 'ThirtyTwo'
ldloc 136
mul
ldloc 136
mul
add
sub
ldloc 135
add
sub
ldloc 135
add
stind.r8
$L146:
ldsfld float64 'Y'
stloc 137
ldsfld float64 'Y1'
ldloc 137
ble $L148
ldloc 137
ldsfld float64 'Zero'
bgt $L145
$L148:
ldsflda float64 'X1'
stloc 138
ldsflda float64 'X'
stloc 139
ldloc 138
ldloc 139
ldind.r8
stind.r8
ldloc 138
ldind.r8
stloc 140
ldsfld float64 'F9'
stloc 141
ldloc 139
ldsfld float64 'Half'
ldloc 140
mul
ldsfld float64 'ThirtyTwo'
ldloc 140
mul
ldloc 140
mul
add
ldloc 141
sub
ldloc 141
add
stind.r8
$L143:
ldsfld float64 'X'
stloc 142
ldsfld float64 'X1'
ldloc 142
ble $L149
ldloc 142
ldsfld float64 'Zero'
bgt $L142
$L149:
ldsfld float64 'X1'
stloc 143
ldloc 143
ldsfld float64 'Y1'
bne.un $L152
ldloc 143
ldsfld float64 'Z1'
beq $L150
$L152:
ldc.i4 1
ldsflda valuetype 'int8[]' $_153
call int32 'BadCond'(int32,void*)
pop
ldsflda valuetype 'int8[]' $_154
ldsfld float64 'X1'
ldsfld float64 'Y1'
ldsfld float64 'Z1'
call vararg int32 'printf'(void*,...,float64,float64,float64)
pop
ldsflda valuetype 'int8[]' $_155
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_156
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_157
call int32 'notify'(void*)
pop
ldsfld float64 'U1'
stloc 144
ldsfld float64 'X1'
ldloc 144
beq $L161
ldsfld float64 'Y1'
ldloc 144
beq $L161
ldsfld float64 'Z1'
ldloc 144
bne.un $L151
$L161:
ldsflda valuetype 'int8[]' $_162
call vararg int32 'printf'(void*)
pop
br $L151
$L150:
ldsfld float64 'Z1'
ldsfld float64 'U1'
bne.un $L165
ldsfld float64 'Z2'
ldsfld float64 'U2'
beq $L163
$L165:
ldsfld float64 'Z1'
ldsfld float64 'U1'
bge $L168
ldsfld float64 'Z2'
ldsfld float64 'U2'
blt $L166
$L168:
ldc.i4 0
ldsflda valuetype 'int8[]' $_169
call int32 'BadCond'(int32,void*)
pop
ldsflda valuetype 'int8[]' $_170
call int32 'notify'(void*)
pop
ldsflda valuetype 'int8[]' $_171
ldsfld float64 'U1'
stloc 145
ldloc 145
ldsfld float64 'Z1'
ldloc 145
sub
conv.r8
call vararg int32 'printf'(void*,...,float64,float64)
pop
ldsflda valuetype 'int8[]' $_172
ldsfld float64 'U2'
stloc 146
ldloc 146
ldsfld float64 'Z2'
ldloc 146
sub
conv.r8
call vararg int32 'printf'(void*,...,float64,float64)
pop
br $L167
$L166:
ldsfld float64 'Zero'
stloc 147
ldsfld float64 'Z1'
ldloc 147
ble $L175
ldsfld float64 'Z2'
ldloc 147
bgt $L173
$L175:
ldsflda valuetype 'int8[]' $_176
ldsfld float64 'Radix'
call vararg int32 'printf'(void*,...,float64)
pop
ldsflda valuetype 'int8[]' $_177
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_178
ldsfld float64 'Z1'
ldsfld float64 'Z2'
call vararg int32 'printf'(void*,...,float64,float64)
pop
ldsflda valuetype 'int8[]' $_179
call int32 'notify'(void*)
pop
$L173:
ldsfld float64 'Z1'
stloc 148
ldloc 148
ldsfld float64 'Z2'
bne.un $L182
ldloc 148
ldsfld float64 'Zero'
ble $L180
$L182:
ldsflda float64 'X'
stloc 149
ldloc 149
ldsfld float64 'Z1'
ldsfld float64 'U1'
div
stind.r8
ldsflda float64 'Y'
stloc 150
ldloc 150
ldsfld float64 'Z2'
ldsfld float64 'U2'
div
stind.r8
ldloc 150
ldind.r8
ldloc 149
ldind.r8
ble $L183
ldsfld float64 'Y'
stsfld float64 'X'
$L183:
ldsfld float64 'X'
call float64 'log'(float64)
stloc 151
ldloc 151
neg
stsfld float64 'Q'
ldsflda valuetype 'int8[]' $_185
call vararg int32 'printf'(void*)
pop
ldsfld float64 'Radix'
call float64 'log'(float64)
stloc 152
ldsflda valuetype 'int8[]' $_186
ldsfld float64 'Q'
ldloc 152
div
conv.r8
call vararg int32 'printf'(void*,...,float64)
pop
ldc.r8 1.000000e+001
call float64 'log'(float64)
stloc 153
ldsflda valuetype 'int8[]' $_187
ldsfld float64 'Q'
ldloc 153
div
conv.r8
call vararg int32 'printf'(void*,...,float64)
pop
$L180:
ldsflda valuetype 'int8[]' $_162
call vararg int32 'printf'(void*)
pop
$L167:
$L163:
$L151:
call int32 'Pause'()
pop
ldc.i4 35
stsfld int32 'Milestone'
ldsfld float64 'Radix'
ldsfld float64 'Two'
blt $L189
ldsflda float64 'X'
stloc 155
ldsfld float64 'Radix'
stloc 156
ldloc 155
ldsfld float64 'W'
ldloc 156
ldloc 156
mul
div
stind.r8
ldsflda float64 'Y'
stloc 157
ldloc 155
ldind.r8
stloc 158
ldloc 157
ldloc 158
ldsfld float64 'One'
add
stind.r8
ldsflda float64 'Z'
stloc 159
ldloc 159
ldloc 157
ldind.r8
ldloc 158
sub
stind.r8
ldsflda float64 'T'
stloc 160
ldloc 159
ldind.r8
stloc 161
ldsfld float64 'U2'
stloc 162
ldloc 160
ldloc 161
ldloc 162
add
stind.r8
ldloc 155
ldloc 160
ldind.r8
ldloc 161
sub
stind.r8
ldc.i4 0
ldloc 155
ldind.r8
ldloc 162
bne.un $L193
ldc.i4 1
stloc 154
br $L194
$L193:
ldc.i4 0
stloc 154
$L194:
ldloc 154
ldsflda valuetype 'int8[]' $_192
call int32 'TstCond'(int32,int32,void*)
pop
ldsfld float64 'X'
ldsfld float64 'U2'
bne.un $L195
ldsflda valuetype 'int8[]' $_197
call vararg int32 'printf'(void*)
pop
$L195:
$L189:
ldsflda valuetype 'int8[]' $_198
call vararg int32 'printf'(void*)
pop
ldsflda float64 'Y'
stloc 163
ldsfld float64 'F9'
stloc 164
ldsfld float64 'One'
stloc 165
ldloc 163
ldloc 164
ldloc 165
mul
stind.r8
ldsflda float64 'Z'
stloc 166
ldloc 166
ldloc 165
ldloc 164
mul
stind.r8
ldsflda float64 'X'
stloc 167
ldsfld float64 'Half'
stloc 168
ldloc 167
ldloc 164
ldloc 168
sub
stind.r8
ldloc 167
ldind.r8
stloc 169
ldloc 163
ldloc 163
ldind.r8
ldloc 168
sub
ldloc 169
sub
stind.r8
ldloc 166
ldloc 166
ldind.r8
ldloc 168
sub
ldloc 169
sub
stind.r8
ldsfld float64 'U2'
stloc 170
ldloc 167
ldloc 165
ldloc 170
add
stind.r8
ldsflda float64 'T'
stloc 171
ldloc 167
ldind.r8
stloc 172
ldsfld float64 'Radix'
stloc 173
ldloc 171
ldloc 172
ldloc 173
mul
stind.r8
ldsflda float64 'R'
stloc 174
ldloc 174
ldloc 173
ldloc 172
mul
stind.r8
ldloc 167
ldloc 171
ldind.r8
ldloc 173
sub
stind.r8
ldloc 173
ldloc 170
mul
conv.r8
stloc 175
ldloc 167
ldloc 167
ldind.r8
ldloc 175
sub
stind.r8
ldloc 171
ldloc 174
ldind.r8
ldloc 173
sub
stind.r8
ldloc 171
ldloc 171
ldind.r8
ldloc 175
sub
stind.r8
ldloc 173
ldloc 165
sub
conv.r8
stloc 176
ldloc 167
ldloc 167
ldind.r8
ldloc 176
mul
stind.r8
ldloc 171
ldloc 171
ldind.r8
ldloc 176
mul
stind.r8
ldsfld float64 'Zero'
stloc 177
ldsfld float64 'X'
ldloc 177
bne.un $L199
ldsfld float64 'Y'
ldloc 177
bne.un $L199
ldsfld float64 'Z'
ldloc 177
bne.un $L199
ldsfld float64 'T'
ldloc 177
bne.un $L199
ldc.i4 1
stsfld int32 'GMult'
br $L200
$L199:
ldc.i4 0
stloc 178
ldloc 178
stsfld int32 'GMult'
ldc.i4 1
ldloc 178
ldsflda valuetype 'int8[]' $_201
call int32 'TstCond'(int32,int32,void*)
pop
$L200:
ldsflda float64 'Z'
stloc 180
ldloc 180
ldsfld float64 'Radix'
ldsfld float64 'U2'
mul
stind.r8
ldsflda float64 'X'
stloc 181
ldloc 180
ldind.r8
stloc 182
ldloc 181
ldsfld float64 'One'
ldloc 182
add
stind.r8
ldloc 181
ldind.r8
stloc 183
ldloc 183
ldloc 182
add
ldloc 183
ldloc 183
mul
sub
conv.r8
call float64 'fabs'(float64)
stloc 184
ldsfld float64 'U2'
stloc 185
ldloc 184
ldloc 185
sub
stsfld float64 'Y'
ldsflda float64 'X'
stloc 186
ldloc 186
ldsfld float64 'One'
ldloc 185
sub
stind.r8
ldloc 186
ldind.r8
stloc 187
ldloc 187
ldloc 185
sub
ldloc 187
ldloc 187
mul
sub
conv.r8
call float64 'fabs'(float64)
stloc 188
ldloc 188
ldsfld float64 'U1'
sub
stsfld float64 'Z'
ldc.i4 0
ldsfld float64 'Zero'
stloc 189
ldsfld float64 'Y'
ldloc 189
bgt $L204
ldsfld float64 'Z'
ldloc 189
bgt $L204
ldc.i4 1
stloc 179
br $L205
$L204:
ldc.i4 0
stloc 179
$L205:
ldloc 179
ldsflda valuetype 'int8[]' $_203
call int32 'TstCond'(int32,int32,void*)
pop
ldsflda float64 'Y'
stloc 191
ldsfld float64 'One'
stloc 192
ldsfld float64 'U2'
stloc 193
ldloc 191
ldloc 192
ldloc 193
sub
stind.r8
ldsflda float64 'X'
stloc 194
ldloc 194
ldloc 192
ldloc 193
add
stind.r8
ldsflda float64 'Z'
stloc 195
ldloc 195
ldloc 192
ldloc 191
ldind.r8
div
stind.r8
ldloc 191
ldloc 195
ldind.r8
ldloc 194
ldind.r8
sub
stind.r8
ldsfld float64 'Three'
stloc 196
ldloc 194
ldloc 192
ldloc 196
div
stind.r8
ldsfld float64 'Nine'
stloc 197
ldloc 195
ldloc 196
ldloc 197
div
stind.r8
ldloc 195
ldind.r8
stloc 198
ldloc 194
ldloc 194
ldind.r8
ldloc 198
sub
stind.r8
ldsflda float64 'T'
stloc 199
ldloc 199
ldloc 197
ldsfld float64 'TwentySeven'
div
stind.r8
ldloc 195
ldloc 198
ldloc 199
ldind.r8
sub
stind.r8
ldc.i4 2
ldsfld float64 'Zero'
stloc 200
ldsfld float64 'X'
ldloc 200
bne.un $L208
ldsfld float64 'Y'
ldloc 200
bne.un $L208
ldsfld float64 'Z'
ldloc 200
bne.un $L208
ldc.i4 1
stloc 190
br $L209
$L208:
ldc.i4 0
stloc 190
$L209:
ldloc 190
ldsflda valuetype 'int8[]' $_207
call int32 'TstCond'(int32,int32,void*)
pop
ldsflda float64 'Y'
stloc 201
ldsfld float64 'F9'
stloc 202
ldsfld float64 'One'
stloc 203
ldloc 201
ldloc 202
ldloc 203
div
stind.r8
ldsflda float64 'X'
stloc 204
ldsfld float64 'Half'
stloc 205
ldloc 204
ldloc 202
ldloc 205
sub
stind.r8
ldloc 201
ldloc 201
ldind.r8
ldloc 205
sub
ldloc 204
ldind.r8
sub
stind.r8
ldloc 204
ldloc 203
ldsfld float64 'U2'
add
stind.r8
ldsflda float64 'T'
stloc 206
ldloc 204
ldind.r8
stloc 207
ldloc 206
ldloc 207
ldloc 203
div
stind.r8
ldloc 204
ldloc 206
ldind.r8
ldloc 207
sub
stind.r8
ldsfld float64 'Zero'
stloc 208
ldsfld float64 'X'
ldloc 208
bne.un $L210
ldsfld float64 'Y'
ldloc 208
bne.un $L210
ldsfld float64 'Z'
ldloc 208
bne.un $L210
ldc.i4 1
stsfld int32 'GDiv'
br $L211
$L210:
ldc.i4 0
stloc 209
ldloc 209
stsfld int32 'GDiv'
ldc.i4 1
ldloc 209
ldsflda valuetype 'int8[]' $_212
call int32 'TstCond'(int32,int32,void*)
pop
$L211:
ldsflda float64 'X'
stloc 211
ldsfld float64 'One'
stloc 212
ldloc 211
ldloc 212
ldloc 212
ldsfld float64 'U2'
add
div
stind.r8
ldsflda float64 'Y'
stloc 213
ldsfld float64 'Half'
stloc 214
ldloc 213
ldloc 211
ldind.r8
ldloc 214
sub
ldloc 214
sub
stind.r8
ldc.i4 1
ldloc 213
ldind.r8
ldsfld float64 'Zero'
bge $L215
ldc.i4 1
stloc 210
br $L216
$L215:
ldc.i4 0
stloc 210
$L216:
ldloc 210
ldsflda valuetype 'int8[]' $_214
call int32 'TstCond'(int32,int32,void*)
pop
ldsflda float64 'X'
stloc 216
ldsfld float64 'One'
stloc 217
ldsfld float64 'U2'
stloc 218
ldloc 216
ldloc 217
ldloc 218
sub
stind.r8
ldsflda float64 'Y'
stloc 219
ldsfld float64 'Radix'
stloc 220
ldloc 219
ldloc 217
ldloc 220
ldloc 218
mul
add
stind.r8
ldsflda float64 'Z'
stloc 221
ldloc 216
ldind.r8
stloc 222
ldloc 221
ldloc 222
ldloc 220
mul
stind.r8
ldsflda float64 'T'
stloc 223
ldloc 219
ldind.r8
stloc 224
ldloc 223
ldloc 224
ldloc 220
mul
stind.r8
ldsflda float64 'R'
stloc 225
ldloc 225
ldloc 221
ldind.r8
ldloc 220
div
stind.r8
ldsflda float64 'StickyBit'
stloc 226
ldloc 226
ldloc 223
ldind.r8
ldloc 220
div
stind.r8
ldloc 216
ldloc 225
ldind.r8
ldloc 222
sub
stind.r8
ldloc 219
ldloc 226
ldind.r8
ldloc 224
sub
stind.r8
ldc.i4 0
ldsfld float64 'Zero'
stloc 227
ldsfld float64 'X'
ldloc 227
bne.un $L219
ldsfld float64 'Y'
ldloc 227
bne.un $L219
ldc.i4 1
stloc 215
br $L220
$L219:
ldc.i4 0
stloc 215
$L220:
ldloc 215
ldsflda valuetype 'int8[]' $_218
call int32 'TstCond'(int32,int32,void*)
pop
ldsflda float64 'Y'
stloc 228
ldsfld float64 'One'
stloc 229
ldloc 228
ldloc 229
ldsfld float64 'U1'
sub
stind.r8
ldloc 229
ldsfld float64 'F9'
sub
stsfld float64 'X'
ldloc 228
ldloc 229
ldloc 228
ldind.r8
sub
stind.r8
ldsflda float64 'T'
stloc 230
ldsfld float64 'Radix'
stloc 231
ldloc 230
ldloc 231
ldsfld float64 'U2'
sub
stind.r8
ldloc 231
ldsfld float64 'BMinusU2'
sub
stsfld float64 'Z'
ldloc 230
ldloc 231
ldloc 230
ldind.r8
sub
stind.r8
ldsfld float64 'U1'
stloc 232
ldsfld float64 'X'
ldloc 232
bne.un $L221
ldsfld float64 'Y'
ldloc 232
bne.un $L221
ldsfld float64 'U2'
stloc 233
ldsfld float64 'Z'
ldloc 233
bne.un $L221
ldsfld float64 'T'
ldloc 233
bne.un $L221
ldc.i4 1
stsfld int32 'GAddSub'
br $L222
$L221:
ldc.i4 0
stloc 234
ldloc 234
stsfld int32 'GAddSub'
ldc.i4 1
ldloc 234
ldsflda valuetype 'int8[]' $_223
call int32 'TstCond'(int32,int32,void*)
pop
$L222:
ldsfld float64 'F9'
stloc 235
ldsfld float64 'One'
stloc 236
ldloc 235
ldloc 236
beq $L224
ldloc 235
ldloc 236
sub
ldsfld float64 'Zero'
blt $L224
ldc.i4 1
ldsflda valuetype 'int8[]' $_226
call int32 'BadCond'(int32,void*)
pop
ldsflda valuetype 'int8[]' $_227
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_228
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_229
call vararg int32 'printf'(void*)
pop
$L224:
ldc.i4 1
stloc 237
ldsfld int32 'GMult'
ldloc 237
bne.un $L230
ldsfld int32 'GDiv'
ldloc 237
bne.un $L230
ldsfld int32 'GAddSub'
ldloc 237
bne.un $L230
ldsflda valuetype 'int8[]' $_232
call vararg int32 'printf'(void*)
pop
$L230:
ldc.i4 40
stsfld int32 'Milestone'
call int32 'Pause'()
pop
ldsflda valuetype 'int8[]' $_234
call vararg int32 'printf'(void*)
pop
ldc.i4 0
stloc 238
ldloc 238
stsfld int32 'RMult'
ldloc 238
stsfld int32 'RDiv'
ldloc 238
stsfld int32 'RAddSub'
ldsfld float64 'Two'
stloc 239
ldsfld float64 'Radix'
ldloc 239
div
stsfld float64 'RadixD2'
ldloc 239
stsfld float64 'A1'
ldloc 238
stsfld int32 'Done'
$L235:
ldsfld float64 'Radix'
stsfld float64 'AInvrse'
$L238:
ldsflda float64 'AInvrse'
stloc 240
ldloc 240
ldind.r8
stloc 241
ldloc 241
stsfld float64 'X'
ldloc 240
ldloc 241
ldsfld float64 'A1'
div
stind.r8
$L239:
ldsfld float64 'AInvrse'
call float64 'floor'(float64)
stloc 242
ldloc 242
ldsfld float64 'AInvrse'
beq $L238
ldsfld float64 'X'
ldsfld float64 'One'
beq $L244
ldsfld float64 'A1'
ldsfld float64 'Three'
ble $L242
$L244:
ldc.i4 1
stloc 243
br $L243
$L242:
ldc.i4 0
stloc 243
$L243:
ldloc 243
stsfld int32 'Done'
ldsfld int32 'Done'
ldc.i4 0
bne.un $L245
ldsfld float64 'Nine'
ldsfld float64 'One'
add
stsfld float64 'A1'
$L245:
$L236:
ldsfld int32 'Done'
ldc.i4 0
beq $L235
ldsfld float64 'X'
ldsfld float64 'One'
bne.un $L247
ldsfld float64 'Radix'
stsfld float64 'A1'
$L247:
ldsflda float64 'AInvrse'
stloc 244
ldsfld float64 'A1'
stloc 245
ldloc 244
ldsfld float64 'One'
ldloc 245
div
stind.r8
ldloc 245
stsfld float64 'X'
ldloc 244
ldind.r8
stsfld float64 'Y'
ldc.i4 0
stsfld int32 'Done'
$L249:
ldsflda float64 'Z'
stloc 247
ldsfld float64 'Half'
stloc 248
ldloc 247
ldsfld float64 'X'
ldsfld float64 'Y'
mul
ldloc 248
sub
stind.r8
ldc.i4 0
ldloc 247
ldind.r8
ldloc 248
bne.un $L254
ldc.i4 1
stloc 246
br $L255
$L254:
ldc.i4 0
stloc 246
$L255:
ldloc 246
ldsflda valuetype 'int8[]' $_253
call int32 'TstCond'(int32,int32,void*)
pop
ldsfld float64 'X'
ldsfld float64 'Radix'
bne.un $L257
ldc.i4 1
stloc 249
br $L258
$L257:
ldc.i4 0
stloc 249
$L258:
ldloc 249
stsfld int32 'Done'
ldsflda float64 'X'
stloc 250
ldloc 250
ldsfld float64 'Radix'
stind.r8
ldsfld float64 'One'
ldloc 250
ldind.r8
div
stsfld float64 'Y'
$L250:
ldsfld int32 'Done'
ldc.i4 0
beq $L249
ldsflda float64 'Y2'
stloc 251
ldsfld float64 'One'
stloc 252
ldsfld float64 'U2'
stloc 253
ldloc 251
ldloc 252
ldloc 253
add
stind.r8
ldsflda float64 'Y1'
stloc 254
ldloc 254
ldloc 252
ldloc 253
sub
stind.r8
ldsflda float64 'X'
stloc 255
ldsfld float64 'OneAndHalf'
stloc 256
ldloc 255
ldloc 256
ldloc 253
sub
stind.r8
ldsflda float64 'Y'
stloc 257
ldloc 257
ldloc 256
ldloc 253
add
stind.r8
ldsflda float64 'Z'
stloc 258
ldloc 255
ldind.r8
stloc 259
ldloc 251
ldind.r8
stloc 260
ldloc 258
ldloc 259
ldloc 253
sub
ldloc 260
mul
stind.r8
ldsflda float64 'T'
stloc 261
ldloc 257
ldind.r8
stloc 262
ldloc 254
ldind.r8
stloc 263
ldloc 261
ldloc 262
ldloc 263
mul
stind.r8
ldloc 258
ldloc 258
ldind.r8
ldloc 259
sub
stind.r8
ldloc 261
ldloc 261
ldind.r8
ldloc 259
sub
stind.r8
ldloc 255
ldloc 259
ldloc 260
mul
stind.r8
ldloc 257
ldloc 262
ldloc 253
add
ldloc 263
mul
stind.r8
ldloc 255
ldloc 255
ldind.r8
ldloc 256
sub
stind.r8
ldloc 257
ldloc 257
ldind.r8
ldloc 256
sub
stind.r8
ldsfld float64 'Zero'
stloc 264
ldsfld float64 'X'
ldloc 264
bne.un $L259
ldsfld float64 'Y'
ldloc 264
bne.un $L259
ldsfld float64 'Z'
ldloc 264
bne.un $L259
ldsfld float64 'T'
ldloc 264
bgt $L259
ldsflda float64 'X'
stloc 265
ldsfld float64 'OneAndHalf'
stloc 266
ldsfld float64 'U2'
stloc 267
ldloc 266
ldloc 267
add
conv.r8
stloc 268
ldsfld float64 'Y2'
stloc 269
ldloc 265
ldloc 268
ldloc 269
mul
stind.r8
ldsflda float64 'Y'
stloc 270
ldloc 266
ldloc 267
sub
conv.r8
stloc 271
ldloc 270
ldloc 271
ldloc 267
sub
stind.r8
ldsflda float64 'Z'
stloc 272
ldloc 272
ldloc 268
ldloc 267
add
stind.r8
ldsflda float64 'T'
stloc 273
ldsflda float64 'Y1'
stloc 274
ldloc 274
ldind.r8
stloc 275
ldloc 273
ldloc 271
ldloc 275
mul
stind.r8
ldloc 272
ldind.r8
stloc 276
ldloc 276
ldloc 267
add
conv.r8
stloc 277
ldloc 265
ldloc 265
ldind.r8
ldloc 277
sub
stind.r8
ldsflda float64 'StickyBit'
stloc 278
ldloc 270
ldind.r8
stloc 279
ldloc 278
ldloc 279
ldloc 275
mul
stind.r8
ldsflda float64 'S'
stloc 280
ldloc 280
ldloc 276
ldloc 269
mul
stind.r8
ldloc 273
ldloc 273
ldind.r8
ldloc 279
sub
stind.r8
ldloc 270
ldloc 267
ldloc 279
sub
ldloc 278
ldind.r8
add
stind.r8
ldloc 272
ldloc 280
ldind.r8
ldloc 277
ldloc 267
add
sub
stind.r8
ldloc 278
ldloc 269
ldloc 267
add
ldloc 275
mul
stind.r8
ldloc 274
ldloc 269
ldloc 275
mul
stind.r8
ldloc 278
ldloc 278
ldind.r8
ldloc 269
sub
stind.r8
ldloc 274
ldloc 274
ldind.r8
ldsfld float64 'Half'
sub
stind.r8
ldsfld float64 'Zero'
stloc 281
ldsfld float64 'X'
ldloc 281
bne.un $L261
ldsfld float64 'Y'
ldloc 281
bne.un $L261
ldsfld float64 'Z'
ldloc 281
bne.un $L261
ldsfld float64 'T'
ldloc 281
bne.un $L261
ldsfld float64 'StickyBit'
ldloc 281
bne.un $L261
ldsfld float64 'Y1'
ldsfld float64 'Half'
bne.un $L261
ldc.i4 1
stsfld int32 'RMult'
ldsflda valuetype 'int8[]' $_263
call vararg int32 'printf'(void*)
pop
br $L262
$L261:
ldsfld float64 'U2'
stloc 282
ldsfld float64 'Zero'
stloc 283
ldsfld float64 'X'
ldloc 282
add
ldloc 283
bne.un $L264
ldsfld float64 'Y'
ldloc 283
bge $L264
ldsfld float64 'Z'
ldloc 282
add
ldloc 283
bne.un $L264
ldsfld float64 'T'
ldloc 283
bge $L264
ldsfld float64 'StickyBit'
ldloc 282
add
ldloc 283
bne.un $L264
ldsfld float64 'Y1'
ldsfld float64 'Half'
bge $L264
ldc.i4 2
stsfld int32 'RMult'
ldsflda valuetype 'int8[]' $_266
call vararg int32 'printf'(void*)
pop
br $L265
$L264:
ldsflda valuetype 'int8[]' $_267
call vararg int32 'printf'(void*)
pop
$L265:
$L262:
ldsfld int32 'RMult'
ldc.i4 1
bne.un $L260
ldsfld int32 'GMult'
ldc.i4 0
bne.un $L260
ldsflda valuetype 'int8[]' $_270
call int32 'notify'(void*)
pop
br $L260
$L259:
ldsflda valuetype 'int8[]' $_267
call vararg int32 'printf'(void*)
pop
$L260:
ldc.i4 45
stsfld int32 'Milestone'
ldsflda float64 'Y2'
stloc 284
ldsfld float64 'One'
stloc 285
ldsfld float64 'U2'
stloc 286
ldloc 284
ldloc 285
ldloc 286
add
stind.r8
ldsflda float64 'Y1'
stloc 287
ldloc 287
ldloc 285
ldloc 286
sub
stind.r8
ldsflda float64 'Z'
stloc 288
ldsfld float64 'OneAndHalf'
stloc 289
ldloc 289
ldloc 286
add
conv.r8
stloc 290
ldloc 288
ldloc 290
ldloc 286
add
stind.r8
ldsflda float64 'X'
stloc 291
ldloc 288
ldind.r8
stloc 292
ldloc 284
ldind.r8
stloc 293
ldloc 291
ldloc 292
ldloc 293
div
stind.r8
ldsflda float64 'T'
stloc 294
ldloc 294
ldloc 289
ldloc 286
sub
ldloc 286
sub
stind.r8
ldsflda float64 'Y'
stloc 295
ldloc 294
ldind.r8
stloc 296
ldloc 287
ldind.r8
stloc 297
ldloc 295
ldloc 296
ldloc 286
sub
ldloc 297
div
stind.r8
ldloc 288
ldloc 292
ldloc 286
add
ldloc 293
div
stind.r8
ldloc 291
ldloc 291
ldind.r8
ldloc 289
sub
stind.r8
ldloc 295
ldloc 295
ldind.r8
ldloc 296
sub
stind.r8
ldloc 294
ldloc 296
ldloc 297
div
stind.r8
ldloc 288
ldloc 288
ldind.r8
ldloc 290
sub
stind.r8
ldloc 294
ldloc 286
ldloc 289
sub
ldloc 294
ldind.r8
add
stind.r8
ldsfld float64 'Zero'
stloc 298
ldsfld float64 'X'
ldloc 298
bgt $L272
ldsfld float64 'Y'
ldloc 298
bgt $L272
ldsfld float64 'Z'
ldloc 298
bgt $L272
ldsfld float64 'T'
ldloc 298
bgt $L272
ldsflda float64 'X'
stloc 299
ldsfld float64 'OneAndHalf'
stloc 300
ldsflda float64 'Y2'
stloc 301
ldloc 301
ldind.r8
stloc 302
ldloc 299
ldloc 300
ldloc 302
div
stind.r8
ldsflda float64 'Y'
stloc 303
ldsfld float64 'U2'
stloc 304
ldloc 303
ldloc 300
ldloc 304
sub
stind.r8
ldsflda float64 'Z'
stloc 305
ldloc 305
ldloc 300
ldloc 304
add
stind.r8
ldloc 303
ldind.r8
stloc 306
ldloc 299
ldloc 299
ldind.r8
ldloc 306
sub
stind.r8
ldsflda float64 'T'
stloc 307
ldsflda float64 'Y1'
stloc 308
ldloc 308
ldind.r8
stloc 309
ldloc 307
ldloc 300
ldloc 309
div
stind.r8
ldloc 303
ldloc 306
ldloc 309
div
stind.r8
ldloc 305
ldind.r8
stloc 310
ldloc 307
ldloc 307
ldind.r8
ldloc 310
ldloc 304
add
sub
stind.r8
ldloc 303
ldloc 303
ldind.r8
ldloc 310
sub
stind.r8
ldloc 305
ldloc 310
ldloc 302
div
stind.r8
ldloc 308
ldloc 302
ldloc 304
add
ldloc 302
div
stind.r8
ldloc 305
ldloc 305
ldind.r8
ldloc 300
sub
stind.r8
ldloc 301
ldloc 308
ldind.r8
ldloc 302
sub
stind.r8
ldsfld float64 'F9'
stloc 311
ldloc 308
ldloc 311
ldsfld float64 'U1'
sub
ldloc 311
div
stind.r8
ldsfld float64 'Zero'
stloc 312
ldsfld float64 'X'
ldloc 312
bne.un $L274
ldsfld float64 'Y'
ldloc 312
bne.un $L274
ldsfld float64 'Z'
ldloc 312
bne.un $L274
ldsfld float64 'T'
ldloc 312
bne.un $L274
ldsfld float64 'Y2'
stloc 313
ldloc 313
ldloc 312
bne.un $L274
ldloc 313
ldloc 312
bne.un $L274
ldsfld float64 'Half'
stloc 314
ldsfld float64 'Y1'
ldloc 314
sub
ldsfld float64 'F9'
ldloc 314
sub
bne.un $L274
ldc.i4 1
stsfld int32 'RDiv'
ldsflda valuetype 'int8[]' $_276
call vararg int32 'printf'(void*)
pop
ldsfld int32 'GDiv'
ldc.i4 0
bne.un $L275
ldsflda valuetype 'int8[]' $_279
call int32 'notify'(void*)
pop
br $L275
$L274:
ldsfld float64 'Zero'
stloc 315
ldsfld float64 'X'
ldloc 315
bge $L280
ldsfld float64 'Y'
ldloc 315
bge $L280
ldsfld float64 'Z'
ldloc 315
bge $L280
ldsfld float64 'T'
ldloc 315
bge $L280
ldsfld float64 'Y2'
ldloc 315
bge $L280
ldsfld float64 'Half'
stloc 316
ldsfld float64 'Y1'
ldloc 316
sub
ldsfld float64 'F9'
ldloc 316
sub
bge $L280
ldc.i4 2
stsfld int32 'RDiv'
ldsflda valuetype 'int8[]' $_282
call vararg int32 'printf'(void*)
pop
$L280:
$L275:
$L272:
ldsfld int32 'RDiv'
ldc.i4 0
bne.un $L283
ldsflda valuetype 'int8[]' $_285
call vararg int32 'printf'(void*)
pop
$L283:
ldsflda float64 'BInvrse'
stloc 318
ldsfld float64 'Radix'
stloc 319
ldloc 318
ldsfld float64 'One'
ldloc 319
div
stind.r8
ldc.i4 0
ldsfld float64 'Half'
stloc 320
ldloc 318
ldind.r8
ldloc 319
mul
ldloc 320
sub
ldloc 320
bne.un $L288
ldc.i4 1
stloc 317
br $L289
$L288:
ldc.i4 0
stloc 317
$L289:
ldloc 317
ldsflda valuetype 'int8[]' $_287
call int32 'TstCond'(int32,int32,void*)
pop
ldc.i4 50
stsfld int32 'Milestone'
ldc.i4 0
ldsfld float64 'Half'
stloc 322
ldsfld float64 'F9'
ldsfld float64 'U1'
add
ldloc 322
sub
ldloc 322
bne.un $L293
ldsfld float64 'One'
stloc 323
ldsfld float64 'BMinusU2'
ldsfld float64 'U2'
add
ldloc 323
sub
ldsfld float64 'Radix'
ldloc 323
sub
bne.un $L293
ldc.i4 1
stloc 321
br $L294
$L293:
ldc.i4 0
stloc 321
$L294:
ldloc 321
ldsflda valuetype 'int8[]' $_292
call int32 'TstCond'(int32,int32,void*)
pop
ldsflda float64 'X'
stloc 324
ldsfld float64 'One'
stloc 325
ldsfld float64 'U1'
stloc 326
ldloc 324
ldloc 325
ldloc 326
ldloc 326
mul
sub
stind.r8
ldsflda float64 'Y'
stloc 327
ldsfld float64 'U2'
stloc 328
ldloc 327
ldloc 325
ldloc 328
ldloc 325
ldloc 328
sub
mul
add
stind.r8
ldsflda float64 'Z'
stloc 329
ldsfld float64 'Half'
stloc 330
ldloc 329
ldsfld float64 'F9'
ldloc 330
sub
stind.r8
ldloc 324
ldloc 324
ldind.r8
ldloc 330
sub
ldloc 329
ldind.r8
sub
stind.r8
ldloc 327
ldloc 327
ldind.r8
ldloc 325
sub
stind.r8
ldsfld float64 'Zero'
stloc 331
ldsfld float64 'X'
ldloc 331
bne.un $L295
ldsfld float64 'Y'
ldloc 331
bne.un $L295
ldc.i4 2
stsfld int32 'RAddSub'
ldsflda valuetype 'int8[]' $_297
call vararg int32 'printf'(void*)
pop
$L295:
ldsfld int32 'GAddSub'
ldc.i4 1
bne.un $L298
ldsflda float64 'X'
stloc 332
ldsfld float64 'Half'
stloc 333
ldsfld float64 'U2'
stloc 334
ldloc 332
ldloc 333
ldloc 334
add
ldloc 334
mul
stind.r8
ldsflda float64 'Y'
stloc 335
ldloc 335
ldloc 333
ldloc 334
sub
ldloc 334
mul
stind.r8
ldsfld float64 'One'
stloc 336
ldloc 332
ldloc 336
ldloc 332
ldind.r8
add
stind.r8
ldloc 335
ldloc 336
ldloc 335
ldind.r8
add
stind.r8
ldloc 332
ldloc 336
ldloc 334
add
ldloc 332
ldind.r8
sub
stind.r8
ldloc 335
ldloc 336
ldloc 335
ldind.r8
sub
stind.r8
ldsfld float64 'Zero'
stloc 337
ldsfld float64 'X'
ldloc 337
bne.un $L300
ldsfld float64 'Y'
ldloc 337
bne.un $L300
ldsflda float64 'X'
stloc 338
ldsfld float64 'Half'
stloc 339
ldsfld float64 'U2'
stloc 340
ldsfld float64 'U1'
stloc 341
ldloc 338
ldloc 339
ldloc 340
add
ldloc 341
mul
stind.r8
ldsflda float64 'Y'
stloc 342
ldloc 342
ldloc 339
ldloc 340
sub
ldloc 341
mul
stind.r8
ldsfld float64 'One'
stloc 343
ldloc 338
ldloc 343
ldloc 338
ldind.r8
sub
stind.r8
ldloc 342
ldloc 343
ldloc 342
ldind.r8
sub
stind.r8
ldloc 338
ldsfld float64 'F9'
ldloc 338
ldind.r8
sub
stind.r8
ldloc 342
ldloc 343
ldloc 342
ldind.r8
sub
stind.r8
ldsfld float64 'Zero'
stloc 344
ldsfld float64 'X'
ldloc 344
bne.un $L302
ldsfld float64 'Y'
ldloc 344
bne.un $L302
ldc.i4 1
stsfld int32 'RAddSub'
ldsflda valuetype 'int8[]' $_304
call vararg int32 'printf'(void*)
pop
ldsfld int32 'GAddSub'
ldc.i4 0
bne.un $L299
ldsflda valuetype 'int8[]' $_307
call int32 'notify'(void*)
pop
br $L299
$L302:
ldsflda valuetype 'int8[]' $_308
call vararg int32 'printf'(void*)
pop
br $L299
$L300:
ldsflda valuetype 'int8[]' $_308
call vararg int32 'printf'(void*)
pop
br $L299
$L298:
ldsflda valuetype 'int8[]' $_308
call vararg int32 'printf'(void*)
pop
$L299:
ldsfld float64 'One'
stloc 345
ldloc 345
stsfld float64 'S'
ldsflda float64 'X'
stloc 346
ldsfld float64 'Half'
stloc 347
ldloc 346
ldloc 345
ldloc 347
ldloc 345
ldloc 347
add
mul
add
stind.r8
ldsflda float64 'Y'
stloc 348
ldloc 348
ldloc 345
ldsfld float64 'U2'
add
ldloc 347
mul
stind.r8
ldsflda float64 'Z'
stloc 349
ldloc 346
ldind.r8
stloc 350
ldloc 348
ldind.r8
stloc 351
ldloc 349
ldloc 350
ldloc 351
sub
stind.r8
ldsflda float64 'T'
stloc 352
ldloc 352
ldloc 351
ldloc 350
sub
stind.r8
ldsflda float64 'StickyBit'
stloc 353
ldloc 353
ldloc 349
ldind.r8
ldloc 352
ldind.r8
add
stind.r8
ldloc 353
ldind.r8
ldsfld float64 'Zero'
beq $L309
ldsfld float64 'Zero'
stsfld float64 'S'
ldc.i4 3
ldsflda valuetype 'int8[]' $_311
call int32 'BadCond'(int32,void*)
pop
$L309:
ldsfld float64 'Zero'
stsfld float64 'StickyBit'
ldc.i4 1
stloc 354
ldsfld int32 'GMult'
ldloc 354
bne.un $L312
ldsfld int32 'GDiv'
ldloc 354
bne.un $L312
ldsfld int32 'GAddSub'
ldloc 354
bne.un $L312
ldsfld int32 'RMult'
ldloc 354
bne.un $L312
ldsfld int32 'RDiv'
ldloc 354
bne.un $L312
ldsfld int32 'RAddSub'
ldloc 354
bne.un $L312
ldsfld float64 'RadixD2'
call float64 'floor'(float64)
stloc 355
ldloc 355
ldsfld float64 'RadixD2'
bne.un $L312
ldsflda valuetype 'int8[]' $_314
call vararg int32 'printf'(void*)
pop
ldsflda float64 'X'
stloc 356
ldsfld float64 'Half'
stloc 357
ldsfld float64 'U2'
stloc 358
ldloc 356
ldloc 357
ldsfld float64 'U1'
add
ldloc 358
mul
stind.r8
ldsflda float64 'Y'
stloc 359
ldloc 359
ldloc 357
ldloc 358
mul
stind.r8
ldsfld float64 'One'
stloc 360
ldloc 360
ldloc 359
ldind.r8
add
stsfld float64 'Z'
ldloc 360
ldloc 356
ldind.r8
add
stsfld float64 'T'
ldsfld float64 'One'
stloc 361
ldsfld float64 'Z'
ldloc 361
sub
ldsfld float64 'Zero'
bgt $L315
ldsfld float64 'T'
ldloc 361
sub
ldsfld float64 'U2'
blt $L315
ldsflda float64 'Z'
stloc 362
ldsflda float64 'Y'
stloc 363
ldloc 362
ldsfld float64 'T'
ldloc 363
ldind.r8
add
stind.r8
ldloc 363
ldloc 362
ldind.r8
ldsfld float64 'X'
sub
stind.r8
ldsfld float64 'T'
stloc 364
ldsfld float64 'Z'
ldloc 364
sub
ldsfld float64 'U2'
blt $L317
ldsfld float64 'Y'
ldloc 364
sub
ldsfld float64 'Zero'
bne.un $L317
ldsflda float64 'X'
stloc 365
ldsfld float64 'Half'
stloc 366
ldsfld float64 'U1'
stloc 367
ldloc 365
ldloc 366
ldloc 367
add
ldloc 367
mul
stind.r8
ldsflda float64 'Y'
stloc 368
ldloc 368
ldloc 366
ldloc 367
mul
stind.r8
ldsfld float64 'One'
stloc 369
ldloc 369
ldloc 368
ldind.r8
sub
stsfld float64 'Z'
ldloc 369
ldloc 365
ldind.r8
sub
stsfld float64 'T'
ldsfld float64 'Zero'
stloc 370
ldsfld float64 'Z'
ldsfld float64 'One'
sub
ldloc 370
bne.un $L319
ldsfld float64 'T'
ldsfld float64 'F9'
sub
ldloc 370
bne.un $L319
ldsflda float64 'Z'
stloc 371
ldsfld float64 'U1'
stloc 372
ldloc 371
ldsfld float64 'Half'
ldloc 372
sub
ldloc 372
mul
stind.r8
ldsfld float64 'F9'
stloc 373
ldloc 373
ldloc 371
ldind.r8
sub
stsfld float64 'T'
ldloc 373
ldsfld float64 'Y'
sub
stsfld float64 'Q'
ldsfld float64 'F9'
stloc 374
ldsfld float64 'Zero'
stloc 375
ldsfld float64 'T'
ldloc 374
sub
ldloc 375
bne.un $L321
ldloc 374
ldsfld float64 'U1'
sub
ldsfld float64 'Q'
sub
ldloc 375
bne.un $L321
ldsflda float64 'Z'
stloc 376
ldsfld float64 'One'
stloc 377
ldsfld float64 'U2'
stloc 378
ldsfld float64 'OneAndHalf'
stloc 379
ldloc 376
ldloc 377
ldloc 378
add
ldloc 379
mul
stind.r8
ldloc 379
ldloc 378
add
ldloc 376
ldind.r8
sub
ldloc 378
add
stsfld float64 'T'
ldsflda float64 'X'
stloc 380
ldsfld float64 'Radix'
stloc 381
ldloc 380
ldloc 377
ldsfld float64 'Half'
ldloc 381
div
add
stind.r8
ldsflda float64 'Y'
stloc 382
ldloc 382
ldloc 377
ldloc 381
ldloc 378
mul
add
stind.r8
ldloc 376
ldloc 380
ldind.r8
ldloc 382
ldind.r8
mul
stind.r8
ldsfld float64 'Zero'
stloc 383
ldsfld float64 'T'
ldloc 383
bne.un $L323
ldsfld float64 'X'
ldsfld float64 'Radix'
ldsfld float64 'U2'
mul
add
ldsfld float64 'Z'
sub
ldloc 383
bne.un $L323
ldsfld float64 'Radix'
ldsfld float64 'Two'
beq $L325
ldsflda float64 'X'
stloc 384
ldsfld float64 'Two'
stloc 385
ldloc 384
ldloc 385
ldsfld float64 'U2'
add
stind.r8
ldsflda float64 'Y'
stloc 386
ldloc 386
ldloc 384
ldind.r8
ldloc 385
div
stind.r8
ldloc 386
ldind.r8
ldsfld float64 'One'
sub
ldsfld float64 'Zero'
bne.un $L326
ldsfld float64 'S'
stsfld float64 'StickyBit'
br $L326
$L325:
ldsfld float64 'S'
stsfld float64 'StickyBit'
$L326:
$L323:
$L321:
$L319:
$L317:
$L315:
$L312:
ldsfld float64 'StickyBit'
ldsfld float64 'One'
bne.un $L329
ldsflda valuetype 'int8[]' $_331
call vararg int32 'printf'(void*)
pop
br $L330
$L329:
ldsflda valuetype 'int8[]' $_332
call vararg int32 'printf'(void*)
pop
$L330:
ldc.i4 3
ldc.i4 0
stloc 388
ldsfld int32 'GMult'
ldloc 388
beq $L335
ldsfld int32 'GDiv'
ldloc 388
beq $L335
ldsfld int32 'GAddSub'
ldloc 388
beq $L335
ldsfld int32 'RMult'
ldloc 388
beq $L335
ldsfld int32 'RDiv'
ldloc 388
beq $L335
ldsfld int32 'RAddSub'
ldloc 388
beq $L335
ldc.i4 1
stloc 387
br $L336
$L335:
ldc.i4 0
stloc 387
$L336:
ldloc 387
ldsflda valuetype 'int8[]' $_334
call int32 'TstCond'(int32,int32,void*)
pop
ldc.i4 60
stsfld int32 'Milestone'
ldsflda valuetype 'int8[]' $_51
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_338
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_339
ldsfld int32 'NoTrials'
call vararg int32 'printf'(void*,...,int32)
pop
ldc.r8 3.000000e+000
call float64 'sqrt'(float64)
stloc 389
ldloc 389
stsfld float64 'Random9'
ldsfld float64 'Third'
stsfld float64 'Random1'
ldc.i4 1
stsfld int32 'I'
$L341:
call float64 'Random'()
stloc 390
ldloc 390
stsfld float64 'X'
call float64 'Random'()
stloc 391
ldloc 391
stsfld float64 'Y'
ldsflda float64 'Z9'
stloc 392
ldsfld float64 'Y'
stloc 393
ldsfld float64 'X'
stloc 394
ldloc 392
ldloc 393
ldloc 394
mul
stind.r8
ldsflda float64 'Z'
stloc 395
ldloc 395
ldloc 394
ldloc 393
mul
stind.r8
ldloc 392
ldloc 395
ldind.r8
ldloc 392
ldind.r8
sub
stind.r8
ldsflda int32 'I'
stloc 396
ldloc 396
ldloc 396
ldind.i4
ldc.i4 1
add
stind.i4
$L342:
ldsfld int32 'I'
ldsfld int32 'NoTrials'
bgt $L344
ldsfld float64 'Z9'
ldsfld float64 'Zero'
beq $L341
$L344:
ldsfld int32 'I'
ldsfld int32 'NoTrials'
bne.un $L345
ldsflda float64 'Random1'
stloc 397
ldsfld float64 'One'
stloc 398
ldloc 398
ldsfld float64 'Half'
ldsfld float64 'Three'
div
add
conv.r8
stloc 399
ldloc 397
ldloc 399
stind.r8
ldsflda float64 'Random2'
stloc 400
ldsfld float64 'U2'
ldsfld float64 'U1'
add
ldloc 398
add
conv.r8
stloc 401
ldloc 400
ldloc 401
stind.r8
ldloc 397
ldind.r8
stloc 402
ldloc 400
ldind.r8
stloc 403
ldloc 402
ldloc 403
mul
stsfld float64 'Z'
ldloc 403
ldloc 402
mul
stsfld float64 'Y'
ldloc 399
ldloc 401
mul
conv.r8
stloc 404
ldloc 404
ldloc 404
sub
stsfld float64 'Z9'
$L345:
ldsfld int32 'I'
ldsfld int32 'NoTrials'
beq $L347
ldsfld float64 'Z9'
ldsfld float64 'Zero'
beq $L347
ldc.i4 2
ldsflda valuetype 'int8[]' $_349
call int32 'BadCond'(int32,void*)
pop
br $L348
$L347:
ldsflda valuetype 'int8[]' $_350
ldsfld int32 'NoTrials'
call vararg int32 'printf'(void*,...,int32)
pop
$L348:
ldc.i4 70
stsfld int32 'Milestone'
ldsflda valuetype 'int8[]' $_352
call vararg int32 'printf'(void*)
pop
ldsfld float64 'Zero'
stloc 406
ldloc 406
call float64 'sqrt'(float64)
stloc 407
ldloc 406
ldloc 407
bne.un $L355
ldsfld float64 'Zero'
neg
conv.r8
stloc 408
ldloc 408
call float64 'sqrt'(float64)
stloc 409
ldloc 408
ldloc 409
bne.un $L355
ldsfld float64 'One'
stloc 410
ldloc 410
call float64 'sqrt'(float64)
stloc 411
ldloc 410
ldloc 411
bne.un $L355
ldc.i4 1
stloc 405
br $L356
$L355:
ldc.i4 0
stloc 405
$L356:
ldc.i4 0
ldloc 405
ldsflda valuetype 'int8[]' $_354
call int32 'TstCond'(int32,int32,void*)
pop
ldsfld float64 'Zero'
stloc 412
ldloc 412
stsfld float64 'MinSqEr'
ldloc 412
stsfld float64 'MaxSqEr'
ldloc 412
stsfld float64 'J'
ldsfld float64 'Radix'
stsfld float64 'X'
ldsfld float64 'U2'
stsfld float64 'OneUlp'
ldc.i4 1
call int32 'SqXMinX'(int32)
pop
ldsfld float64 'BInvrse'
stloc 413
ldloc 413
stsfld float64 'X'
ldloc 413
ldsfld float64 'U1'
mul
stsfld float64 'OneUlp'
ldc.i4 1
call int32 'SqXMinX'(int32)
pop
ldsfld float64 'U1'
stloc 414
ldloc 414
stsfld float64 'X'
ldloc 414
ldloc 414
mul
stsfld float64 'OneUlp'
ldc.i4 1
call int32 'SqXMinX'(int32)
pop
ldsfld float64 'J'
ldsfld float64 'Zero'
beq $L357
call int32 'Pause'()
pop
$L357:
ldsflda valuetype 'int8[]' $_359
ldsfld int32 'NoTrials'
call vararg int32 'printf'(void*,...,int32)
pop
ldsfld float64 'Zero'
stsfld float64 'J'
ldsfld float64 'Two'
stsfld float64 'X'
ldsfld float64 'Radix'
stloc 415
ldloc 415
stsfld float64 'Y'
ldloc 415
ldsfld float64 'One'
beq $L360
$L362:
ldsflda float64 'Y'
stloc 416
ldloc 416
ldind.r8
stloc 417
ldloc 417
stsfld float64 'X'
ldloc 416
ldsfld float64 'Radix'
ldloc 417
mul
stind.r8
$L363:
ldsfld float64 'Y'
ldsfld float64 'X'
sub
ldsfld int32 'NoTrials'
conv.r8
blt $L362
$L360:
ldsfld float64 'X'
ldsfld float64 'U2'
mul
stsfld float64 'OneUlp'
ldc.i4 1
stsfld int32 'I'
br $L366
$L365:
ldsflda float64 'X'
stloc 418
ldloc 418
ldloc 418
ldind.r8
ldsfld float64 'One'
add
stind.r8
ldc.i4 2
call int32 'SqXMinX'(int32)
pop
ldsfld float64 'J'
ldsfld float64 'Zero'
ble $L368
br $L367
$L368:
ldsflda int32 'I'
stloc 419
ldloc 419
ldloc 419
ldind.i4
ldc.i4 1
add
stind.i4
$L366:
ldsfld int32 'I'
ldsfld int32 'NoTrials'
ble $L365
$L367:
ldsflda valuetype 'int8[]' $_370
call vararg int32 'printf'(void*)
pop
ldc.i4 -1
stsfld int32 'I'
ldsfld float64 'BMinusU2'
stsfld float64 'X'
ldsfld float64 'Radix'
stloc 420
ldloc 420
stsfld float64 'Y'
ldloc 420
ldloc 420
ldsfld float64 'U2'
mul
add
stsfld float64 'Z'
ldc.i4 0
stloc 421
ldloc 421
stsfld int32 'NotMonot'
ldloc 421
stsfld int32 'Monot'
br $L373
$L372:
ldsflda int32 'I'
stloc 422
ldloc 422
ldloc 422
ldind.i4
ldc.i4 1
add
stind.i4
ldsflda float64 'X'
stloc 423
ldloc 423
ldind.r8
call float64 'sqrt'(float64)
stloc 424
ldloc 423
ldloc 424
stind.r8
ldsfld float64 'Y'
call float64 'sqrt'(float64)
stloc 425
ldloc 425
stsfld float64 'Q'
ldsflda float64 'Z'
stloc 426
ldloc 426
ldind.r8
call float64 'sqrt'(float64)
stloc 427
ldloc 426
ldloc 427
stind.r8
ldsfld float64 'Q'
stloc 428
ldsfld float64 'X'
ldloc 428
bgt $L377
ldloc 428
ldsfld float64 'Z'
ble $L375
$L377:
ldc.i4 1
stsfld int32 'NotMonot'
br $L376
$L375:
ldsflda float64 'Q'
stloc 429
ldloc 429
ldind.r8
ldsfld float64 'Half'
add
conv.r8
call float64 'floor'(float64)
stloc 430
ldloc 429
ldloc 430
stind.r8
ldsfld int32 'I'
ldc.i4 0
bgt $L380
ldsfld float64 'Q'
stloc 431
ldsfld float64 'Radix'
ldloc 431
ldloc 431
mul
bne.un $L378
$L380:
ldc.i4 1
stsfld int32 'Monot'
br $L379
$L378:
ldsfld int32 'I'
ldc.i4 0
ble $L381
ldsfld int32 'I'
ldc.i4 1
ble $L383
ldc.i4 1
stsfld int32 'Monot'
br $L382
$L383:
ldsflda float64 'Y'
stloc 432
ldloc 432
ldloc 432
ldind.r8
ldsfld float64 'BInvrse'
mul
stind.r8
ldloc 432
ldind.r8
stloc 433
ldsfld float64 'U1'
stloc 434
ldloc 433
ldloc 434
sub
stsfld float64 'X'
ldloc 433
ldloc 434
add
stsfld float64 'Z'
br $L382
$L381:
ldsflda float64 'Y'
stloc 435
ldloc 435
ldsfld float64 'Q'
stind.r8
ldloc 435
ldind.r8
stloc 436
ldsfld float64 'U2'
stloc 437
ldloc 436
ldloc 437
sub
stsfld float64 'X'
ldloc 436
ldloc 437
add
stsfld float64 'Z'
$L382:
$L379:
$L376:
$L373:
ldc.i4 0
stloc 438
ldsfld int32 'NotMonot'
ldloc 438
bne.un $L385
ldsfld int32 'Monot'
ldloc 438
beq $L372
$L385:
ldsfld int32 'Monot'
ldc.i4 0
beq $L386
ldsflda valuetype 'int8[]' $_388
call vararg int32 'printf'(void*)
pop
br $L387
$L386:
ldc.i4 2
ldsflda valuetype 'int8[]' $_169
call int32 'BadCond'(int32,void*)
pop
ldsflda valuetype 'int8[]' $_389
ldsfld float64 'Y'
call vararg int32 'printf'(void*,...,float64)
pop
$L387:
ldc.i4 80
stsfld int32 'Milestone'
ldsflda float64 'MinSqEr'
stloc 439
ldsfld float64 'Half'
stloc 440
ldloc 439
ldloc 439
ldind.r8
ldloc 440
add
stind.r8
ldsflda float64 'MaxSqEr'
stloc 441
ldloc 441
ldloc 441
ldind.r8
ldloc 440
sub
stind.r8
ldsfld float64 'One'
ldsfld float64 'U2'
add
conv.r8
call float64 'sqrt'(float64)
stloc 442
ldsfld float64 'One'
stloc 443
ldsfld float64 'U2'
stloc 444
ldloc 442
ldloc 443
sub
ldloc 444
div
stsfld float64 'Y'
ldsflda float64 'SqEr'
stloc 445
ldloc 445
ldsfld float64 'Y'
ldloc 443
sub
ldloc 444
ldsfld float64 'Eight'
div
add
stind.r8
ldloc 445
ldind.r8
ldsfld float64 'MaxSqEr'
ble $L391
ldsfld float64 'SqEr'
stsfld float64 'MaxSqEr'
$L391:
ldsflda float64 'SqEr'
stloc 446
ldloc 446
ldsfld float64 'Y'
ldsfld float64 'U2'
ldsfld float64 'Eight'
div
add
stind.r8
ldloc 446
ldind.r8
ldsfld float64 'MinSqEr'
bge $L393
ldsfld float64 'SqEr'
stsfld float64 'MinSqEr'
$L393:
ldsfld float64 'F9'
call float64 'sqrt'(float64)
stloc 447
ldsfld float64 'U2'
stloc 448
ldsfld float64 'U1'
stloc 449
ldloc 447
ldloc 448
sub
ldsfld float64 'One'
ldloc 448
sub
sub
ldloc 449
div
stsfld float64 'Y'
ldsflda float64 'SqEr'
stloc 450
ldloc 450
ldsfld float64 'Y'
ldloc 449
ldsfld float64 'Eight'
div
add
stind.r8
ldloc 450
ldind.r8
ldsfld float64 'MaxSqEr'
ble $L395
ldsfld float64 'SqEr'
stsfld float64 'MaxSqEr'
$L395:
ldsflda float64 'SqEr'
stloc 451
ldloc 451
ldsfld float64 'Y'
ldsfld float64 'One'
add
ldsfld float64 'U1'
ldsfld float64 'Eight'
div
add
stind.r8
ldloc 451
ldind.r8
ldsfld float64 'MinSqEr'
bge $L397
ldsfld float64 'SqEr'
stsfld float64 'MinSqEr'
$L397:
ldsflda float64 'OneUlp'
stloc 452
ldloc 452
ldsfld float64 'U2'
stind.r8
ldloc 452
ldind.r8
stsfld float64 'X'
ldc.i4 1
stsfld int32 'Indx'
$L399:
ldsfld float64 'X'
stloc 453
ldloc 453
ldsfld float64 'U1'
add
ldloc 453
add
ldsfld float64 'F9'
add
conv.r8
call float64 'sqrt'(float64)
stloc 454
ldloc 454
stsfld float64 'Y'
ldsflda float64 'Y'
stloc 455
ldsfld float64 'U2'
stloc 456
ldsfld float64 'X'
stloc 457
ldsfld float64 'OneUlp'
stloc 458
ldloc 455
ldloc 455
ldind.r8
ldloc 456
sub
ldsfld float64 'One'
ldloc 456
sub
ldloc 457
add
sub
ldloc 458
div
stind.r8
ldsflda float64 'Z'
stloc 459
ldsfld float64 'Half'
stloc 460
ldloc 459
ldsfld float64 'U1'
ldloc 457
sub
ldsfld float64 'F9'
add
ldloc 460
mul
ldloc 457
mul
ldloc 457
mul
ldloc 458
div
stind.r8
ldsflda float64 'SqEr'
stloc 461
ldloc 461
ldloc 455
ldind.r8
ldloc 460
add
ldloc 459
ldind.r8
add
stind.r8
ldloc 461
ldind.r8
ldsfld float64 'MinSqEr'
bge $L403
ldsfld float64 'SqEr'
stsfld float64 'MinSqEr'
$L403:
ldsflda float64 'SqEr'
stloc 462
ldloc 462
ldsfld float64 'Y'
ldsfld float64 'Half'
sub
ldsfld float64 'Z'
add
stind.r8
ldloc 462
ldind.r8
ldsfld float64 'MaxSqEr'
ble $L405
ldsfld float64 'SqEr'
stsfld float64 'MaxSqEr'
$L405:
ldsfld int32 'Indx'
stloc 463
ldloc 463
ldc.i4 1
beq $L409
ldloc 463
ldc.i4 3
bne.un $L407
$L409:
ldsflda float64 'X'
stloc 464
ldloc 464
ldind.r8
call float64 'Sign'(float64)
stloc 465
ldsfld float64 'OneUlp'
call float64 'sqrt'(float64)
stloc 466
ldsfld float64 'Eight'
ldsfld float64 'Nine'
ldloc 466
mul
div
conv.r8
call float64 'floor'(float64)
stloc 467
ldloc 464
ldsfld float64 'OneUlp'
ldloc 465
mul
ldloc 467
mul
stind.r8
br $L408
$L407:
ldsflda float64 'OneUlp'
stloc 468
ldloc 468
ldsfld float64 'U1'
stind.r8
ldloc 468
ldind.r8
neg
stsfld float64 'X'
$L408:
$L400:
ldsflda int32 'Indx'
stloc 469
ldloc 469
ldloc 469
ldind.i4
ldc.i4 1
add
stind.i4
ldsfld int32 'Indx'
ldc.i4 3
ble $L399
ldc.i4 85
stsfld int32 'Milestone'
ldc.i4 0
stloc 470
ldloc 470
stsfld int32 'SqRWrng'
ldloc 470
stsfld int32 'Anomaly'
ldloc 470
stsfld int32 'RSqrt'
ldsfld float64 'Radix'
ldsfld float64 'One'
beq $L411
ldsflda valuetype 'int8[]' $_413
call vararg int32 'printf'(void*)
pop
ldsfld float64 'Precision'
stloc 471
ldloc 471
call float64 'floor'(float64)
stloc 472
ldsfld float64 'Radix'
ldsfld float64 'One'
ldloc 471
add
ldloc 472
sub
conv.r8
call float64 'pow'(float64,float64)
stloc 473
ldsfld float64 'Half'
ldloc 473
add
conv.r8
call float64 'floor'(float64)
stloc 474
ldloc 474
stsfld float64 'D'
ldsfld float64 'D'
stloc 475
ldloc 475
ldsfld float64 'Radix'
div
stsfld float64 'X'
ldloc 475
ldsfld float64 'A1'
div
stsfld float64 'Y'
ldsfld float64 'X'
stloc 476
ldloc 476
call float64 'floor'(float64)
stloc 477
ldloc 476
ldloc 477
bne.un $L416
ldsfld float64 'Y'
stloc 478
ldloc 478
call float64 'floor'(float64)
stloc 479
ldloc 478
ldloc 479
beq $L414
$L416:
ldc.i4 1
stsfld int32 'Anomaly'
br $L415
$L414:
ldsflda float64 'X'
stloc 480
ldloc 480
ldsfld float64 'Zero'
stind.r8
ldloc 480
ldind.r8
stsfld float64 'Z2'
ldsflda float64 'Y'
stloc 481
ldsfld float64 'One'
stloc 482
ldloc 481
ldloc 482
stind.r8
ldloc 481
ldind.r8
stsfld float64 'Y2'
ldsfld float64 'Radix'
ldloc 482
sub
stsfld float64 'Z1'
ldsfld float64 'Four'
ldsfld float64 'D'
mul
stsfld float64 'FourD'
$L417:
ldsfld float64 'Y2'
ldsfld float64 'Z2'
ble $L420
ldsfld float64 'Radix'
stsfld float64 'Q'
ldsfld float64 'Y'
stsfld float64 'Y1'
$L422:
ldsfld float64 'Q'
stloc 483
ldsfld float64 'Half'
ldloc 483
ldsfld float64 'Y1'
div
sub
conv.r8
call float64 'floor'(float64)
stloc 484
ldloc 483
ldloc 484
ldsfld float64 'Y1'
mul
add
conv.r8
call float64 'fabs'(float64)
stloc 485
ldloc 485
stsfld float64 'X1'
ldsflda float64 'Y1'
stloc 486
ldloc 486
ldind.r8
stsfld float64 'Q'
ldloc 486
ldsfld float64 'X1'
stind.r8
$L423:
ldsfld float64 'X1'
ldsfld float64 'Zero'
bgt $L422
ldsfld float64 'Q'
ldsfld float64 'One'
bgt $L425
ldsfld float64 'Y2'
stsfld float64 'Z2'
ldsfld float64 'Y'
stsfld float64 'Z'
$L425:
$L420:
ldsflda float64 'Y'
stloc 487
ldloc 487
ldloc 487
ldind.r8
ldsfld float64 'Two'
add
stind.r8
ldsflda float64 'X'
stloc 488
ldloc 488
ldloc 488
ldind.r8
ldsfld float64 'Eight'
add
stind.r8
ldsflda float64 'Y2'
stloc 489
ldloc 489
ldloc 489
ldind.r8
ldloc 488
ldind.r8
add
stind.r8
ldloc 489
ldind.r8
ldsfld float64 'FourD'
blt $L427
ldsflda float64 'Y2'
stloc 490
ldloc 490
ldloc 490
ldind.r8
ldsfld float64 'FourD'
sub
stind.r8
$L427:
$L418:
ldsfld float64 'Y'
ldsfld float64 'D'
blt $L417
ldsflda float64 'X8'
stloc 491
ldsfld float64 'FourD'
stloc 492
ldloc 491
ldloc 492
ldsfld float64 'Z2'
sub
stind.r8
ldsflda float64 'Q'
stloc 493
ldloc 491
ldind.r8
stloc 494
ldsfld float64 'Z'
stloc 495
ldloc 493
ldloc 494
ldloc 495
ldloc 495
mul
add
ldloc 492
div
stind.r8
ldloc 491
ldloc 494
ldsfld float64 'Eight'
div
stind.r8
ldloc 493
ldind.r8
stloc 496
ldloc 496
call float64 'floor'(float64)
stloc 497
ldloc 496
ldloc 497
beq $L429
ldc.i4 1
stsfld int32 'Anomaly'
br $L430
$L429:
ldc.i4 0
stsfld int32 'Break'
$L431:
ldsflda float64 'X'
stloc 498
ldloc 498
ldsfld float64 'Z1'
ldsfld float64 'Z'
mul
stind.r8
ldloc 498
ldind.r8
stloc 499
ldloc 499
ldsfld float64 'Radix'
div
conv.r8
call float64 'floor'(float64)
stloc 500
ldloc 498
ldloc 499
ldloc 500
ldsfld float64 'Radix'
mul
sub
stind.r8
ldsfld float64 'X'
ldsfld float64 'One'
bne.un $L434
ldc.i4 1
stsfld int32 'Break'
br $L435
$L434:
ldsflda float64 'Z1'
stloc 501
ldloc 501
ldloc 501
ldind.r8
ldsfld float64 'One'
sub
stind.r8
$L435:
$L432:
ldsfld int32 'Break'
ldc.i4 0
bne.un $L436
ldsfld float64 'Z1'
ldsfld float64 'Zero'
bgt $L431
$L436:
ldsfld float64 'Z1'
ldsfld float64 'Zero'
bgt $L437
ldsfld int32 'Break'
ldc.i4 0
bne.un $L437
ldc.i4 1
stsfld int32 'Anomaly'
br $L438
$L437:
ldsfld float64 'Z1'
ldsfld float64 'RadixD2'
ble $L439
ldsflda float64 'Z1'
stloc 502
ldloc 502
ldloc 502
ldind.r8
ldsfld float64 'Radix'
sub
stind.r8
$L439:
$L441:
call int32 'NewD'()
pop
$L442:
ldsfld float64 'U2'
ldsfld float64 'D'
mul
ldsfld float64 'F9'
blt $L441
ldsfld float64 'D'
stloc 503
ldloc 503
ldsfld float64 'Radix'
mul
ldloc 503
sub
ldsfld float64 'W'
ldloc 503
sub
beq $L444
ldc.i4 1
stsfld int32 'Anomaly'
br $L445
$L444:
ldsfld float64 'D'
stloc 504
ldloc 504
stsfld float64 'Z2'
ldc.i4 0
stsfld int32 'I'
ldsfld float64 'Z'
stloc 505
ldloc 504
ldsfld float64 'One'
ldloc 505
add
ldsfld float64 'Half'
mul
add
stsfld float64 'Y'
ldloc 504
ldloc 505
add
ldsfld float64 'Q'
add
stsfld float64 'X'
call int32 'SR3750'()
pop
ldsfld float64 'D'
stloc 506
ldsfld float64 'Z'
stloc 507
ldloc 506
ldsfld float64 'One'
ldloc 507
sub
ldsfld float64 'Half'
mul
add
ldloc 506
add
stsfld float64 'Y'
ldsflda float64 'X'
stloc 508
ldloc 508
ldloc 506
ldloc 507
sub
ldloc 506
add
stind.r8
ldloc 508
ldind.r8
stloc 509
ldloc 508
ldloc 509
ldsfld float64 'Q'
add
ldloc 509
add
stind.r8
call int32 'SR3750'()
pop
call int32 'NewD'()
pop
ldsfld float64 'Z2'
stloc 510
ldsfld float64 'D'
ldloc 510
sub
ldsfld float64 'W'
ldloc 510
sub
beq $L446
ldc.i4 1
stsfld int32 'Anomaly'
br $L447
$L446:
ldsfld float64 'Z2'
stloc 511
ldsfld float64 'D'
ldloc 511
sub
conv.r8
stloc 512
ldsfld float64 'Z'
stloc 513
ldloc 512
ldloc 511
ldsfld float64 'One'
ldloc 513
sub
ldsfld float64 'Half'
mul
add
add
stsfld float64 'Y'
ldloc 512
ldloc 511
ldloc 513
sub
ldsfld float64 'Q'
add
add
stsfld float64 'X'
call int32 'SR3750'()
pop
ldsfld float64 'One'
ldsfld float64 'Z'
add
ldsfld float64 'Half'
mul
stsfld float64 'Y'
ldsfld float64 'Q'
stsfld float64 'X'
call int32 'SR3750'()
pop
ldsfld int32 'I'
ldc.i4 0
bne.un $L448
ldc.i4 1
stsfld int32 'Anomaly'
$L448:
$L447:
$L445:
$L438:
$L430:
$L415:
ldc.i4 0
stloc 514
ldsfld int32 'I'
ldloc 514
beq $L452
ldsfld int32 'Anomaly'
ldloc 514
beq $L450
$L452:
ldc.i4 0
ldsflda valuetype 'int8[]' $_453
call int32 'BadCond'(int32,void*)
pop
ldsflda valuetype 'int8[]' $_454
ldsfld float64 'W'
call vararg int32 'printf'(void*,...,float64)
pop
ldsflda valuetype 'int8[]' $_455
call vararg int32 'printf'(void*)
pop
ldc.i4 1
stsfld int32 'SqRWrng'
$L450:
$L411:
ldsfld int32 'Anomaly'
ldc.i4 0
bne.un $L456
ldsfld float64 'Zero'
stloc 515
ldsfld float64 'MinSqEr'
ldloc 515
blt $L458
ldsfld float64 'MaxSqEr'
ldloc 515
bgt $L458
ldc.i4 1
stsfld int32 'RSqrt'
ldsflda valuetype 'int8[]' $_460
call vararg int32 'printf'(void*)
pop
br $L459
$L458:
ldsfld float64 'U2'
stloc 516
ldsfld float64 'Half'
stloc 517
ldsfld float64 'MaxSqEr'
ldloc 516
add
ldloc 516
ldloc 517
sub
bgt $L464
ldsfld float64 'MinSqEr'
stloc 518
ldloc 518
ldloc 517
bgt $L464
ldloc 518
ldsfld float64 'Radix'
add
ldloc 517
bge $L461
$L464:
ldc.i4 1
stsfld int32 'SqRWrng'
br $L462
$L461:
ldc.i4 2
stsfld int32 'RSqrt'
ldsflda valuetype 'int8[]' $_465
call vararg int32 'printf'(void*)
pop
$L462:
$L459:
$L456:
ldsfld int32 'SqRWrng'
ldc.i4 0
beq $L466
ldsflda valuetype 'int8[]' $_468
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_469
ldsfld float64 'MinSqEr'
ldsfld float64 'Half'
sub
conv.r8
call vararg int32 'printf'(void*,...,float64)
pop
ldsflda valuetype 'int8[]' $_470
ldsfld float64 'Half'
ldsfld float64 'MaxSqEr'
add
conv.r8
call vararg int32 'printf'(void*,...,float64)
pop
ldc.i4 1
ldsfld float64 'Radix'
stloc 520
ldsfld float64 'MaxSqEr'
ldsfld float64 'MinSqEr'
sub
ldloc 520
ldloc 520
mul
bge $L473
ldc.i4 1
stloc 519
br $L474
$L473:
ldc.i4 0
stloc 519
$L474:
ldloc 519
ldsflda valuetype 'int8[]' $_472
call int32 'TstCond'(int32,int32,void*)
pop
$L466:
ldc.i4 90
stsfld int32 'Milestone'
call int32 'Pause'()
pop
ldsflda valuetype 'int8[]' $_476
call vararg int32 'printf'(void*)
pop
ldc.i4 0
stloc 521
ldloc 521
stsfld int32 'N'
ldloc 521
stsfld int32 'I'
ldsfld float64 'Zero'
neg
stsfld float64 'Z'
ldc.i4 3
stsfld int32 'M'
ldloc 521
stsfld int32 'Break'
$L477:
ldsfld float64 'One'
stsfld float64 'X'
call int32 'SR3980'()
pop
ldsfld int32 'I'
ldc.i4 10
bgt $L480
ldc.i4 1023
stsfld int32 'I'
call int32 'SR3980'()
pop
$L480:
ldsfld float64 'Z'
ldsfld float64 'MinusOne'
bne.un $L483
ldc.i4 1
stsfld int32 'Break'
br $L484
$L483:
ldsfld float64 'MinusOne'
stsfld float64 'Z'
call int32 'PrintIfNPositive'()
pop
ldc.i4 0
stsfld int32 'N'
ldc.i4 -4
stsfld int32 'I'
$L484:
$L478:
ldsfld int32 'Break'
ldc.i4 0
beq $L477
call int32 'PrintIfNPositive'()
pop
ldsflda int32 'N'
stloc 522
ldloc 522
ldind.i4
stsfld int32 'N1'
ldloc 522
ldc.i4 0
stind.i4
ldsfld float64 'A1'
stsfld float64 'Z'
ldsfld float64 'W'
call float64 'log'(float64)
stloc 523
ldsfld float64 'A1'
call float64 'log'(float64)
stloc 524
ldsfld float64 'Two'
ldloc 523
mul
ldloc 524
div
conv.r8
call float64 'floor'(float64)
stloc 525
ldloc 525
conv.i4
stsfld int32 'M'
ldc.i4 0
stsfld int32 'Break'
$L486:
ldsfld float64 'Z'
stsfld float64 'X'
ldc.i4 1
stsfld int32 'I'
call int32 'SR3980'()
pop
ldsfld float64 'Z'
ldsfld float64 'AInvrse'
bne.un $L489
ldc.i4 1
stsfld int32 'Break'
br $L490
$L489:
ldsfld float64 'AInvrse'
stsfld float64 'Z'
$L490:
$L487:
ldsfld int32 'Break'
ldc.i4 0
beq $L486
ldc.i4 100
stsfld int32 'Milestone'
ldsfld int32 'NoTrials'
stsfld int32 'M'
ldsfld float64 'Three'
stsfld float64 'Z'
$L492:
ldsfld float64 'Z'
stsfld float64 'X'
ldc.i4 1
stsfld int32 'I'
call int32 'SR3980'()
pop
$L495:
ldsflda float64 'Z'
stloc 526
ldloc 526
ldloc 526
ldind.r8
ldsfld float64 'Two'
add
stind.r8
$L496:
ldsfld float64 'Three'
stloc 527
ldsfld float64 'Z'
ldloc 527
div
conv.r8
call float64 'floor'(float64)
stloc 528
ldloc 527
ldloc 528
mul
ldsfld float64 'Z'
beq $L495
$L493:
ldsfld float64 'Z'
ldsfld float64 'Eight'
ldsfld float64 'Three'
mul
blt $L492
ldsfld int32 'N'
ldc.i4 0
ble $L498
ldsflda valuetype 'int8[]' $_500
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_501
call vararg int32 'printf'(void*)
pop
$L498:
call int32 'PrintIfNPositive'()
pop
ldsflda int32 'N'
stloc 529
ldloc 529
ldloc 529
ldind.i4
ldsfld int32 'N1'
add
stind.i4
ldloc 529
ldind.i4
ldc.i4 0
bne.un $L502
ldsflda valuetype 'int8[]' $_504
call vararg int32 'printf'(void*)
pop
$L502:
ldsfld int32 'N'
ldc.i4 0
ble $L505
call int32 'Pause'()
pop
br $L506
$L505:
ldsflda valuetype 'int8[]' $_51
call vararg int32 'printf'(void*)
pop
$L506:
ldc.i4 110
stsfld int32 'Milestone'
ldsflda valuetype 'int8[]' $_508
call vararg int32 'printf'(void*)
pop
ldsfld float64 'U1'
stsfld float64 'D'
ldsfld float64 'Precision'
stloc 530
ldloc 530
call float64 'floor'(float64)
stloc 531
ldloc 530
ldloc 531
beq $L509
ldsfld float64 'BInvrse'
stsfld float64 'D'
ldsfld float64 'Precision'
stsfld float64 'X'
$L511:
ldsflda float64 'D'
stloc 532
ldloc 532
ldloc 532
ldind.r8
ldsfld float64 'BInvrse'
mul
stind.r8
ldsflda float64 'X'
stloc 533
ldloc 533
ldloc 533
ldind.r8
ldsfld float64 'One'
sub
stind.r8
$L512:
ldsfld float64 'X'
ldsfld float64 'Zero'
bgt $L511
$L509:
ldsfld float64 'One'
stsfld float64 'Y'
ldsfld float64 'D'
stsfld float64 'Z'
$L514:
ldsflda float64 'Y'
stloc 534
ldloc 534
ldind.r8
stsfld float64 'C'
ldsflda float64 'Z'
stloc 535
ldloc 534
ldloc 535
ldind.r8
stind.r8
ldloc 534
ldind.r8
stloc 536
ldloc 535
ldloc 536
ldloc 536
mul
stind.r8
$L515:
ldsfld float64 'Z'
stloc 537
ldsfld float64 'Y'
ldloc 537
ble $L517
ldloc 537
ldloc 537
add
ldloc 537
bgt $L514
$L517:
ldsflda float64 'Y'
stloc 538
ldloc 538
ldsfld float64 'C'
stind.r8
ldloc 538
ldind.r8
ldsfld float64 'D'
mul
stsfld float64 'Z'
$L518:
ldsflda float64 'Y'
stloc 539
ldloc 539
ldind.r8
stsfld float64 'C'
ldsflda float64 'Z'
stloc 540
ldloc 539
ldloc 540
ldind.r8
stind.r8
ldloc 540
ldloc 539
ldind.r8
ldsfld float64 'D'
mul
stind.r8
$L519:
ldsfld float64 'Z'
stloc 541
ldsfld float64 'Y'
ldloc 541
ble $L521
ldloc 541
ldloc 541
add
ldloc 541
bgt $L518
$L521:
ldsfld float64 'Radix'
ldsfld float64 'Two'
bge $L522
ldsfld float64 'Two'
stsfld float64 'HInvrse'
br $L523
$L522:
ldsfld float64 'Radix'
stsfld float64 'HInvrse'
$L523:
ldsflda float64 'H'
stloc 542
ldsfld float64 'One'
stloc 543
ldloc 542
ldloc 543
ldsfld float64 'HInvrse'
div
stind.r8
ldsfld float64 'C'
stloc 544
ldloc 543
ldloc 544
div
stsfld float64 'CInvrse'
ldsflda float64 'E0'
stloc 545
ldloc 545
ldloc 544
stind.r8
ldloc 545
ldind.r8
ldloc 542
ldind.r8
mul
stsfld float64 'Z'
$L524:
ldsflda float64 'E0'
stloc 546
ldloc 546
ldind.r8
stsfld float64 'Y'
ldsflda float64 'Z'
stloc 547
ldloc 546
ldloc 547
ldind.r8
stind.r8
ldloc 547
ldloc 546
ldind.r8
ldsfld float64 'H'
mul
stind.r8
$L525:
ldsfld float64 'Z'
stloc 548
ldsfld float64 'E0'
ldloc 548
ble $L527
ldloc 548
ldloc 548
add
ldloc 548
bgt $L524
$L527:
ldsfld float64 'E0'
stsfld float64 'UfThold'
ldsfld float64 'Zero'
stloc 549
ldloc 549
stsfld float64 'E1'
ldloc 549
stsfld float64 'Q'
ldsflda float64 'E9'
stloc 550
ldloc 550
ldsfld float64 'U2'
stind.r8
ldsflda float64 'S'
stloc 551
ldloc 551
ldsfld float64 'One'
ldloc 550
ldind.r8
add
stind.r8
ldsflda float64 'D'
stloc 552
ldsfld float64 'C'
stloc 553
ldloc 552
ldloc 553
ldloc 551
ldind.r8
mul
stind.r8
ldloc 552
ldind.r8
ldloc 553
bgt $L528
ldsflda float64 'E9'
stloc 554
ldloc 554
ldsfld float64 'Radix'
ldsfld float64 'U2'
mul
stind.r8
ldsflda float64 'S'
stloc 555
ldloc 555
ldsfld float64 'One'
ldloc 554
ldind.r8
add
stind.r8
ldsflda float64 'D'
stloc 556
ldsfld float64 'C'
stloc 557
ldloc 556
ldloc 557
ldloc 555
ldind.r8
mul
stind.r8
ldloc 556
ldind.r8
ldloc 557
bgt $L529
ldc.i4 0
ldsflda valuetype 'int8[]' $_532
call int32 'BadCond'(int32,void*)
pop
ldsfld float64 'E0'
stsfld float64 'Underflow'
ldsfld float64 'Zero'
stsfld float64 'Y1'
ldsfld float64 'Z'
stsfld float64 'PseudoZero'
call int32 'Pause'()
pop
br $L529
$L528:
ldsflda float64 'Underflow'
stloc 558
ldloc 558
ldsfld float64 'D'
stind.r8
ldloc 558
ldind.r8
ldsfld float64 'H'
mul
stsfld float64 'PseudoZero'
ldsfld float64 'Zero'
stsfld float64 'UfThold'
$L533:
ldsflda float64 'Underflow'
stloc 559
ldloc 559
ldind.r8
stsfld float64 'Y1'
ldloc 559
ldsfld float64 'PseudoZero'
stind.r8
ldsfld float64 'E1'
stloc 560
ldloc 560
ldloc 560
add
ldloc 560
bgt $L536
ldsflda float64 'Y2'
stloc 561
ldloc 561
ldsfld float64 'Underflow'
ldsfld float64 'HInvrse'
mul
stind.r8
ldsfld float64 'Y1'
ldloc 561
ldind.r8
sub
conv.r8
call float64 'fabs'(float64)
stloc 562
ldloc 562
stsfld float64 'E1'
ldsfld float64 'Y1'
stsfld float64 'Q'
ldsfld float64 'UfThold'
ldsfld float64 'Zero'
bne.un $L538
ldsfld float64 'Y1'
ldsfld float64 'Y2'
beq $L538
ldsfld float64 'Y1'
stsfld float64 'UfThold'
$L538:
$L536:
ldsflda float64 'PseudoZero'
stloc 563
ldloc 563
ldloc 563
ldind.r8
ldsfld float64 'H'
mul
stind.r8
$L534:
ldsfld float64 'PseudoZero'
stloc 564
ldsfld float64 'Underflow'
ldloc 564
ble $L540
ldloc 564
ldloc 564
add
ldloc 564
bgt $L533
$L540:
$L529:
ldsfld float64 'PseudoZero'
ldsfld float64 'Zero'
beq $L541
ldsflda valuetype 'int8[]' $_51
call vararg int32 'printf'(void*)
pop
ldsfld float64 'PseudoZero'
stloc 565
ldloc 565
stsfld float64 'Z'
ldloc 565
ldsfld float64 'Zero'
bgt $L543
ldc.i4 0
ldsflda valuetype 'int8[]' $_545
call int32 'BadCond'(int32,void*)
pop
ldsflda valuetype 'int8[]' $_546
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_547
ldsfld float64 'PseudoZero'
call vararg int32 'printf'(void*,...,float64)
pop
ldsflda float64 'X'
stloc 566
ldloc 566
ldsfld float64 'PseudoZero'
neg
stind.r8
ldloc 566
ldind.r8
ldsfld float64 'Zero'
bgt $L544
ldsflda valuetype 'int8[]' $_550
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_551
ldsfld float64 'X'
call vararg int32 'printf'(void*,...,float64)
pop
br $L544
$L543:
ldc.i4 3
ldsflda valuetype 'int8[]' $_552
call int32 'BadCond'(int32,void*)
pop
ldsflda valuetype 'int8[]' $_553
ldsfld float64 'PseudoZero'
call vararg int32 'printf'(void*,...,float64)
pop
$L544:
call int32 'TstPtUf'()
pop
$L541:
ldc.i4 120
stsfld int32 'Milestone'
ldsfld float64 'CInvrse'
stloc 567
ldloc 567
ldsfld float64 'Y'
mul
ldloc 567
ldsfld float64 'Y1'
mul
ble $L555
ldsflda float64 'S'
stloc 568
ldloc 568
ldsfld float64 'H'
ldloc 568
ldind.r8
mul
stind.r8
ldsfld float64 'Underflow'
stsfld float64 'E0'
$L555:
ldsfld float64 'E1'
stloc 569
ldloc 569
ldsfld float64 'Zero'
beq $L557
ldloc 569
ldsfld float64 'E0'
beq $L557
ldc.i4 2
ldsflda valuetype 'int8[]' $_169
call int32 'BadCond'(int32,void*)
pop
ldsfld float64 'E1'
ldsfld float64 'E0'
bge $L559
ldsflda valuetype 'int8[]' $_561
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_562
call vararg int32 'printf'(void*)
pop
ldsfld float64 'PseudoZero'
ldsfld float64 'Zero'
bne.un $L560
ldsfld float64 'E1'
stsfld float64 'E0'
br $L560
$L559:
ldsflda valuetype 'int8[]' $_565
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_566
call vararg int32 'printf'(void*)
pop
$L560:
$L557:
ldsflda valuetype 'int8[]' $_567
ldsfld float64 'E0'
call vararg int32 'printf'(void*,...,float64)
pop
ldsfld float64 'E0'
stsfld float64 'Z'
call int32 'TstPtUf'()
pop
ldsfld float64 'E0'
stsfld float64 'Underflow'
ldsfld int32 'N'
ldc.i4 1
bne.un $L568
ldsfld float64 'Y'
stsfld float64 'Underflow'
$L568:
ldc.i4 4
stsfld int32 'I'
ldsfld float64 'E1'
ldsfld float64 'Zero'
bne.un $L570
ldc.i4 3
stsfld int32 'I'
$L570:
ldsfld float64 'UfThold'
ldsfld float64 'Zero'
bne.un $L572
ldsflda int32 'I'
stloc 570
ldloc 570
ldloc 570
ldind.i4
ldc.i4 2
sub
stind.i4
$L572:
ldc.i4 1
stsfld int32 'UfNGrad'
ldsfld int32 'I'
stloc 571
ldc.i4 2
stloc 572
ldloc 571
ldloc 572
beq $L583
ldloc 571
ldloc 572
bgt $L598
$L597:
ldsfld int32 'I'
ldc.i4 1
beq $L576
br $L574
$L598:
ldsfld int32 'I'
stloc 573
ldc.i4 3
stloc 574
ldloc 573
ldloc 574
beq $L588
ldloc 573
ldloc 574
blt $L574
$L599:
ldsfld int32 'I'
ldc.i4 4
beq $L589
br $L574
$L576:
ldsfld float64 'Underflow'
stsfld float64 'UfThold'
ldsfld float64 'CInvrse'
stloc 575
ldloc 575
ldsfld float64 'Q'
mul
ldloc 575
ldsfld float64 'Y'
mul
ldsfld float64 'S'
mul
beq $L577
ldsfld float64 'Y'
stsfld float64 'UfThold'
ldc.i4 0
ldsflda valuetype 'int8[]' $_579
call int32 'BadCond'(int32,void*)
pop
ldsflda valuetype 'int8[]' $_580
ldsfld float64 'UfThold'
call vararg int32 'printf'(void*,...,float64)
pop
ldsflda valuetype 'int8[]' $_581
ldsfld float64 'C'
call vararg int32 'printf'(void*,...,float64)
pop
ldsflda valuetype 'int8[]' $_582
call vararg int32 'printf'(void*)
pop
$L577:
call int32 'Pause'()
pop
br $L575
$L583:
ldc.i4 0
ldsflda valuetype 'int8[]' $_584
call int32 'BadCond'(int32,void*)
pop
ldsflda valuetype 'int8[]' $_585
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_586
ldsfld float64 'Q'
ldsfld float64 'Y2'
call vararg int32 'printf'(void*,...,float64,float64)
pop
ldsfld float64 'Q'
ldsfld float64 'Y2'
sub
conv.r8
call float64 'fabs'(float64)
stloc 576
ldsflda valuetype 'int8[]' $_587
ldloc 576
call vararg int32 'printf'(void*,...,float64)
pop
ldsfld float64 'Q'
stsfld float64 'UfThold'
br $L575
$L588:
ldsflda float64 'X'
stloc 577
ldloc 577
ldloc 577
ldind.r8
stind.r8
br $L575
$L589:
ldsfld float64 'UfThold'
stloc 578
ldsfld float64 'Q'
ldloc 578
bne.un $L590
ldsfld float64 'E1'
stloc 579
ldloc 579
ldsfld float64 'E0'
bne.un $L590
ldloc 578
ldloc 579
ldsfld float64 'E9'
div
sub
conv.r8
call float64 'fabs'(float64)
stloc 580
ldloc 580
ldsfld float64 'E1'
bgt $L590
ldc.i4 0
stsfld int32 'UfNGrad'
ldsflda valuetype 'int8[]' $_592
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_593
call vararg int32 'printf'(void*)
pop
ldsflda float64 'Y'
stloc 582
ldsfld float64 'E0'
stloc 583
ldsfld float64 'CInvrse'
stloc 584
ldloc 582
ldloc 583
ldloc 584
mul
stind.r8
ldsfld float64 'U2'
stloc 585
ldloc 582
ldloc 582
ldind.r8
ldsfld float64 'OneAndHalf'
ldloc 585
add
mul
stind.r8
ldsflda float64 'X'
stloc 586
ldloc 586
ldloc 584
ldsfld float64 'One'
ldloc 585
add
mul
stind.r8
ldloc 582
ldloc 582
ldind.r8
ldloc 586
ldind.r8
div
stind.r8
ldloc 582
ldind.r8
ldloc 583
bne.un $L595
ldc.i4 1
stloc 581
br $L596
$L595:
ldc.i4 0
stloc 581
$L596:
ldloc 581
stsfld int32 'IEEE'
$L590:
$L574:
$L575:
ldsfld int32 'UfNGrad'
ldc.i4 0
beq $L600
ldsflda valuetype 'int8[]' $_51
call vararg int32 'printf'(void*)
pop
ldftn void 'sigfpe'(int32)
stsfld method void *() 'sigsave'
ldsflda valuetype 'int32[]' 'ovfl_buf'
call int32 '_setjmp'(void*)
stloc 587
ldloc 587
ldc.i4 0
beq $L602
ldsflda valuetype 'int8[]' $_604
call vararg int32 'printf'(void*)
pop
ldsfld float64 'H'
stloc 588
ldloc 588
ldloc 588
add
stsfld float64 'R'
br $L603
$L602:
ldsfld float64 'Underflow'
ldsfld float64 'UfThold'
div
conv.r8
call float64 'sqrt'(float64)
stloc 589
ldloc 589
stsfld float64 'R'
$L603:
ldc.i4 0
stsfld method void *() 'sigsave'
ldsfld float64 'R'
ldsfld float64 'H'
bgt $L605
ldsflda float64 'Z'
stloc 590
ldsfld float64 'R'
stloc 591
ldloc 590
ldloc 591
ldsfld float64 'UfThold'
mul
stind.r8
ldsfld float64 'One'
stloc 592
ldsfld float64 'H'
stloc 593
ldloc 590
ldind.r8
ldloc 592
ldloc 591
ldloc 593
mul
ldloc 592
ldloc 593
add
mul
add
mul
stsfld float64 'X'
br $L606
$L605:
ldsflda float64 'Z'
stloc 594
ldloc 594
ldsfld float64 'UfThold'
stind.r8
ldsfld float64 'One'
stloc 595
ldsfld float64 'H'
stloc 596
ldloc 594
ldind.r8
ldloc 595
ldloc 596
ldloc 596
mul
ldloc 595
ldloc 596
add
mul
add
mul
stsfld float64 'X'
$L606:
ldsfld float64 'X'
stloc 597
ldsfld float64 'Z'
stloc 598
ldloc 597
ldloc 598
beq $L607
ldloc 597
ldloc 598
sub
ldsfld float64 'Zero'
bne.un $L607
ldc.i4 3
ldsflda valuetype 'int8[]' $_169
call int32 'BadCond'(int32,void*)
pop
ldsflda valuetype 'int8[]' $_609
ldsfld float64 'X'
ldsfld float64 'Z'
call vararg int32 'printf'(void*,...,float64,float64)
pop
ldsflda float64 'Z9'
stloc 599
ldloc 599
ldsfld float64 'X'
ldsfld float64 'Z'
sub
stind.r8
ldsflda valuetype 'int8[]' $_610
ldloc 599
ldind.r8
call vararg int32 'printf'(void*,...,float64)
pop
ldsflda valuetype 'int8[]' $_611
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_612
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_613
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_614
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_615
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_616
call vararg int32 'printf'(void*)
pop
ldftn void 'sigfpe'(int32)
stsfld method void *() 'sigsave'
ldsflda valuetype 'int32[]' 'ovfl_buf'
call int32 '_setjmp'(void*)
stloc 600
ldloc 600
ldc.i4 0
beq $L617
ldsflda valuetype 'int8[]' $_619
call vararg int32 'printf'(void*)
pop
br $L618
$L617:
ldsflda valuetype 'int8[]' $_620
ldsfld float64 'Half'
stloc 601
ldsfld float64 'X'
ldsfld float64 'Z'
div
ldloc 601
sub
ldloc 601
sub
conv.r8
call vararg int32 'printf'(void*,...,float64)
pop
$L618:
ldc.i4 0
stsfld method void *() 'sigsave'
$L607:
$L600:
ldsflda valuetype 'int8[]' $_621
ldsfld float64 'UfThold'
ldsflda valuetype 'int8[]' $_622
call vararg int32 'printf'(void*,...,float64,void*)
pop
ldsflda valuetype 'int8[]' $_623
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_624
call vararg int32 'printf'(void*)
pop
ldsflda float64 'Y2'
stloc 602
ldsfld float64 'U1'
stloc 603
ldloc 602
ldloc 603
ldloc 603
mul
stind.r8
ldsflda float64 'Y'
stloc 604
ldloc 602
ldind.r8
stloc 605
ldloc 604
ldloc 605
ldloc 605
mul
stind.r8
ldloc 602
ldloc 604
ldind.r8
ldloc 603
mul
stind.r8
ldloc 602
ldind.r8
ldsfld float64 'UfThold'
bgt $L625
ldsfld float64 'Y'
ldsfld float64 'E0'
ble $L627
ldc.i4 2
ldsflda valuetype 'int8[]' $_169
call int32 'BadCond'(int32,void*)
pop
ldc.i4 5
stsfld int32 'I'
br $L628
$L627:
ldc.i4 1
ldsflda valuetype 'int8[]' $_169
call int32 'BadCond'(int32,void*)
pop
ldc.i4 4
stsfld int32 'I'
$L628:
ldsflda valuetype 'int8[]' $_630
ldsfld int32 'I'
call vararg int32 'printf'(void*,...,int32)
pop
$L625:
ldc.i4 130
stsfld int32 'Milestone'
ldsfld float64 'UfThold'
call float64 'log'(float64)
stloc 606
ldsfld float64 'HInvrse'
call float64 'log'(float64)
stloc 607
ldsfld float64 'Half'
ldsfld float64 'TwoForty'
ldloc 606
mul
ldloc 607
div
sub
conv.r8
call float64 'floor'(float64)
stloc 608
ldloc 608
neg
ldsfld float64 'TwoForty'
div
stsfld float64 'Y'
ldsfld float64 'Y'
stloc 609
ldloc 609
ldloc 609
add
stsfld float64 'Y2'
ldsflda valuetype 'int8[]' $_632
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_633
ldsfld float64 'HInvrse'
ldsfld float64 'Y'
call vararg int32 'printf'(void*,...,float64,float64)
pop
ldsflda valuetype 'int8[]' $_634
ldsfld float64 'HInvrse'
ldsfld float64 'Y'
call vararg int32 'printf'(void*,...,float64,float64)
pop
ldsfld float64 'HInvrse'
ldsfld float64 'Y2'
call float64 'pow'(float64,float64)
stloc 610
ldloc 610
stsfld float64 'V9'
ldsflda valuetype 'int8[]' $_635
ldsfld float64 'V9'
call vararg int32 'printf'(void*,...,float64)
pop
ldsfld float64 'V9'
stloc 611
ldloc 611
ldsfld float64 'Zero'
blt $L638
ldsfld float64 'Radix'
stloc 612
ldloc 611
ldloc 612
ldloc 612
add
ldsfld float64 'E9'
add
ldsfld float64 'UfThold'
mul
ble $L636
$L638:
ldc.i4 1
ldsflda valuetype 'int8[]' $_639
call int32 'BadCond'(int32,void*)
pop
ldsflda valuetype 'int8[]' $_640
ldsfld float64 'UfThold'
call vararg int32 'printf'(void*,...,float64)
pop
br $L637
$L636:
ldsfld float64 'V9'
ldsfld float64 'UfThold'
ldsfld float64 'One'
ldsfld float64 'E9'
add
mul
bgt $L641
ldsflda valuetype 'int8[]' $_643
call vararg int32 'printf'(void*)
pop
br $L642
$L641:
ldc.i4 2
ldsflda valuetype 'int8[]' $_639
call int32 'BadCond'(int32,void*)
pop
ldsflda valuetype 'int8[]' $_640
ldsfld float64 'UfThold'
call vararg int32 'printf'(void*,...,float64)
pop
$L642:
$L637:
ldc.i4 140
stsfld int32 'Milestone'
ldsflda valuetype 'int8[]' $_51
call vararg int32 'printf'(void*)
pop
ldsfld float64 'Zero'
stloc 613
ldloc 613
stsfld float64 'X'
ldc.i4 2
stsfld int32 'I'
ldsfld float64 'Two'
ldsfld float64 'Three'
mul
stsfld float64 'Y'
ldloc 613
stsfld float64 'Q'
ldc.i4 0
stsfld int32 'N'
$L645:
ldsflda float64 'Z'
stloc 614
ldsflda float64 'X'
stloc 615
ldloc 614
ldloc 615
ldind.r8
stind.r8
ldsflda int32 'I'
stloc 616
ldloc 616
ldloc 616
ldind.i4
ldc.i4 1
add
stind.i4
ldsflda float64 'Y'
stloc 617
ldloc 616
ldind.i4
stloc 618
ldloc 617
ldloc 617
ldind.r8
ldloc 618
ldloc 618
add
conv.r8
div
stind.r8
ldsflda float64 'R'
stloc 619
ldsflda float64 'Q'
stloc 620
ldloc 619
ldloc 617
ldind.r8
ldloc 620
ldind.r8
add
stind.r8
ldloc 614
ldind.r8
stloc 621
ldloc 619
ldind.r8
stloc 622
ldloc 615
ldloc 621
ldloc 622
add
stind.r8
ldloc 620
ldloc 621
ldloc 615
ldind.r8
sub
ldloc 622
add
stind.r8
$L646:
ldsfld float64 'X'
ldsfld float64 'Z'
bgt $L645
ldsflda float64 'Z'
stloc 623
ldsfld float64 'OneAndHalf'
stloc 624
ldsflda float64 'X'
stloc 625
ldloc 623
ldloc 624
ldsfld float64 'One'
ldsfld float64 'Eight'
div
add
ldloc 625
ldind.r8
ldloc 624
ldsfld float64 'ThirtyTwo'
mul
div
add
stind.r8
ldloc 623
ldind.r8
stloc 626
ldloc 625
ldloc 626
ldloc 626
mul
stind.r8
ldsflda float64 'Exp2'
stloc 627
ldloc 625
ldind.r8
stloc 628
ldloc 627
ldloc 628
ldloc 628
mul
stind.r8
ldloc 625
ldsfld float64 'F9'
stind.r8
ldloc 625
ldind.r8
ldsfld float64 'U1'
sub
stsfld float64 'Y'
ldsflda valuetype 'int8[]' $_648
ldloc 627
ldind.r8
call vararg int32 'printf'(void*,...,float64)
pop
ldc.i4 1
stsfld int32 'I'
$L649:
ldsflda float64 'Z'
stloc 629
ldsfld float64 'X'
stloc 630
ldsfld float64 'BInvrse'
stloc 631
ldloc 629
ldloc 630
ldloc 631
sub
stind.r8
ldsfld float64 'One'
stloc 632
ldloc 629
ldloc 630
ldloc 632
add
ldloc 629
ldind.r8
ldloc 632
ldloc 631
sub
sub
div
stind.r8
ldloc 630
ldloc 629
ldind.r8
call float64 'pow'(float64,float64)
stloc 633
ldloc 633
ldsfld float64 'Exp2'
sub
stsfld float64 'Q'
ldsfld float64 'Q'
call float64 'fabs'(float64)
stloc 634
ldloc 634
ldsfld float64 'TwoForty'
ldsfld float64 'U2'
mul
ble $L653
ldc.i4 1
stsfld int32 'N'
ldsfld float64 'BInvrse'
stloc 635
ldsfld float64 'X'
ldloc 635
sub
ldsfld float64 'One'
ldloc 635
sub
sub
stsfld float64 'V9'
ldc.i4 2
ldsflda valuetype 'int8[]' $_655
call int32 'BadCond'(int32,void*)
pop
ldsfld float64 'X'
ldsfld float64 'Z'
call float64 'pow'(float64,float64)
stloc 636
ldsflda valuetype 'int8[]' $_656
ldloc 636
call vararg int32 'printf'(void*,...,float64)
pop
ldsflda valuetype 'int8[]' $_657
ldsfld float64 'V9'
ldsfld float64 'Z'
call vararg int32 'printf'(void*,...,float64,float64)
pop
ldsflda valuetype 'int8[]' $_658
ldsfld float64 'Q'
call vararg int32 'printf'(void*,...,float64)
pop
ldsflda valuetype 'int8[]' $_659
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_660
call vararg int32 'printf'(void*)
pop
br $L651
$L653:
ldsflda float64 'Z'
stloc 637
ldsflda float64 'Y'
stloc 638
ldloc 638
ldind.r8
stloc 639
ldsflda float64 'X'
stloc 640
ldloc 637
ldloc 639
ldloc 640
ldind.r8
sub
ldsfld float64 'Two'
mul
ldloc 639
add
stind.r8
ldloc 640
ldloc 639
stind.r8
ldloc 638
ldloc 637
ldind.r8
stind.r8
ldloc 640
ldind.r8
ldsfld float64 'F9'
sub
conv.r8
stloc 641
ldloc 637
ldsfld float64 'One'
ldloc 641
ldloc 641
mul
add
stind.r8
ldsfld float64 'Z'
ldsfld float64 'One'
ble $L661
ldsfld int32 'I'
ldsfld int32 'NoTrials'
bge $L661
ldsflda int32 'I'
stloc 642
ldloc 642
ldloc 642
ldind.i4
ldc.i4 1
add
stind.i4
br $L649
$L661:
ldsfld float64 'X'
ldsfld float64 'One'
ble $L663
ldsfld int32 'N'
ldc.i4 0
bne.un $L651
ldsflda valuetype 'int8[]' $_667
call vararg int32 'printf'(void*)
pop
br $L651
$L663:
ldsflda float64 'X'
stloc 643
ldsfld float64 'U2'
stloc 644
ldloc 643
ldsfld float64 'One'
ldloc 644
add
stind.r8
ldsflda float64 'Y'
stloc 645
ldloc 645
ldloc 644
ldloc 644
add
stind.r8
ldloc 645
ldloc 645
ldind.r8
ldloc 643
ldind.r8
add
stind.r8
ldc.i4 1
stsfld int32 'I'
br $L649
$L651:
ldc.i4 150
stsfld int32 'Milestone'
ldsflda valuetype 'int8[]' $_669
call vararg int32 'printf'(void*)
pop
ldc.i4 0
stsfld int32 'N'
ldsfld float64 'A1'
stsfld float64 'Z'
ldsfld float64 'C'
call float64 'log'(float64)
stloc 646
ldsfld float64 'A1'
call float64 'log'(float64)
stloc 647
ldsfld float64 'Half'
ldloc 646
ldloc 647
div
sub
conv.r8
call float64 'floor'(float64)
stloc 648
ldloc 648
stsfld float64 'Q'
ldc.i4 0
stsfld int32 'Break'
$L670:
ldsfld float64 'CInvrse'
stsfld float64 'X'
ldsfld float64 'Z'
ldsfld float64 'Q'
call float64 'pow'(float64,float64)
stloc 649
ldloc 649
stsfld float64 'Y'
call int32 'IsYeqX'()
pop
ldsflda float64 'Q'
stloc 650
ldloc 650
ldloc 650
ldind.r8
neg
stind.r8
ldsfld float64 'C'
stsfld float64 'X'
ldsfld float64 'Z'
ldloc 650
ldind.r8
call float64 'pow'(float64,float64)
stloc 651
ldloc 651
stsfld float64 'Y'
call int32 'IsYeqX'()
pop
ldsfld float64 'Z'
ldsfld float64 'One'
bge $L673
ldc.i4 1
stsfld int32 'Break'
br $L674
$L673:
ldsfld float64 'AInvrse'
stsfld float64 'Z'
$L674:
$L671:
ldsfld int32 'Break'
ldc.i4 0
beq $L670
call int32 'PrintIfNPositive'()
pop
ldsfld int32 'N'
ldc.i4 0
bne.un $L675
ldsflda valuetype 'int8[]' $_677
call vararg int32 'printf'(void*)
pop
$L675:
ldsflda valuetype 'int8[]' $_51
call vararg int32 'printf'(void*)
pop
ldc.i4 160
stsfld int32 'Milestone'
call int32 'Pause'()
pop
ldsflda valuetype 'int8[]' $_679
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_680
call vararg int32 'printf'(void*)
pop
ldsflda float64 'Y'
stloc 652
ldloc 652
ldsfld float64 'CInvrse'
neg
stind.r8
ldsfld float64 'HInvrse'
ldloc 652
ldind.r8
mul
stsfld float64 'V9'
ldftn void 'sigfpe'(int32)
stsfld method void *() 'sigsave'
ldsflda valuetype 'int32[]' 'ovfl_buf'
call int32 '_setjmp'(void*)
stloc 653
ldloc 653
ldc.i4 0
beq $L681
ldc.i4 0
stsfld int32 'I'
ldsfld float64 'Y'
stsfld float64 'V9'
br $L683
$L681:
$L684:
ldsflda float64 'Y'
stloc 654
ldloc 654
ldind.r8
stsfld float64 'V'
ldsflda float64 'V9'
stloc 655
ldloc 654
ldloc 655
ldind.r8
stind.r8
ldloc 655
ldsfld float64 'HInvrse'
ldloc 654
ldind.r8
mul
stind.r8
$L685:
ldsfld float64 'V9'
ldsfld float64 'Y'
blt $L684
ldc.i4 1
stsfld int32 'I'
$L683:
ldc.i4 0
stsfld method void *() 'sigsave'
ldsfld float64 'V9'
stsfld float64 'Z'
ldsflda valuetype 'int8[]' $_687
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_688
ldsfld float64 'Y'
call vararg int32 'printf'(void*,...,float64)
pop
ldsflda float64 'V9'
stloc 656
ldsfld float64 'Y'
stloc 657
ldloc 656
ldloc 657
neg
stind.r8
ldsflda float64 'V0'
stloc 658
ldloc 658
ldloc 656
ldind.r8
stind.r8
ldsfld float64 'V'
stloc 659
ldloc 659
ldloc 657
sub
ldloc 659
ldloc 658
ldind.r8
add
bne.un $L689
ldsflda valuetype 'int8[]' $_691
call vararg int32 'printf'(void*)
pop
br $L690
$L689:
ldsflda valuetype 'int8[]' $_692
call vararg int32 'printf'(void*)
pop
ldc.i4 3
ldsflda valuetype 'int8[]' $_693
call int32 'BadCond'(int32,void*)
pop
$L690:
ldsfld float64 'Z'
ldsfld float64 'Y'
beq $L694
ldc.i4 1
ldsflda valuetype 'int8[]' $_169
call int32 'BadCond'(int32,void*)
pop
ldsflda valuetype 'int8[]' $_696
ldsfld float64 'Y'
ldsfld float64 'Z'
call vararg int32 'printf'(void*,...,float64,float64)
pop
$L694:
ldsfld int32 'I'
ldc.i4 0
beq $L697
ldsflda float64 'Y'
stloc 660
ldsfld float64 'V'
stloc 661
ldsfld float64 'HInvrse'
stloc 662
ldsfld float64 'U2'
stloc 663
ldloc 660
ldloc 661
ldloc 662
ldloc 663
mul
ldloc 662
sub
mul
stind.r8
ldsflda float64 'Z'
stloc 664
ldloc 664
ldloc 660
ldind.r8
ldsfld float64 'One'
ldloc 662
sub
ldloc 663
mul
ldloc 661
mul
add
stind.r8
ldloc 664
ldind.r8
ldsfld float64 'V0'
bge $L699
ldsfld float64 'Z'
stsfld float64 'Y'
$L699:
ldsfld float64 'Y'
ldsfld float64 'V0'
bge $L701
ldsfld float64 'Y'
stsfld float64 'V'
$L701:
ldsfld float64 'V0'
stloc 665
ldloc 665
ldsfld float64 'V'
sub
ldloc 665
bge $L698
ldsfld float64 'V0'
stsfld float64 'V'
br $L698
$L697:
ldsflda float64 'V'
stloc 666
ldsfld float64 'Y'
stloc 667
ldsfld float64 'HInvrse'
stloc 668
ldsfld float64 'U2'
stloc 669
ldloc 666
ldloc 667
ldloc 668
ldloc 669
mul
ldloc 668
sub
mul
stind.r8
ldloc 666
ldloc 666
ldind.r8
ldsfld float64 'One'
ldloc 668
sub
ldloc 669
mul
ldloc 667
mul
add
stind.r8
$L698:
ldsflda valuetype 'int8[]' $_705
ldsfld float64 'V'
call vararg int32 'printf'(void*,...,float64)
pop
ldsfld int32 'I'
ldc.i4 0
beq $L706
ldsflda valuetype 'int8[]' $_708
ldsfld float64 'V0'
call vararg int32 'printf'(void*,...,float64)
pop
br $L707
$L706:
ldsflda valuetype 'int8[]' $_709
call vararg int32 'printf'(void*)
pop
$L707:
ldsflda float64 'V9'
stloc 670
ldloc 670
ldsfld float64 'V'
ldsfld float64 'One'
mul
stind.r8
ldsflda valuetype 'int8[]' $_710
ldloc 670
ldind.r8
call vararg int32 'printf'(void*,...,float64)
pop
ldsflda float64 'V9'
stloc 671
ldloc 671
ldsfld float64 'V'
ldsfld float64 'One'
div
stind.r8
ldsflda valuetype 'int8[]' $_711
ldloc 671
ldind.r8
call vararg int32 'printf'(void*,...,float64)
pop
ldsflda valuetype 'int8[]' $_712
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_713
call vararg int32 'printf'(void*)
pop
ldc.i4 170
stsfld int32 'Milestone'
ldsfld float64 'V'
stloc 672
ldloc 672
neg
ldloc 672
bge $L719
ldsfld float64 'V0'
stloc 673
ldloc 673
neg
ldloc 673
bge $L719
ldsfld float64 'UfThold'
stloc 674
ldloc 674
neg
ldloc 672
bge $L719
ldloc 674
ldloc 672
blt $L715
$L719:
ldc.i4 0
ldsflda valuetype 'int8[]' $_720
call int32 'BadCond'(int32,void*)
pop
ldsflda valuetype 'int8[]' $_721
ldsfld float64 'V'
ldsfld float64 'V0'
ldsfld float64 'UfThold'
call vararg int32 'printf'(void*,...,float64,float64,float64)
pop
$L715:
ldc.i4 175
stsfld int32 'Milestone'
ldsflda valuetype 'int8[]' $_51
call vararg int32 'printf'(void*)
pop
ldc.i4 1
stsfld int32 'Indx'
$L723:
ldsfld int32 'Indx'
stloc 675
ldc.i4 2
stloc 676
ldloc 675
ldloc 676
beq $L730
ldloc 675
ldloc 676
bgt $L733
$L732:
ldsfld int32 'Indx'
ldc.i4 1
beq $L729
br $L727
$L733:
ldsfld int32 'Indx'
ldc.i4 3
beq $L731
br $L727
$L729:
ldsfld float64 'UfThold'
stsfld float64 'Z'
br $L728
$L730:
ldsfld float64 'E0'
stsfld float64 'Z'
br $L728
$L731:
ldsfld float64 'PseudoZero'
stsfld float64 'Z'
$L727:
$L728:
ldsfld float64 'Z'
ldsfld float64 'Zero'
beq $L734
ldsfld float64 'Z'
call float64 'sqrt'(float64)
stloc 677
ldloc 677
stsfld float64 'V9'
ldsfld float64 'V9'
stloc 678
ldloc 678
ldloc 678
mul
stsfld float64 'Y'
ldsfld float64 'Y'
stloc 679
ldsfld float64 'One'
stloc 680
ldsfld float64 'Radix'
ldsfld float64 'E9'
mul
conv.r8
stloc 681
ldsfld float64 'Z'
stloc 682
ldloc 679
ldloc 680
ldloc 681
sub
div
ldloc 682
blt $L738
ldloc 679
ldloc 680
ldloc 681
add
ldloc 682
mul
ble $L736
$L738:
ldsfld float64 'V9'
ldsfld float64 'U1'
ble $L739
ldc.i4 1
ldsflda valuetype 'int8[]' $_169
call int32 'BadCond'(int32,void*)
pop
br $L740
$L739:
ldc.i4 2
ldsflda valuetype 'int8[]' $_169
call int32 'BadCond'(int32,void*)
pop
$L740:
ldsflda valuetype 'int8[]' $_741
ldsfld float64 'Z'
call vararg int32 'printf'(void*,...,float64)
pop
ldsflda valuetype 'int8[]' $_742
ldsfld float64 'Y'
call vararg int32 'printf'(void*,...,float64)
pop
$L736:
$L734:
$L724:
ldsflda int32 'Indx'
stloc 683
ldloc 683
ldloc 683
ldind.i4
ldc.i4 1
add
stind.i4
ldsfld int32 'Indx'
ldc.i4 3
ble $L723
ldc.i4 180
stsfld int32 'Milestone'
ldc.i4 1
stsfld int32 'Indx'
$L744:
ldsfld int32 'Indx'
ldc.i4 1
bne.un $L748
ldsfld float64 'V'
stsfld float64 'Z'
br $L749
$L748:
ldsfld float64 'V0'
stsfld float64 'Z'
$L749:
ldsfld float64 'Z'
call float64 'sqrt'(float64)
stloc 684
ldloc 684
stsfld float64 'V9'
ldsflda float64 'X'
stloc 685
ldsflda float64 'V9'
stloc 686
ldloc 686
ldind.r8
stloc 687
ldloc 685
ldsfld float64 'One'
ldsfld float64 'Radix'
ldsfld float64 'E9'
mul
sub
ldloc 687
mul
stind.r8
ldloc 686
ldloc 687
ldloc 685
ldind.r8
mul
stind.r8
ldsfld float64 'V9'
stloc 688
ldsfld float64 'Z'
stloc 689
ldloc 688
ldsfld float64 'One'
ldsfld float64 'Two'
ldsfld float64 'Radix'
mul
ldsfld float64 'E9'
mul
sub
ldloc 689
mul
blt $L752
ldloc 688
ldloc 689
ble $L750
$L752:
ldsfld float64 'V9'
stsfld float64 'Y'
ldsfld float64 'X'
ldsfld float64 'W'
bge $L753
ldc.i4 1
ldsflda valuetype 'int8[]' $_169
call int32 'BadCond'(int32,void*)
pop
br $L754
$L753:
ldc.i4 2
ldsflda valuetype 'int8[]' $_169
call int32 'BadCond'(int32,void*)
pop
$L754:
ldsflda valuetype 'int8[]' $_755
ldsfld float64 'Z'
call vararg int32 'printf'(void*,...,float64)
pop
ldsflda valuetype 'int8[]' $_756
ldsfld float64 'Y'
call vararg int32 'printf'(void*,...,float64)
pop
$L750:
$L745:
ldsflda int32 'Indx'
stloc 690
ldloc 690
ldloc 690
ldind.i4
ldc.i4 1
add
stind.i4
ldsfld int32 'Indx'
ldc.i4 2
ble $L744
ldc.i4 190
stsfld int32 'Milestone'
call int32 'Pause'()
pop
ldsfld float64 'UfThold'
ldsfld float64 'V'
mul
stsfld float64 'X'
ldsfld float64 'Radix'
stloc 691
ldloc 691
ldloc 691
mul
stsfld float64 'Y'
ldsfld float64 'X'
stloc 692
ldsfld float64 'Y'
stloc 693
ldloc 692
ldloc 693
mul
ldsfld float64 'One'
blt $L760
ldloc 692
ldloc 693
ble $L758
$L760:
ldsfld float64 'X'
stloc 694
ldsfld float64 'Y'
stloc 695
ldsfld float64 'U1'
stloc 696
ldloc 694
ldloc 695
mul
ldloc 696
blt $L763
ldloc 694
ldloc 695
ldloc 696
div
ble $L761
$L763:
ldc.i4 2
ldsflda valuetype 'int8[]' $_764
call int32 'BadCond'(int32,void*)
pop
br $L762
$L761:
ldc.i4 3
ldsflda valuetype 'int8[]' $_169
call int32 'BadCond'(int32,void*)
pop
$L762:
ldsflda valuetype 'int8[]' $_765
ldsfld float64 'X'
ldsflda valuetype 'int8[]' $_766
call vararg int32 'printf'(void*,...,float64,void*)
pop
$L758:
ldc.i4 200
stsfld int32 'Milestone'
ldc.i4 1
stsfld int32 'Indx'
$L768:
ldsfld float64 'F9'
stsfld float64 'X'
ldsfld int32 'Indx'
stloc 697
ldc.i4 3
stloc 698
ldloc 697
ldloc 698
beq $L775
ldloc 697
ldloc 698
bgt $L779
$L778:
ldsfld int32 'Indx'
ldc.i4 2
beq $L774
br $L772
$L779:
ldsfld int32 'Indx'
stloc 699
ldc.i4 4
stloc 700
ldloc 699
ldloc 700
beq $L776
ldloc 699
ldloc 700
blt $L772
$L780:
ldsfld int32 'Indx'
ldc.i4 5
beq $L777
br $L772
$L774:
ldsfld float64 'One'
ldsfld float64 'U2'
add
stsfld float64 'X'
br $L773
$L775:
ldsfld float64 'V'
stsfld float64 'X'
br $L773
$L776:
ldsfld float64 'UfThold'
stsfld float64 'X'
br $L773
$L777:
ldsfld float64 'Radix'
stsfld float64 'X'
$L772:
$L773:
ldsfld float64 'X'
stsfld float64 'Y'
ldftn void 'sigfpe'(int32)
stsfld method void *() 'sigsave'
ldsflda valuetype 'int32[]' 'ovfl_buf'
call int32 '_setjmp'(void*)
stloc 701
ldloc 701
ldc.i4 0
beq $L781
ldsflda valuetype 'int8[]' $_783
ldsfld float64 'X'
call vararg int32 'printf'(void*,...,float64)
pop
br $L782
$L781:
ldsflda float64 'V9'
stloc 702
ldsfld float64 'Half'
stloc 703
ldloc 702
ldsfld float64 'Y'
ldsfld float64 'X'
div
ldloc 703
sub
ldloc 703
sub
stind.r8
ldloc 702
ldind.r8
ldsfld float64 'Zero'
bne.un $L784
br $L769
$L784:
ldsfld float64 'V9'
ldsfld float64 'U1'
neg
bne.un $L786
ldsfld int32 'Indx'
ldc.i4 5
bge $L786
ldc.i4 3
ldsflda valuetype 'int8[]' $_169
call int32 'BadCond'(int32,void*)
pop
br $L787
$L786:
ldc.i4 1
ldsflda valuetype 'int8[]' $_169
call int32 'BadCond'(int32,void*)
pop
$L787:
ldsflda valuetype 'int8[]' $_788
ldsfld float64 'X'
call vararg int32 'printf'(void*,...,float64)
pop
ldsflda valuetype 'int8[]' $_789
ldsfld float64 'V9'
call vararg int32 'printf'(void*,...,float64)
pop
$L782:
ldc.i4 0
stsfld method void *() 'sigsave'
$L769:
ldsflda int32 'Indx'
stloc 704
ldloc 704
ldloc 704
ldind.i4
ldc.i4 1
add
stind.i4
ldsfld int32 'Indx'
ldc.i4 5
ble $L768
ldc.i4 210
stsfld int32 'Milestone'
ldsfld float64 'Zero'
stsfld float64 'MyZero'
ldsflda valuetype 'int8[]' $_51
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_791
call vararg int32 'printf'(void*)
pop
ldftn void 'sigfpe'(int32)
stsfld method void *() 'sigsave'
ldsflda valuetype 'int8[]' $_792
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int32[]' 'ovfl_buf'
call int32 '_setjmp'(void*)
stloc 705
ldloc 705
ldc.i4 0
bne.un $L793
ldsflda valuetype 'int8[]' $_795
ldsfld float64 'One'
ldsfld float64 'MyZero'
div
conv.r8
call vararg int32 'printf'(void*,...,float64)
pop
$L793:
ldsflda method void *() 'sigsave'
stloc 706
ldloc 706
ldc.i4 0
stind.i4
ldloc 706
ldftn void 'sigfpe'(int32)
stind.i4
ldsflda valuetype 'int8[]' $_796
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int32[]' 'ovfl_buf'
call int32 '_setjmp'(void*)
stloc 707
ldloc 707
ldc.i4 0
bne.un $L797
ldsflda valuetype 'int8[]' $_795
ldsfld float64 'Zero'
ldsfld float64 'MyZero'
div
conv.r8
call vararg int32 'printf'(void*,...,float64)
pop
$L797:
ldc.i4 0
stsfld method void *() 'sigsave'
ldc.i4 220
stsfld int32 'Milestone'
call int32 'Pause'()
pop
ldsflda valuetype 'int8[]' $_51
call vararg int32 'printf'(void*)
pop
ldc.i4 0
stloc 708
$L810:
ldloc 708
ldc.i4 2
shl
ldsflda valuetype 'int32[]' 'ErrCnt'
add
ldind.i4
ldc.i4 0
beq $L814
ldsflda valuetype 'int8[]' $_816
ldloc 708
ldc.i4 2
shl
stloc 709
ldloc 709
ldsflda valuetype 'void*[]' $800_msg
add
ldind.u4
ldloc 709
ldsflda valuetype 'int32[]' 'ErrCnt'
add
ldind.i4
call vararg int32 'printf'(void*,...,void*,int32)
pop
$L814:
$L811:
ldloc 708
ldc.i4 1
add
stloc 708
ldloc 708
ldc.i4 4
blt $L810
ldsflda valuetype 'int8[]' $_51
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int32[]' 'ErrCnt'
stloc 710
ldloc 710
ldind.i4
ldloc 710
ldc.i4 4
add
ldind.i4
add
ldloc 710
ldc.i4 8
add
ldind.i4
add
ldloc 710
ldc.i4 12
add
ldind.i4
add
ldc.i4 0
ble $L817
ldsflda valuetype 'int32[]' 'ErrCnt'
stloc 711
ldc.i4 0
stloc 712
ldloc 711
ldind.i4
ldloc 711
ldc.i4 4
add
ldind.i4
add
ldloc 711
ldc.i4 8
add
ldind.i4
add
ldloc 712
bne.un $L819
ldloc 711
ldc.i4 12
add
ldind.i4
ldloc 712
ble $L819
ldsflda valuetype 'int8[]' $_821
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_822
call vararg int32 'printf'(void*)
pop
$L819:
ldsflda valuetype 'int32[]' 'ErrCnt'
stloc 713
ldc.i4 0
stloc 714
ldloc 713
ldind.i4
ldloc 713
ldc.i4 4
add
ldind.i4
add
ldloc 714
bne.un $L823
ldloc 713
ldc.i4 8
add
ldind.i4
ldloc 714
ble $L823
ldsflda valuetype 'int8[]' $_825
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_826
call vararg int32 'printf'(void*)
pop
$L823:
ldsflda valuetype 'int32[]' 'ErrCnt'
stloc 715
ldloc 715
ldind.i4
ldloc 715
ldc.i4 4
add
ldind.i4
add
ldc.i4 0
ble $L827
ldsflda valuetype 'int8[]' $_829
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_830
call vararg int32 'printf'(void*)
pop
$L827:
ldsflda valuetype 'int32[]' 'ErrCnt'
ldind.i4
ldc.i4 0
ble $L818
ldsflda valuetype 'int8[]' $_833
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_834
call vararg int32 'printf'(void*)
pop
br $L818
$L817:
ldsflda valuetype 'int8[]' $_835
call vararg int32 'printf'(void*)
pop
ldc.i4 1
stloc 716
ldsfld int32 'RMult'
ldloc 716
bne.un $L840
ldsfld int32 'RDiv'
ldloc 716
bne.un $L840
ldsfld int32 'RAddSub'
ldloc 716
bne.un $L840
ldsfld int32 'RSqrt'
ldloc 716
beq $L836
$L840:
ldsflda valuetype 'int8[]' $_841
call vararg int32 'printf'(void*)
pop
br $L837
$L836:
ldsfld float64 'One'
stloc 717
ldsfld float64 'StickyBit'
ldloc 717
blt $L842
ldsfld float64 'Radix'
stloc 718
ldloc 718
ldsfld float64 'Two'
sub
ldloc 718
ldsfld float64 'Nine'
sub
ldloc 717
sub
mul
ldsfld float64 'Zero'
bne.un $L842
ldsflda valuetype 'int8[]' $_844
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_845
call vararg int32 'printf'(void*)
pop
ldsfld float64 'Two'
stloc 719
ldsfld float64 'Radix'
ldloc 719
bne.un $L846
ldsfld float64 'Precision'
stloc 720
ldsfld float64 'TwentySeven'
stloc 721
ldloc 720
ldsfld float64 'Four'
ldsfld float64 'Three'
mul
ldloc 719
mul
sub
ldloc 720
ldloc 721
sub
ldloc 721
sub
ldsfld float64 'One'
add
mul
ldsfld float64 'Zero'
bne.un $L846
ldsflda valuetype 'int8[]' $_848
call vararg int32 'printf'(void*)
pop
br $L847
$L846:
ldsflda valuetype 'int8[]' $_849
call vararg int32 'printf'(void*)
pop
$L847:
ldsfld int32 'IEEE'
ldc.i4 0
beq $L850
ldsflda valuetype 'int8[]' $_852
call vararg int32 'printf'(void*)
pop
br $L851
$L850:
ldsflda valuetype 'int8[]' $_853
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_854
call vararg int32 'printf'(void*)
pop
$L851:
$L842:
ldsflda valuetype 'int8[]' $_855
call vararg int32 'printf'(void*)
pop
$L837:
$L818:
ldsfld int32 'fpecount'
ldc.i4 0
beq $L856
ldsflda valuetype 'int8[]' $_858
ldsfld int32 'fpecount'
call vararg int32 'printf'(void*,...,int32)
pop
$L856:
ldsflda valuetype 'int8[]' $_859
call vararg int32 'printf'(void*)
pop
ldc.i4 0
$L12:
ret
}
.method public hidebysig static float64 'Sign'(float64) cil managed {
.locals ([0] float64 '863')
.maxstack 4
ldarg 0
ldc.r8 0.0
blt $L864
ldc.r8 1.000000e+000
stloc 0
br $L865
$L864:
ldc.r8 -1.000000e+000
stloc 0
$L865:
ldloc 0
$L862:
ret
}
.method public hidebysig static int32 'Pause'() cil managed {
.locals ([0] void* '1')
.locals ([1] int32 '2')
.locals ([2] void* '3')
.maxstack 3
ldsflda valuetype 'int8[]' $_868
ldsfld int32 'Milestone'
call vararg int32 'printf'(void*,...,int32)
pop
ldsflda valuetype 'int8[]' $_869
ldsfld int32 'PageNo'
call vararg int32 'printf'(void*,...,int32)
pop
ldsflda int32 'Milestone'
stloc 0
ldc.i4 1
stloc 1
ldloc 0
ldloc 0
ldind.i4
ldloc 1
add
stind.i4
ldsflda int32 'PageNo'
stloc 2
ldloc 2
ldloc 2
ldind.i4
ldloc 1
add
stind.i4
ldc.i4 0
$L867:
ret
}
.method public hidebysig static int32 'TstCond'(int32,int32,void*) cil managed {
.maxstack 3
ldarg 1
ldc.i4 0
bne.un $L871
ldarg 0
ldarg 2
call int32 'BadCond'(int32,void*)
pop
ldsflda valuetype 'int8[]' $_852
call vararg int32 'printf'(void*)
pop
$L871:
ldc.i4 0
$L870:
ret
}
.field public static valuetype 'void*[]' $874_msg at $875
.data $875 = {
&($877),
&($879),
&($881),
&($883)
}
.method public hidebysig static int32 'BadCond'(int32,void*) cil managed {
.locals ([0] void* '1')
.maxstack 4
ldarg 0
ldc.i4 2
shl
ldsflda valuetype 'int32[]' 'ErrCnt'
add
stloc 0
ldloc 0
ldloc 0
ldind.i4
ldc.i4 1
add
stind.i4
ldsflda valuetype 'int8[]' $_884
ldarg 0
ldc.i4 2
shl
ldsflda valuetype 'void*[]' $874_msg
add
ldind.u4
ldarg 1
call vararg int32 'printf'(void*,...,void*,void*)
pop
ldc.i4 0
$L873:
ret
}
.method public hidebysig static float64 'Random'() cil managed {
.locals ([0] float64 'X')
.locals ([1] float64 'Y')
.locals ([2] float64 '1')
.locals ([3] float64 '2')
.locals ([4] float64 '3')
.locals ([5] float64 '4')
.locals ([6] void* '5')
.maxstack 7
ldsfld float64 'Random1'
ldsfld float64 'Random9'
add
conv.r8
stloc 0
ldloc 0
ldloc 0
mul
conv.r8
stloc 1
ldloc 1
ldloc 1
mul
conv.r8
stloc 1
ldloc 0
ldloc 1
mul
conv.r8
stloc 0
ldloc 0
call float64 'floor'(float64)
stloc 5
ldloc 0
ldloc 5
sub
conv.r8
stloc 1
ldsflda float64 'Random1'
stloc 6
ldloc 6
ldloc 1
ldc.r8 5.000000e-006
ldloc 0
mul
add
stind.r8
ldloc 6
ldind.r8
$L885:
ret
}
.method public hidebysig static int32 'SqXMinX'(int32) cil managed {
.locals ([0] float64 'XB')
.locals ([1] float64 'XA')
.locals ([2] float64 '1')
.locals ([3] float64 '2')
.locals ([4] void* '3')
.locals ([5] float64 '4')
.maxstack 9
ldsfld float64 'X'
stloc 2
ldloc 2
ldsfld float64 'BInvrse'
mul
conv.r8
stloc 0
ldloc 2
ldloc 0
sub
conv.r8
stloc 1
ldloc 2
ldloc 2
mul
conv.r8
call float64 'sqrt'(float64)
stloc 3
ldloc 3
ldloc 0
sub
ldloc 1
sub
ldsfld float64 'OneUlp'
div
stsfld float64 'SqEr'
ldsfld float64 'SqEr'
ldsfld float64 'Zero'
beq $L888
ldsfld float64 'SqEr'
ldsfld float64 'MinSqEr'
bge $L890
ldsfld float64 'SqEr'
stsfld float64 'MinSqEr'
$L890:
ldsfld float64 'SqEr'
ldsfld float64 'MaxSqEr'
ble $L892
ldsfld float64 'SqEr'
stsfld float64 'MaxSqEr'
$L892:
ldsflda float64 'J'
stloc 4
ldloc 4
ldloc 4
ldind.r8
ldc.r8 1.000000e+000
add
stind.r8
ldarg 0
ldsflda valuetype 'int8[]' $_51
call int32 'BadCond'(int32,void*)
pop
ldsflda valuetype 'int8[]' $_894
ldsfld float64 'X'
stloc 5
ldloc 5
ldloc 5
mul
conv.r8
ldloc 5
ldsfld float64 'OneUlp'
ldsfld float64 'SqEr'
mul
conv.r8
call vararg int32 'printf'(void*,...,float64,float64,float64)
pop
ldsflda valuetype 'int8[]' $_895
call vararg int32 'printf'(void*)
pop
$L888:
ldc.i4 0
$L887:
ret
}
.method public hidebysig static int32 'NewD'() cil managed {
.locals ([0] void* '1')
.locals ([1] float64 '2')
.locals ([2] float64 '3')
.locals ([3] void* '4')
.locals ([4] void* '5')
.locals ([5] float64 '6')
.locals ([6] void* '7')
.locals ([7] float64 '8')
.locals ([8] float64 '9')
.locals ([9] void* '10')
.locals ([10] void* '11')
.locals ([11] void* '12')
.maxstack 9
ldsflda float64 'X'
stloc 0
ldloc 0
ldsfld float64 'Z1'
ldsfld float64 'Q'
mul
stind.r8
ldsfld float64 'Half'
ldloc 0
ldind.r8
ldsfld float64 'Radix'
div
sub
conv.r8
call float64 'floor'(float64)
stloc 1
ldsfld float64 'Radix'
stloc 2
ldsflda float64 'X'
stloc 3
ldloc 0
ldloc 1
ldloc 2
mul
ldloc 3
ldind.r8
add
stind.r8
ldsflda float64 'Q'
stloc 4
ldloc 3
ldind.r8
stloc 5
ldsflda float64 'Z'
stloc 6
ldloc 6
ldind.r8
stloc 7
ldsfld float64 'D'
stloc 8
ldloc 4
ldloc 4
ldind.r8
ldloc 5
ldloc 7
mul
sub
ldloc 2
div
ldloc 5
ldloc 5
mul
ldloc 8
ldloc 2
div
mul
add
stind.r8
ldloc 6
ldloc 7
ldsfld float64 'Two'
ldloc 5
mul
ldloc 8
mul
sub
stind.r8
ldloc 6
ldind.r8
ldsfld float64 'Zero'
bgt $L897
ldsflda float64 'Z'
stloc 9
ldloc 9
ldloc 9
ldind.r8
neg
stind.r8
ldsflda float64 'Z1'
stloc 10
ldloc 10
ldloc 10
ldind.r8
neg
stind.r8
$L897:
ldsflda float64 'D'
stloc 11
ldloc 11
ldsfld float64 'Radix'
ldloc 11
ldind.r8
mul
stind.r8
ldc.i4 0
$L896:
ret
}
.method public hidebysig static int32 'SR3750'() cil managed {
.locals ([0] float64 '1')
.locals ([1] float64 '2')
.locals ([2] float64 '3')
.locals ([3] void* '4')
.locals ([4] float64 '5')
.locals ([5] void* '6')
.locals ([6] void* '7')
.locals ([7] float64 '8')
.locals ([8] float64 '9')
.locals ([9] float64 '10')
.locals ([10] float64 '11')
.locals ([11] void* '12')
.locals ([12] void* '13')
.maxstack 7
ldsfld float64 'X'
stloc 0
ldsfld float64 'Radix'
stloc 1
ldsfld float64 'Z2'
stloc 2
ldloc 0
ldloc 1
sub
ldloc 2
ldloc 1
sub
blt $L900
ldloc 0
ldloc 2
sub
ldsfld float64 'W'
ldloc 2
sub
bgt $L900
ldsflda int32 'I'
stloc 3
ldloc 3
ldloc 3
ldind.i4
ldc.i4 1
add
stind.i4
ldsfld float64 'X'
ldsfld float64 'D'
mul
conv.r8
call float64 'sqrt'(float64)
stloc 4
ldloc 4
stsfld float64 'X2'
ldsflda float64 'Y2'
stloc 5
ldsflda float64 'X2'
stloc 6
ldsfld float64 'Z2'
stloc 7
ldsfld float64 'Y'
stloc 8
ldloc 5
ldloc 6
ldind.r8
ldloc 7
sub
ldloc 8
ldloc 7
sub
sub
stind.r8
ldsfld float64 'Half'
stloc 9
ldloc 6
ldsfld float64 'X8'
ldloc 8
ldloc 9
sub
div
stind.r8
ldloc 6
ldind.r8
stloc 10
ldloc 6
ldloc 10
ldloc 9
ldloc 10
mul
ldloc 10
mul
sub
stind.r8
ldsflda float64 'SqEr'
stloc 11
ldloc 11
ldloc 5
ldind.r8
ldloc 9
add
ldloc 9
ldloc 6
ldind.r8
sub
add
stind.r8
ldloc 11
ldind.r8
ldsfld float64 'MinSqEr'
bge $L902
ldsfld float64 'SqEr'
stsfld float64 'MinSqEr'
$L902:
ldsflda float64 'SqEr'
stloc 12
ldloc 12
ldsfld float64 'Y2'
ldsfld float64 'X2'
sub
stind.r8
ldloc 12
ldind.r8
ldsfld float64 'MaxSqEr'
ble $L904
ldsfld float64 'SqEr'
stsfld float64 'MaxSqEr'
$L904:
$L900:
ldc.i4 0
$L899:
ret
}
.method public hidebysig static int32 'IsYeqX'() cil managed {
.locals ([0] float64 '1')
.locals ([1] void* '2')
.maxstack 5
ldsfld float64 'Y'
ldsfld float64 'X'
beq $L907
ldsfld int32 'N'
ldc.i4 0
bgt $L909
ldsfld float64 'Zero'
stloc 0
ldsfld float64 'Z'
ldloc 0
bne.un $L911
ldsfld float64 'Q'
ldloc 0
bgt $L911
ldsflda valuetype 'int8[]' $_913
call vararg int32 'printf'(void*)
pop
br $L912
$L911:
ldc.i4 2
ldsflda valuetype 'int8[]' $_914
call int32 'BadCond'(int32,void*)
pop
$L912:
ldsflda valuetype 'int8[]' $_915
ldsfld float64 'Z'
ldsfld float64 'Q'
call vararg int32 'printf'(void*,...,float64,float64)
pop
ldsflda valuetype 'int8[]' $_916
ldsfld float64 'Y'
call vararg int32 'printf'(void*,...,float64)
pop
ldsflda valuetype 'int8[]' $_917
ldsfld float64 'X'
call vararg int32 'printf'(void*,...,float64)
pop
ldsflda valuetype 'int8[]' $_918
ldsfld float64 'Y'
ldsfld float64 'X'
sub
conv.r8
call vararg int32 'printf'(void*,...,float64)
pop
$L909:
ldsflda int32 'N'
stloc 1
ldloc 1
ldloc 1
ldind.i4
ldc.i4 1
add
stind.i4
$L907:
ldc.i4 0
$L906:
ret
}
.method public hidebysig static int32 'SR3980'() cil managed {
.locals ([0] void* '1')
.locals ([1] float64 '2')
.locals ([2] void* '3')
.locals ([3] int32 '4')
.locals ([4] void* '5')
.maxstack 5
$L920:
ldsflda float64 'Q'
stloc 0
ldloc 0
ldsfld int32 'I'
conv.r8
stind.r8
ldsfld float64 'Z'
ldloc 0
ldind.r8
call float64 'pow'(float64,float64)
stloc 1
ldloc 1
stsfld float64 'Y'
call int32 'IsYeqX'()
pop
ldsflda int32 'I'
stloc 2
ldloc 2
ldind.i4
ldc.i4 1
add
stloc 3
ldloc 2
ldloc 3
stind.i4
ldloc 3
ldsfld int32 'M'
ble $L923
br $L922
$L923:
ldsflda float64 'X'
stloc 4
ldloc 4
ldsfld float64 'Z'
ldloc 4
ldind.r8
mul
stind.r8
$L921:
ldsfld float64 'X'
ldsfld float64 'W'
blt $L920
$L922:
ldc.i4 0
$L919:
ret
}
.method public hidebysig static int32 'PrintIfNPositive'() cil managed {
.maxstack 2
ldsfld int32 'N'
ldc.i4 0
ble $L926
ldsflda valuetype 'int8[]' $_928
ldsfld int32 'N'
call vararg int32 'printf'(void*,...,int32)
pop
$L926:
ldc.i4 0
$L925:
ret
}
.method public hidebysig static int32 'TstPtUf'() cil managed {
.locals ([0] int32 '1')
.locals ([1] void* '2')
.locals ([2] float64 '3')
.locals ([3] float64 '4')
.locals ([4] float64 '5')
.locals ([5] int32 '6')
.locals ([6] void* '7')
.locals ([7] int32 '8')
.locals ([8] void* '9')
.locals ([9] void* '10')
.locals ([10] float64 '11')
.locals ([11] float64 '12')
.locals ([12] float64 '13')
.locals ([13] float64 '14')
.locals ([14] void* '15')
.maxstack 6
ldc.i4 0
stsfld int32 'N'
ldsfld float64 'Z'
ldsfld float64 'Zero'
beq $L930
ldsflda valuetype 'int8[]' $_932
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_933
call vararg int32 'printf'(void*)
pop
ldftn void 'sigfpe'(int32)
stsfld method void *() 'sigsave'
ldsflda valuetype 'int32[]' 'ovfl_buf'
call int32 '_setjmp'(void*)
stloc 0
ldloc 0
ldc.i4 0
beq $L934
br $L936
$L934:
ldsflda float64 'Q9'
stloc 1
ldsfld float64 'Z'
stloc 2
ldloc 1
ldloc 2
ldloc 2
add
ldloc 2
div
stind.r8
ldsflda valuetype 'int8[]' $_937
ldloc 1
ldind.r8
call vararg int32 'printf'(void*,...,float64)
pop
ldsfld float64 'Q9'
ldsfld float64 'Two'
sub
conv.r8
call float64 'fabs'(float64)
stloc 3
ldloc 3
ldsfld float64 'Radix'
ldsfld float64 'U2'
mul
bge $L938
ldsflda valuetype 'int8[]' $_940
call vararg int32 'printf'(void*)
pop
ldsflda valuetype 'int8[]' $_941
call vararg int32 'printf'(void*)
pop
br $L939
$L938:
ldsfld float64 'Q9'
stloc 4
ldloc 4
ldsfld float64 'One'
blt $L944
ldloc 4
ldsfld float64 'Two'
ble $L942
$L944:
$L936:
ldc.i4 1
stloc 5
ldloc 5
stsfld int32 'N'
ldsflda valuetype 'int32[]' 'ErrCnt'
ldc.i4 4
add
stloc 6
ldloc 6
ldloc 6
ldind.i4
ldloc 5
add
stind.i4
ldsflda valuetype 'int8[]' $_945
call vararg int32 'printf'(void*)
pop
br $L943
$L942:
ldc.i4 1
stloc 7
ldloc 7
stsfld int32 'N'
ldsflda valuetype 'int32[]' 'ErrCnt'
ldc.i4 8
add
stloc 8
ldloc 8
ldloc 8
ldind.i4
ldloc 7
add
stind.i4
ldsflda valuetype 'int8[]' $_946
call vararg int32 'printf'(void*)
pop
$L943:
$L939:
ldc.i4 0
stsfld method void *() 'sigsave'
ldsflda float64 'V9'
stloc 9
ldsfld float64 'Z'
stloc 10
ldsfld float64 'One'
stloc 11
ldloc 9
ldloc 10
ldloc 11
mul
stind.r8
ldloc 9
ldind.r8
stsfld float64 'Random1'
ldloc 9
ldloc 11
ldloc 10
mul
stind.r8
ldloc 9
ldind.r8
stsfld float64 'Random2'
ldloc 9
ldloc 10
ldloc 11
div
stind.r8
ldsfld float64 'Z'
stloc 12
ldloc 12
ldsfld float64 'Random1'
bne.un $L947
ldloc 12
ldsfld float64 'Random2'
bne.un $L947
ldloc 12
ldsfld float64 'V9'
bne.un $L947
ldsfld int32 'N'
ldc.i4 0
ble $L948
call int32 'Pause'()
pop
br $L948
$L947:
ldc.i4 1
stsfld int32 'N'
ldc.i4 2
ldsflda valuetype 'int8[]' $_951
call int32 'BadCond'(int32,void*)
pop
ldsflda valuetype 'int8[]' $_952
ldsfld float64 'Z'
call vararg int32 'printf'(void*,...,float64)
pop
ldsfld float64 'Z'
ldsfld float64 'Random1'
beq $L953
ldsflda valuetype 'int8[]' $_955
ldsfld float64 'Random1'
call vararg int32 'printf'(void*,...,float64)
pop
$L953:
ldsfld float64 'Random2'
stloc 13
ldsfld float64 'Z'
ldloc 13
beq $L956
ldloc 13
ldsfld float64 'Random1'
beq $L956
ldsflda valuetype 'int8[]' $_958
ldsfld float64 'Random2'
call vararg int32 'printf'(void*,...,float64)
pop
$L956:
ldsfld float64 'Z'
ldsfld float64 'V9'
beq $L959
ldsflda valuetype 'int8[]' $_961
ldsfld float64 'V9'
call vararg int32 'printf'(void*,...,float64)
pop
$L959:
ldsfld float64 'Random2'
ldsfld float64 'Random1'
beq $L962
ldsflda valuetype 'int32[]' 'ErrCnt'
ldc.i4 8
add
stloc 14
ldloc 14
ldloc 14
ldind.i4
ldc.i4 1
add
stind.i4
ldc.i4 2
ldsflda valuetype 'int8[]' $_964
call int32 'BadCond'(int32,void*)
pop
ldsflda valuetype 'int8[]' $_965
ldsfld float64 'Random2'
call vararg int32 'printf'(void*,...,float64)
pop
ldsflda valuetype 'int8[]' $_966
ldsfld float64 'Random1'
call vararg int32 'printf'(void*,...,float64)
pop
$L962:
call int32 'Pause'()
pop
$L948:
$L930:
ldc.i4 0
$L929:
ret
}
.method public hidebysig static int32 'notify'(void*) cil managed {
.maxstack 3
ldsflda valuetype 'int8[]' $_968
ldarg 0
call vararg int32 'printf'(void*,...,void*)
pop
ldsflda valuetype 'int8[]' $_969
call vararg int32 'printf'(void*)
pop
ldc.i4 0
$L967:
ret
}
.method public hidebysig static int32 'msglist'(void*) cil managed {
.locals ([0] void* '1')
.maxstack 3
br $L972
$L971:
ldsflda valuetype 'int8[]' $_974
ldarg 0
stloc 0
ldloc 0
ldc.i4 4
add
starg 0
ldloc 0
ldind.u4
call vararg int32 'printf'(void*,...,void*)
pop
$L972:
ldarg 0
ldind.u4
conv.u4
ldc.i4 0
bne.un $L971
ldc.i4 0
$L970:
ret
}
.field public static valuetype 'void*[]' $976_instr at $977
.data $977 = {
&($979),
&($981),
&($983),
&($985),
&($987),
&($989),
&($991),
&($993),
&($995),
int32 (0)
}
.method public hidebysig static int32 'Instructions'() cil managed {
.maxstack 2
ldsflda valuetype 'void*[]' $976_instr
call int32 'msglist'(void*)
pop
ldc.i4 0
$L975:
ret
}
.field public static valuetype 'void*[]' $997_head at $998
.data $998 = {
&($1000),
&($1002),
&($1004),
&($1006),
&($1008),
&($1010),
&($1012),
&($1014),
&($1016),
&($1018),
&($1020),
&($1022),
&($1024),
&($1026),
int32 (0)
}
.method public hidebysig static int32 'Heading'() cil managed {
.maxstack 2
ldsflda valuetype 'void*[]' $997_head
call int32 'msglist'(void*)
pop
ldc.i4 0
$L996:
ret
}
.field public static valuetype 'void*[]' $1028_chars at $1029
.data $1029 = {
&($1031),
&($1033),
&($1035),
&($1037),
&($1039),
&($1041),
&($1043),
&($1045),
&($1047),
&($1049),
&($1051),
&($1053),
&($1055),
&($1057),
&($1059),
&($1061),
&($1063),
&($1065),
&($1067),
int32 (0)
}
.method public hidebysig static int32 'Characteristics'() cil managed {
.maxstack 2
ldsflda valuetype 'void*[]' $1028_chars
call int32 'msglist'(void*)
pop
ldc.i4 0
$L1027:
ret
}
.field public static valuetype 'void*[]' $1069_hist at $1070
.data $1070 = {
&($1072),
&($1074),
&($1076),
&($1078),
&($1080),
&($1082),
&($1084),
&($1086),
&($1088),
&($1090),
&($1092),
&($1094),
&($1096),
&($1098),
&($1100),
&($1102),
&($1104),
int32 (0)
}
.method public hidebysig static int32 'History'() cil managed {
.maxstack 2
ldsflda valuetype 'void*[]' $1069_hist
call int32 'msglist'(void*)
pop
ldc.i4 0
$L1068:
ret
}
.method public hidebysig static float64 'pow'(float64,float64) cil managed {
.locals ([0] int32 'i')
.locals ([1] int32 'ex')
.locals ([2] float64 'xy')
.locals ([3] int32 'ey')
.locals ([4] int32 'flip')
.locals ([5] float64 'ye')
.locals ([6] float64 '1')
.locals ([7] float64 '2')
.locals ([8] float64 '3')
.locals ([9] float64 '4')
.locals ([10] float64 '5')
.locals ([11] float64 '6')
.locals ([12] float64 '7')
.locals ([13] int32 '8')
.locals ([14] int32 '9')
.locals ([15] float64 '10')
.locals ([16] float64 '11')
.maxstack 4
ldc.i4 0
stloc 3
ldc.i4 0
stloc 4
ldarg 1
ldc.r8 0.0
bne.un $L1106
ldc.r8 1.000000e+000
br $L1105
$L1106:
ldarg 1
stloc 6
ldloc 6
ldc.r8 -1.100000e+003
blt $L1110
ldloc 6
ldc.r8 1.100000e+003
ble $L1108
$L1110:
ldarg 0
ldc.r8 -1.000000e+000
beq $L1108
ldarg 0
call float64 'log'(float64)
stloc 7
ldarg 1
ldloc 7
mul
conv.r8
call float64 'exp'(float64)
stloc 8
ldloc 8
br $L1105
$L1108:
ldarg 1
ldc.r8 0.0
bge $L1113
ldarg 1
neg
conv.r8
starg 1
ldc.i4 1
stloc 4
$L1113:
ldarg 1
ldloca 5
call float64 'modf'(float64,void*)
stloc 9
ldloc 9
starg 1
ldarg 1
ldc.r8 0.0
beq $L1115
ldarg 0
call float64 'log'(float64)
stloc 10
ldarg 1
ldloc 10
mul
conv.r8
call float64 'exp'(float64)
stloc 11
ldloc 11
stloc 2
br $L1116
$L1115:
ldc.r8 1.000000e+000
stloc 2
$L1116:
ldarg 0
ldloca 1
call float64 'frexp'(float64,void*)
stloc 12
ldloc 12
starg 0
ldloc 5
conv.i4
stloc 13
ldloc 13
stloc 0
ldloc 13
ldc.i4 0
beq $L1117
$L1120:
ldloc 0
ldc.i4 1
and
ldc.i4 0
beq $L1124
ldloc 2
ldarg 0
mul
conv.r8
stloc 2
ldloc 3
ldloc 1
add
stloc 3
$L1124:
ldloc 0
ldc.i4 1
shr
stloc 14
ldloc 14
stloc 0
ldloc 14
ldc.i4 0
bne.un $L1127
br $L1122
$L1127:
ldarg 0
stloc 15
ldloc 15
ldloc 15
mul
conv.r8
starg 0
ldloc 1
ldc.i4 1
shl
stloc 1
ldarg 0
ldc.r8 5.000000e-001
bge $L1120
ldc.r8 2.000000e+000
ldarg 0
mul
conv.r8
starg 0
ldloc 1
ldc.i4 1
sub
stloc 1
br $L1120
$L1122:
$L1117:
ldloc 4
ldc.i4 0
beq $L1133
ldc.r8 1.000000e+000
ldloc 2
div
conv.r8
stloc 2
ldloc 3
neg
stloc 3
$L1133:
ldloc 2
ldloc 3
call float64 'ldexp'(float64,int32)
stloc 16
ldloc 16
$L1105:
ret
}
.field public static int32 'UfNGrad' at $UfNGrad
.data $UfNGrad = {
int32 (0)
}
.field public static int32 'SqRWrng' at $SqRWrng
.data $SqRWrng = {
int32 (0)
}
.field public static int32 'IEEE' at $IEEE
.data $IEEE = {
int32 (0)
}
.field public static int32 'Anomaly' at $Anomaly
.data $Anomaly = {
int32 (0)
}
.field public static int32 'Monot' at $Monot
.data $Monot = {
int32 (0)
}
.field public static int32 'NotMonot' at $NotMonot
.data $NotMonot = {
int32 (0)
}
.field public static int32 'Done' at $Done
.data $Done = {
int32 (0)
}
.field public static int32 'Break' at $Break
.data $Break = {
int32 (0)
}
.field public static int32 'RSqrt' at $RSqrt
.data $RSqrt = {
int32 (0)
}
.field public static int32 'RAddSub' at $RAddSub
.data $RAddSub = {
int32 (0)
}
.field public static int32 'RDiv' at $RDiv
.data $RDiv = {
int32 (0)
}
.field public static int32 'RMult' at $RMult
.data $RMult = {
int32 (0)
}
.field public static int32 'GAddSub' at $GAddSub
.data $GAddSub = {
int32 (0)
}
.field public static int32 'GDiv' at $GDiv
.data $GDiv = {
int32 (0)
}
.field public static int32 'GMult' at $GMult
.data $GMult = {
int32 (0)
}
.field public static int32 'N1' at $N1
.data $N1 = {
int32 (0)
}
.field public static int32 'N' at $N
.data $N = {
int32 (0)
}
.field public static int32 'M' at $M
.data $M = {
int32 (0)
}
.field public static int32 'PageNo' at $PageNo
.data $PageNo = {
int32 (0)
}
.field public static int32 'Milestone' at $Milestone
.data $Milestone = {
int32 (0)
}
.field public static int32 'fpecount' at $fpecount
.data $fpecount = {
int32 (0)
}
.field public static valuetype 'int32[]' 'ErrCnt' at $ErrCnt
.data $ErrCnt = {
int32 (0),
int32 (0),
int32 (0),
int32 (0)
}
.field public static float64 'Z9' at $Z9
.data $Z9 = {
int32 (0),
int32 (0)
}
.field public static float64 'Z2' at $Z2
.data $Z2 = {
int32 (0),
int32 (0)
}
.field public static float64 'Z1' at $Z1
.data $Z1 = {
int32 (0),
int32 (0)
}
.field public static float64 'PseudoZero' at $PseudoZero
.data $PseudoZero = {
int32 (0),
int32 (0)
}
.field public static float64 'Z' at $Z
.data $Z = {
int32 (0),
int32 (0)
}
.field public static float64 'Random2' at $Random2
.data $Random2 = {
int32 (0),
int32 (0)
}
.field public static float64 'Y2' at $Y2
.data $Y2 = {
int32 (0),
int32 (0)
}
.field public static float64 'Y1' at $Y1
.data $Y1 = {
int32 (0),
int32 (0)
}
.field public static float64 'Y' at $Y
.data $Y = {
int32 (0),
int32 (0)
}
.field public static float64 'Random1' at $Random1
.data $Random1 = {
int32 (0),
int32 (0)
}
.field public static float64 'X8' at $X8
.data $X8 = {
int32 (0),
int32 (0)
}
.field public static float64 'X2' at $X2
.data $X2 = {
int32 (0),
int32 (0)
}
.field public static float64 'X1' at $X1
.data $X1 = {
int32 (0),
int32 (0)
}
.field public static float64 'X' at $X
.data $X = {
int32 (0),
int32 (0)
}
.field public static float64 'W' at $W
.data $W = {
int32 (0),
int32 (0)
}
.field public static float64 'V9' at $V9
.data $V9 = {
int32 (0),
int32 (0)
}
.field public static float64 'V0' at $V0
.data $V0 = {
int32 (0),
int32 (0)
}
.field public static float64 'V' at $V
.data $V = {
int32 (0),
int32 (0)
}
.field public static float64 'U2' at $U2
.data $U2 = {
int32 (0),
int32 (0)
}
.field public static float64 'U1' at $U1
.data $U1 = {
int32 (0),
int32 (0)
}
.field public static float64 'UfThold' at $UfThold
.data $UfThold = {
int32 (0),
int32 (0)
}
.field public static float64 'OneUlp' at $OneUlp
.data $OneUlp = {
int32 (0),
int32 (0)
}
.field public static float64 'S' at $S
.data $S = {
int32 (0),
int32 (0)
}
.field public static float64 'Underflow' at $Underflow
.data $Underflow = {
int32 (0),
int32 (0)
}
.field public static float64 'T' at $T
.data $T = {
int32 (0),
int32 (0)
}
.field public static float64 'Random9' at $Random9
.data $Random9 = {
int32 (0),
int32 (0)
}
.field public static float64 'R' at $R
.data $R = {
int32 (0),
int32 (0)
}
.field public static float64 'Q9' at $Q9
.data $Q9 = {
int32 (0),
int32 (0)
}
.field public static float64 'Q' at $Q
.data $Q = {
int32 (0),
int32 (0)
}
.field public static float64 'Precision' at $Precision
.data $Precision = {
int32 (0),
int32 (0)
}
.field public static float64 'MyZero' at $MyZero
.data $MyZero = {
int32 (0),
int32 (0)
}
.field public static float64 'J' at $J
.data $J = {
int32 (0),
int32 (0)
}
.field public static float64 'StickyBit' at $StickyBit
.data $StickyBit = {
int32 (0),
int32 (0)
}
.field public static int32 'I' at $I
.data $I = {
int32 (0)
}
.field public static float64 'HInvrse' at $HInvrse
.data $HInvrse = {
int32 (0),
int32 (0)
}
.field public static float64 'H' at $H
.data $H = {
int32 (0),
int32 (0)
}
.field public static float64 'F9' at $F9
.data $F9 = {
int32 (0),
int32 (0)
}
.field public static float64 'F6' at $F6
.data $F6 = {
int32 (0),
int32 (0)
}
.field public static float64 'Third' at $Third
.data $Third = {
int32 (0),
int32 (0)
}
.field public static float64 'E9' at $E9
.data $E9 = {
int32 (0),
int32 (0)
}
.field public static float64 'MaxSqEr' at $MaxSqEr
.data $MaxSqEr = {
int32 (0),
int32 (0)
}
.field public static float64 'SqEr' at $SqEr
.data $SqEr = {
int32 (0),
int32 (0)
}
.field public static float64 'MinSqEr' at $MinSqEr
.data $MinSqEr = {
int32 (0),
int32 (0)
}
.field public static float64 'E3' at $E3
.data $E3 = {
int32 (0),
int32 (0)
}
.field public static float64 'Exp2' at $Exp2
.data $Exp2 = {
int32 (0),
int32 (0)
}
.field public static float64 'E1' at $E1
.data $E1 = {
int32 (0),
int32 (0)
}
.field public static float64 'E0' at $E0
.data $E0 = {
int32 (0),
int32 (0)
}
.field public static float64 'FourD' at $FourD
.data $FourD = {
int32 (0),
int32 (0)
}
.field public static float64 'D' at $D
.data $D = {
int32 (0),
int32 (0)
}
.field public static float64 'CInvrse' at $CInvrse
.data $CInvrse = {
int32 (0),
int32 (0)
}
.field public static float64 'C' at $C
.data $C = {
int32 (0),
int32 (0)
}
.field public static float64 'A1' at $A1
.data $A1 = {
int32 (0),
int32 (0)
}
.field public static float64 'AInvrse' at $AInvrse
.data $AInvrse = {
int32 (0),
int32 (0)
}
.field public static valuetype 'int8[]' 'ch' at $ch
.data $ch = {
int32 (0),
int32 (0)
}
.field public static int32 'Indx' at $Indx
.data $Indx = {
int32 (0)
}
.field public static float64 'BMinusU2' at $BMinusU2
.data $BMinusU2 = {
int32 (0),
int32 (0)
}
.field public static float64 'RadixD2' at $RadixD2
.data $RadixD2 = {
int32 (0),
int32 (0)
}
.field public static float64 'BInvrse' at $BInvrse
.data $BInvrse = {
int32 (0),
int32 (0)
}
.field public static float64 'Radix' at $Radix
.data $Radix = {
int32 (0),
int32 (0)
}
.field public static method void *() 'sigsave' at $sigsave
.data $sigsave = {
int32 (0)
}
.field public static valuetype 'int32[]' 'ovfl_buf' at $ovfl_buf
.data $ovfl_buf = {
int32 (0),
int32 (0),
int32 (0),
int32 (0),
int32 (0),
int32 (0),
int32 (0),
int32 (0),
int32 (0),
int32 (0),
int32 (0),
int32 (0),
int32 (0),
int32 (0),
int32 (0),
int32 (0)
}
.field public static valuetype 'int8[]' $_1103 at $1104
.data $1104 = {
bytearray ( 73 65 65 20 73 6f 75 72 63 65 20 63 6f 6d 6d 65 6e 74 73 20 66 6f 72 20 6d 6f 72 65 20 68
 69 73 74 6f 72 79 2e 0 )
}
.field public static valuetype 'int8[]' $_1101 at $1102
.data $1102 = {
bytearray ( 42 41 53 49 43 20 76 65 72 73 69 6f 6e 20 6f 66 20 74 68 69 73 20 70 72 6f 67 72 61 6d 20
 28 43 29 20 31 39 38 33 20 62 79 20 50 72 6f 66 2e 20 57 2e 20 4d 2e 20 4b 61 68 61 6e 3b
 0 )
}
.field public static valuetype 'int8[]' $_1099 at $1100
.data $1100 = {
bytearray ( 61 73 20 75 73 65 64 20 62 79 20 63 65 72 74 61 69 6e 20 65 61 72 6c 79 20 57 41 4e 47 20
 6d 61 63 68 69 6e 65 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_1097 at $1098
.data $1098 = {
bytearray ( 66 6c 6f 61 74 69 6e 67 2d 70 6f 69 6e 74 20 6e 75 6d 62 65 72 73 2c 20 62 75 74 20 61 6c
 73 6f 20 61 6c 6c 6f 77 73 20 6c 6f 67 61 72 69 74 68 6d 69 63 20 65 6e 63 6f 64 69 6e 67
 0 )
}
.field public static valuetype 'int8[]' $_1095 at $1096
.data $1096 = {
bytearray ( a 54 68 65 20 70 72 6f 67 72 61 6d 20 69 73 20 62 61 73 65 64 20 75 70 6f 6e 20 61 20 63
 6f 6e 76 65 6e 74 69 6f 6e 61 6c 20 72 61 64 69 78 20 72 65 70 72 65 73 65 6e 74 61 74 69
 6f 6e 20 66 6f 72 0 )
}
.field public static valuetype 'int8[]' $_1093 at $1094
.data $1094 = {
bytearray ( 6f 66 20 70 61 74 68 6f 6c 6f 67 69 65 73 2c 20 61 6e 64 20 74 6f 20 73 61 79 20 68 6f 77
 20 77 65 6c 6c 20 74 68 65 20 61 72 69 74 68 6d 65 74 69 63 20 69 73 20 69 6d 70 6c 65 6d
 65 6e 74 65 64 2e 0 )
}
.field public static valuetype 'int8[]' $_1091 at $1092
.data $1092 = {
bytearray ( 6f 66 20 74 68 65 20 61 72 69 74 68 6d 65 74 69 63 2c 20 74 68 69 73 20 70 72 6f 67 72 61
 6d 20 74 72 69 65 73 20 74 6f 20 63 6f 70 65 20 77 69 74 68 20 61 20 77 69 64 65 72 20 76
 61 72 69 65 74 79 0 )
}
.field public static valuetype 'int8[]' $_1089 at $1090
.data $1090 = {
bytearray ( 74 68 65 20 52 61 64 69 78 2c 20 50 72 65 63 69 73 69 6f 6e 20 61 6e 64 20 72 61 6e 67 65
 20 28 6f 76 65 72 2f 75 6e 64 65 72 66 6c 6f 77 20 74 68 72 65 73 68 6f 6c 64 73 29 0 )
}
.field public static valuetype 'int8[]' $_1087 at $1088
.data $1088 = {
bytearray ( 57 2e 20 4a 2e 20 43 6f 64 79 20 61 6e 64 20 57 2e 20 57 61 69 74 65 2e 20 41 6c 74 68 6f
 75 67 68 20 62 6f 74 68 20 70 72 6f 67 72 61 6d 73 20 74 72 79 20 74 6f 20 64 69 73 63 6f
 76 65 72 0 )
}
.field public static valuetype 'int8[]' $_1085 at $1086
.data $1086 = {
bytearray ( 62 6f 6f 6b 20 20 60 53 6f 66 74 77 61 72 65 20 4d 61 6e 75 61 6c 20 66 6f 72 20 74 68 65
 20 45 6c 65 6d 65 6e 74 61 72 79 20 46 75 6e 63 74 69 6f 6e 73 27 20 28 31 39 38 30 29 20
 62 79 0 )
}
.field public static valuetype 'int8[]' $_1083 at $1084
.data $1084 = {
bytearray ( 70 72 6f 67 72 61 6d 20 63 61 6c 6c 65 64 20 60 4d 41 43 48 41 52 27 2c 20 77 68 69 63 68
 20 63 61 6e 20 62 65 20 66 6f 75 6e 64 20 61 74 20 74 68 65 20 65 6e 64 20 6f 66 20 74 68
 65 0 )
}
.field public static valuetype 'int8[]' $_1081 at $1082
.data $1082 = {
bytearray ( 54 68 65 20 64 69 61 67 6e 6f 73 74 69 63 20 63 61 70 61 62 69 6c 69 74 69 65 73 20 6f 66
 20 74 68 69 73 20 70 72 6f 67 72 61 6d 20 67 6f 20 62 65 79 6f 6e 64 20 61 6e 20 65 61 72
 6c 69 65 72 0 )
}
.field public static valuetype 'int8[]' $_1079 at $1080
.data $1080 = {
bytearray ( 46 61 69 6c 75 72 65 73 20 6d 61 79 20 63 6f 6e 66 6f 75 6e 64 20 73 75 62 73 65 71 75 65
 6e 74 20 64 69 61 67 6e 6f 73 65 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_1077 at $1078
.data $1078 = {
bytearray ( 20 20 20 46 41 49 4c 55 52 45 73 2c 20 6c 69 6b 65 20 32 2b 32 20 3d 3d 20 35 20 2e 0 )
}
.field public static valuetype 'int8[]' $_1075 at $1076
.data $1076 = {
bytearray ( 20 20 20 53 65 72 69 6f 75 73 20 44 45 46 45 43 54 73 2c 20 6c 69 6b 65 20 6c 61 63 6b 20
 6f 66 20 61 20 67 75 61 72 64 20 64 69 67 69 74 2c 20 61 6e 64 0 )
}
.field public static valuetype 'int8[]' $_1073 at $1074
.data $1074 = {
bytearray ( 20 20 20 46 4c 41 57 73 2c 20 6c 69 6b 65 20 6c 61 63 6b 20 6f 66 20 61 20 73 74 69 63 6b
 79 20 62 69 74 2c 0 )
}
.field public static valuetype 'int8[]' $_1071 at $1072
.data $1072 = {
bytearray ( 54 68 65 20 70 72 6f 67 72 61 6d 20 61 74 74 65 6d 70 74 73 20 74 6f 20 64 69 73 63 72 69
 6d 69 6e 61 74 65 20 61 6d 6f 6e 67 0 )
}
.field public static valuetype 'int8[]' $_1066 at $1067
.data $1067 = {
bytearray ( 20 20 20 20 20 44 65 63 69 6d 61 6c 2d 42 69 6e 61 72 79 20 63 6f 6e 76 65 72 73 69 6f 6e
 20 69 73 20 4e 4f 54 20 59 45 54 20 74 65 73 74 65 64 20 66 6f 72 20 61 63 63 75 72 61 63
 79 2e 0 )
}
.field public static valuetype 'int8[]' $_1064 at $1065
.data $1065 = {
bytearray ( 20 20 20 20 20 45 78 74 72 61 2d 70 72 65 63 69 73 65 20 73 75 62 65 78 70 72 65 73 73 69
 6f 6e 73 20 61 72 65 20 72 65 76 65 61 6c 65 64 20 62 75 74 20 4e 4f 54 20 59 45 54 20 74
 65 73 74 65 64 2e 0 )
}
.field public static valuetype 'int8[]' $_1062 at $1063
.data $1063 = {
bytearray ( 20 20 20 20 20 53 71 72 74 20 69 73 20 74 65 73 74 65 64 2e 20 20 59 5e 58 20 69 73 20 6e
 6f 74 20 74 65 73 74 65 64 2e 0 )
}
.field public static valuetype 'int8[]' $_1060 at $1061
.data $1061 = {
bytearray ( 9 61 6e 64 20 66 6f 72 20 63 6f 6e 74 61 6d 69 6e 61 74 69 6f 6e 20 77 69 74 68 20 70 73
 65 75 64 6f 2d 7a 65 72 6f 73 2e 0 )
}
.field public static valuetype 'int8[]' $_1058 at $1059
.data $1059 = {
bytearray ( 20 20 20 20 20 43 6f 6d 70 61 72 69 73 69 6f 6e 73 20 61 72 65 20 63 68 65 63 6b 65 64 20
 66 6f 72 20 63 6f 6e 73 69 73 74 65 6e 63 79 20 77 69 74 68 20 73 75 62 74 72 61 63 74 69
 6f 6e 0 )
}
.field public static valuetype 'int8[]' $_1056 at $1057
.data $1057 = {
bytearray ( 20 20 20 20 20 56 30 20 20 74 65 6c 6c 73 2c 20 72 6f 75 67 68 6c 79 2c 20 77 68 65 74 68
 65 72 20 20 49 6e 66 69 6e 69 74 79 20 20 69 73 20 72 65 70 72 65 73 65 6e 74 65 64 2e 0 )
}
.field public static valuetype 'int8[]' $_1054 at $1055
.data $1055 = {
bytearray ( 20 20 20 20 20 56 20 3d 20 61 6e 20 6f 76 65 72 66 6c 6f 77 20 74 68 72 65 73 68 6f 6c 64
 2c 20 72 6f 75 67 68 6c 79 2e 0 )
}
.field public static valuetype 'int8[]' $_1052 at $1053
.data $1053 = {
bytearray ( 20 20 20 20 20 45 30 20 61 6e 64 20 50 73 65 75 64 6f 5a 65 72 6f 20 74 65 6c 6c 20 77 68
 65 74 68 65 72 20 75 6e 64 65 72 66 6c 6f 77 20 69 73 20 61 62 72 75 70 74 2c 20 67 72 61
 64 75 61 6c 2c 20 6f 72 20 66 75 7a 7a 79 2e 0 )
}
.field public static valuetype 'int8[]' $_1050 at $1051
.data $1051 = {
bytearray ( 20 20 20 20 20 55 6e 64 65 72 66 6c 6f 77 54 68 72 65 73 68 6f 6c 64 20 3d 20 61 6e 20 75
 6e 64 65 72 66 6c 6f 77 20 74 68 72 65 73 68 6f 6c 64 2e 0 )
}
.field public static valuetype 'int8[]' $_1048 at $1049
.data $1049 = {
bytearray ( 20 20 20 20 20 57 68 65 74 68 65 72 20 61 20 53 74 69 63 6b 79 20 42 69 74 20 75 73 65 64
 20 63 6f 72 72 65 63 74 6c 79 20 66 6f 72 20 72 6f 75 6e 64 69 6e 67 2e 0 )
}
.field public static valuetype 'int8[]' $_1046 at $1047
.data $1047 = {
bytearray ( 9 66 6f 72 20 4d 75 6c 74 2e 2c 20 44 69 76 2e 2c 20 41 64 64 2f 53 75 62 74 2e 20 61 6e
 64 20 53 71 72 74 2e 0 )
}
.field public static valuetype 'int8[]' $_1044 at $1045
.data $1045 = {
bytearray ( 20 20 20 20 20 57 68 65 74 68 65 72 20 61 72 69 74 68 6d 65 74 69 63 20 69 73 20 63 68 6f
 70 70 65 64 2c 20 63 6f 72 72 65 63 74 6c 79 20 72 6f 75 6e 64 65 64 2c 20 6f 72 20 73 6f
 6d 65 74 68 69 6e 67 20 65 6c 73 65 0 )
}
.field public static valuetype 'int8[]' $_1042 at $1043
.data $1043 = {
bytearray ( 20 20 20 20 20 41 64 65 71 75 61 63 79 20 6f 66 20 67 75 61 72 64 20 64 69 67 69 74 73 20
 66 6f 72 20 4d 75 6c 74 2e 2c 20 44 69 76 2e 20 61 6e 64 20 53 75 62 74 2e 0 )
}
.field public static valuetype 'int8[]' $_1040 at $1041
.data $1041 = {
bytearray ( 20 20 20 20 20 55 31 20 3d 20 31 2f 52 61 64 69 78 5e 50 72 65 63 69 73 69 6f 6e 20 3d 20
 4f 6e 65 20 55 6c 70 20 6f 66 20 6e 75 6d 62 65 72 73 20 61 20 6c 69 74 74 6c 65 20 6c 65
 73 73 20 74 68 61 6e 20 31 2e 30 20 2e 0 )
}
.field public static valuetype 'int8[]' $_1038 at $1039
.data $1039 = {
bytearray ( 9 28 4f 6e 65 55 6c 70 6e 69 74 20 69 6e 20 74 68 65 20 4c 61 73 74 20 50 6c 61 63 65 29
 20 6f 66 20 31 2e 30 30 30 78 78 78 20 2e 0 )
}
.field public static valuetype 'int8[]' $_1036 at $1037
.data $1037 = {
bytearray ( 20 20 20 20 20 55 32 20 3d 20 52 61 64 69 78 2f 52 61 64 69 78 5e 50 72 65 63 69 73 69 6f
 6e 20 3d 20 4f 6e 65 20 55 6c 70 0 )
}
.field public static valuetype 'int8[]' $_1034 at $1035
.data $1035 = {
bytearray ( 20 20 20 20 20 50 72 65 63 69 73 69 6f 6e 20 3d 20 6e 75 6d 62 65 72 20 6f 66 20 73 69 67
 6e 69 66 69 63 61 6e 74 20 64 69 67 69 74 73 20 63 61 72 72 69 65 64 2e 0 )
}
.field public static valuetype 'int8[]' $_1032 at $1033
.data $1033 = {
bytearray ( 20 20 20 20 20 52 61 64 69 78 20 3d 20 31 2c 20 32 2c 20 34 2c 20 38 2c 20 31 30 2c 20 31
 36 2c 20 31 30 30 2c 20 32 35 36 20 2e 2e 2e 0 )
}
.field public static valuetype 'int8[]' $_1030 at $1031
.data $1031 = {
bytearray ( 52 75 6e 6e 69 6e 67 20 74 68 69 73 20 70 72 6f 67 72 61 6d 20 73 68 6f 75 6c 64 20 72 65
 76 65 61 6c 20 74 68 65 73 65 20 63 68 61 72 61 63 74 65 72 69 73 74 69 63 73 3a 0 )
}
.field public static valuetype 'int8[]' $_1025 at $1026
.data $1026 = {
bytearray ( 9 4f 74 68 65 72 20 72 65 6c 65 76 61 6e 74 20 63 6f 6d 70 69 6c 65 72 20 6f 70 74 69 6f
 6e 73 3a 0 )
}
.field public static valuetype 'int8[]' $_1023 at $1024
.data $1024 = {
bytearray ( 9 4f 70 74 69 6d 69 7a 61 74 69 6f 6e 20 6c 65 76 65 6c 3a a 0 )
}
.field public static valuetype 'int8[]' $_1021 at $1022
.data $1022 = {
bytearray ( 9 43 6f 6d 70 69 6c 65 72 3a a 0 )
}
.field public static valuetype 'int8[]' $_1019 at $1020
.data $1020 = {
bytearray ( 9 43 6f 6d 70 75 74 65 72 3a a 0 )
}
.field public static valuetype 'int8[]' $_1017 at $1018
.data $1018 = {
bytearray ( 9 56 65 72 73 69 6f 6e 3a 9 31 30 20 46 65 62 72 75 61 72 79 20 31 39 38 39 3b 0 )
}
.field public static valuetype 'int8[]' $_1015 at $1016
.data $1016 = {
bytearray ( 9 50 72 65 63 69 73 69 6f 6e 3a 9 64 6f 75 62 6c 65 3b 0 )
}
.field public static valuetype 'int8[]' $_1013 at $1014
.data $1014 = {
bytearray ( 49 6e 20 64 6f 69 6e 67 20 73 6f 2c 20 70 6c 65 61 73 65 20 69 6e 63 6c 75 64 65 20 74 68
 65 20 66 6f 6c 6c 6f 77 69 6e 67 20 69 6e 66 6f 72 6d 61 74 69 6f 6e 3a 0 )
}
.field public static valuetype 'int8[]' $_1011 at $1012
.data $1012 = {
bytearray ( 9 53 61 6e 20 46 72 61 6e 63 69 73 63 6f 2c 20 43 41 20 39 34 31 34 33 2d 30 37 30 34 2c
 20 55 53 41 a 0 )
}
.field public static valuetype 'int8[]' $_1009 at $1010
.data $1010 = {
bytearray ( 9 55 6e 69 76 65 72 73 69 74 79 20 6f 66 20 43 61 6c 69 66 6f 72 6e 69 61 0 )
}
.field public static valuetype 'int8[]' $_1007 at $1008
.data $1008 = {
bytearray ( 9 43 6f 6d 70 75 74 65 72 20 43 65 6e 74 65 72 20 55 2d 37 36 0 )
}
.field public static valuetype 'int8[]' $_1005 at $1006
.data $1006 = {
bytearray ( 9 52 69 63 68 61 72 64 20 4b 61 72 70 69 6e 73 6b 69 0 )
}
.field public static valuetype 'int8[]' $_1003 at $1004
.data $1004 = {
bytearray ( 50 6c 65 61 73 65 20 73 65 6e 64 20 73 75 67 67 65 73 74 69 6f 6e 73 20 61 6e 64 20 69 6e
 74 65 72 65 73 74 69 6e 67 20 72 65 73 75 6c 74 73 20 74 6f 0 )
}
.field public static valuetype 'int8[]' $_1001 at $1002
.data $1002 = {
bytearray ( 63 6f 70 65 20 77 69 74 68 20 75 6e 61 6e 74 69 63 69 70 61 74 65 64 20 61 6e 64 20 6e 65
 77 6c 79 20 75 6e 63 6f 76 65 72 65 64 20 61 72 69 74 68 6d 65 74 69 63 20 70 61 74 68 6f
 6c 6f 67 69 65 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_999 at $1000
.data $1000 = {
bytearray ( 55 73 65 72 73 20 61 72 65 20 69 6e 76 69 74 65 64 20 74 6f 20 68 65 6c 70 20 64 65 62 75
 67 20 61 6e 64 20 61 75 67 6d 65 6e 74 20 74 68 69 73 20 70 72 6f 67 72 61 6d 20 73 6f 20
 69 74 20 77 69 6c 6c 0 )
}
.field public static valuetype 'int8[]' $_994 at $995
.data $995 = {
bytearray ( 41 6e 73 77 65 72 20 71 75 65 73 74 69 6f 6e 73 20 77 69 74 68 20 59 2c 20 79 2c 20 4e 20
 6f 72 20 6e 20 28 75 6e 6c 65 73 73 20 6f 74 68 65 72 77 69 73 65 20 69 6e 64 69 63 61 74
 65 64 29 2e a 0 )
}
.field public static valuetype 'int8[]' $_992 at $993
.data $993 = {
bytearray ( 61 6d 65 6e 64 20 69 74 20 74 6f 20 6d 61 6b 65 20 66 75 72 74 68 65 72 20 70 72 6f 67 72
 65 73 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_990 at $991
.data $991 = {
bytearray ( 70 72 6f 67 72 61 6d 20 61 6e 79 77 61 79 20 74 6f 20 73 65 65 20 68 6f 77 20 6d 61 6e 79
 20 6d 69 6c 65 73 74 6f 6e 65 73 20 69 74 20 70 61 73 73 65 73 2c 20 61 6e 64 20 74 68 65
 6e 0 )
}
.field public static valuetype 'int8[]' $_988 at $989
.data $989 = {
bytearray ( 77 61 72 6e 69 6e 67 2e 20 20 49 66 20 70 65 72 73 75 61 73 69 6f 6e 20 61 76 61 69 6c 73
 20 6e 61 75 67 68 74 2c 20 64 6f 6e 27 74 20 64 65 73 70 61 69 72 20 62 75 74 20 72 75 6e
 20 74 68 69 73 0 )
}
.field public static valuetype 'int8[]' $_986 at $987
.data $987 = {
bytearray ( 74 6f 20 70 65 72 73 65 76 65 72 65 20 77 69 74 68 20 61 20 73 75 72 72 6f 67 61 74 65 20
 76 61 6c 75 65 20 61 66 74 65 72 2c 20 70 65 72 68 61 70 73 2c 20 64 69 73 70 6c 61 79 69
 6e 67 20 73 6f 6d 65 0 )
}
.field public static valuetype 'int8[]' $_984 at $985
.data $985 = {
bytearray ( 65 72 72 6f 72 20 6c 69 6b 65 20 4f 76 65 72 2f 55 6e 64 65 72 66 6c 6f 77 20 6f 72 20 44
 69 76 69 73 69 6f 6e 20 62 79 20 5a 65 72 6f 20 6f 63 63 75 72 73 2c 20 62 75 74 20 72 61
 74 68 65 72 0 )
}
.field public static valuetype 'int8[]' $_982 at $983
.data $983 = {
bytearray ( 74 72 79 20 74 6f 20 70 65 72 73 75 61 64 65 20 74 68 65 20 63 6f 6d 70 75 74 65 72 20 4e
 4f 54 20 74 6f 20 74 65 72 6d 69 6e 61 74 65 20 65 78 65 63 75 74 69 6f 6e 20 77 68 65 6e
 20 61 6e 0 )
}
.field public static valuetype 'int8[]' $_980 at $981
.data $981 = {
bytearray ( 20 20 20 20 60 45 4e 44 20 4f 46 20 54 45 53 54 27 2c a 0 )
}
.field public static valuetype 'int8[]' $_978 at $979
.data $979 = {
bytearray ( 4c 65 73 74 20 74 68 69 73 20 70 72 6f 67 72 61 6d 20 73 74 6f 70 20 70 72 65 6d 61 74 75
 72 65 6c 79 2c 20 69 2e 65 2e 20 62 65 66 6f 72 65 20 64 69 73 70 6c 61 79 69 6e 67 a 0 )
}
.field public static valuetype 'int8[]' $_974 at $1135
.data $1135 = {
bytearray ( 25 73 a 0 )
}
.field public static valuetype 'int8[]' $_969 at $1136
.data $1136 = {
bytearray ( 20 20 20 50 4c 45 41 53 45 20 4e 4f 54 49 46 59 20 4b 41 52 50 49 4e 4b 53 49 21 a 0 )
}
.field public static valuetype 'int8[]' $_968 at $1137
.data $1137 = {
bytearray ( 25 73 20 74 65 73 74 20 61 70 70 65 61 72 73 20 74 6f 20 62 65 20 69 6e 63 6f 6e 73 69 73
 74 65 6e 74 2e 2e 2e a 0 )
}
.field public static valuetype 'int8[]' $_966 at $1138
.data $1138 = {
bytearray ( 9 64 69 66 66 65 72 73 20 66 72 6f 6d 20 5a 20 2a 20 31 20 3d 20 25 2e 31 37 65 a 0 )
}
.field public static valuetype 'int8[]' $_965 at $1139
.data $1139 = {
bytearray ( 9 43 6f 6d 70 61 72 69 73 6f 6e 20 61 6c 6c 65 67 65 73 20 74 68 61 74 20 31 20 2a 20 5a
 20 3d 20 25 2e 31 37 65 a 0 )
}
.field public static valuetype 'int8[]' $_964 at $1140
.data $1140 = {
bytearray ( 4d 75 6c 74 69 70 6c 69 63 61 74 69 6f 6e 20 64 6f 65 73 20 6e 6f 74 20 63 6f 6d 6d 75 74
 65 21 a 0 )
}
.field public static valuetype 'int8[]' $_961 at $1141
.data $1141 = {
bytearray ( 5a 20 2f 20 31 20 3d 20 25 2e 31 37 65 a 0 )
}
.field public static valuetype 'int8[]' $_958 at $1142
.data $1142 = {
bytearray ( 31 20 2a 20 5a 20 3d 3d 20 25 67 a 0 )
}
.field public static valuetype 'int8[]' $_955 at $1143
.data $1143 = {
bytearray ( 5a 20 2a 20 31 20 3d 20 25 2e 31 37 65 20 0 )
}
.field public static valuetype 'int8[]' $_952 at $1144
.data $1144 = {
bytearray ( 25 2e 31 37 65 a 9 63 6f 6d 70 61 72 65 73 20 64 69 66 66 65 72 65 6e 74 20 66 72 6f 6d
 20 20 0 )
}
.field public static valuetype 'int8[]' $_951 at $1145
.data $1145 = {
bytearray ( 57 68 61 74 20 70 72 69 6e 74 73 20 61 73 20 5a 20 3d 20 0 )
}
.field public static valuetype 'int8[]' $_946 at $1146
.data $1146 = {
bytearray ( 54 68 69 73 20 69 73 20 61 20 44 45 46 45 43 54 21 a 0 )
}
.field public static valuetype 'int8[]' $_945 at $1147
.data $1147 = {
bytearray ( 54 68 69 73 20 69 73 20 61 20 56 45 52 59 20 53 45 52 49 4f 55 53 20 44 45 46 45 43 54 21
 a 0 )
}
.field public static valuetype 'int8[]' $_941 at $1148
.data $1148 = {
bytearray ( 20 68 61 73 20 4e 4f 54 20 6a 75 73 74 20 62 65 65 6e 20 73 69 67 6e 61 6c 65 64 2e a 0 )
}
.field public static valuetype 'int8[]' $_940 at $1149
.data $1149 = {
bytearray ( 54 68 69 73 20 69 73 20 4f 2e 4b 2e 2c 20 70 72 6f 76 69 64 65 64 20 4f 76 65 72 2f 55 6e
 64 65 72 66 6c 6f 77 0 )
}
.field public static valuetype 'int8[]' $_937 at $1150
.data $1150 = {
bytearray ( 57 68 61 74 20 74 68 65 20 6d 61 63 68 69 6e 65 20 67 65 74 73 20 66 6f 72 20 28 5a 20 2b
 20 5a 29 20 2f 20 5a 20 69 73 20 20 25 2e 31 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_933 at $1151
.data $1151 = {
bytearray ( 28 5a 20 2b 20 5a 29 20 2f 20 5a 20 73 68 6f 75 6c 64 20 62 65 20 73 61 66 65 2e a 0 )
}
.field public static valuetype 'int8[]' $_932 at $1152
.data $1152 = {
bytearray ( 53 69 6e 63 65 20 63 6f 6d 70 61 72 69 73 6f 6e 20 64 65 6e 69 65 73 20 5a 20 3d 20 30 2c
 20 65 76 61 6c 75 61 74 69 6e 67 20 0 )
}
.field public static valuetype 'int8[]' $_928 at $1153
.data $1153 = {
bytearray ( 53 69 6d 69 6c 61 72 20 64 69 73 63 72 65 70 61 6e 63 69 65 73 20 68 61 76 65 20 6f 63 63
 75 72 72 65 64 20 25 64 20 74 69 6d 65 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_918 at $1154
.data $1154 = {
bytearray ( 9 9 74 68 65 79 20 64 69 66 66 65 72 20 62 79 20 25 2e 31 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_917 at $1155
.data $1155 = {
bytearray ( 9 77 68 69 63 68 20 63 6f 6d 70 61 72 65 64 20 75 6e 65 71 75 61 6c 20 74 6f 20 63 6f 72
 72 65 63 74 20 25 2e 31 37 65 20 3b a 0 )
}
.field public static valuetype 'int8[]' $_916 at $1156
.data $1156 = {
bytearray ( 9 79 69 65 6c 64 65 64 20 25 2e 31 37 65 3b a 0 )
}
.field public static valuetype 'int8[]' $_915 at $1157
.data $1157 = {
bytearray ( 9 28 25 2e 31 37 65 29 20 5e 20 28 25 2e 31 37 65 29 a 0 )
}
.field public static valuetype 'int8[]' $_914 at $1158
.data $1158 = {
bytearray ( 63 6f 6d 70 75 74 69 6e 67 a 0 )
}
.field public static valuetype 'int8[]' $_913 at $1159
.data $1159 = {
bytearray ( 57 41 52 4e 49 4e 47 3a 20 20 63 6f 6d 70 75 74 69 6e 67 a 0 )
}
.field public static valuetype 'int8[]' $_895 at $1160
.data $1160 = {
bytearray ( 9 69 6e 73 74 65 61 64 20 6f 66 20 63 6f 72 72 65 63 74 20 76 61 6c 75 65 20 30 20 2e a
 0 )
}
.field public static valuetype 'int8[]' $_894 at $1161
.data $1161 = {
bytearray ( 73 71 72 74 28 20 25 2e 31 37 65 29 20 2d 20 25 2e 31 37 65 20 20 3d 20 25 2e 31 37 65 a
 0 )
}
.field public static valuetype 'int8[]' $_884 at $1162
.data $1162 = {
bytearray ( 25 73 3a 20 20 25 73 0 )
}
.field public static valuetype 'int8[]' $_882 at $883
.data $883 = {
bytearray ( 46 4c 41 57 0 )
}
.field public static valuetype 'int8[]' $_880 at $881
.data $881 = {
bytearray ( 44 45 46 45 43 54 0 )
}
.field public static valuetype 'int8[]' $_878 at $879
.data $879 = {
bytearray ( 53 45 52 49 4f 55 53 20 44 45 46 45 43 54 0 )
}
.field public static valuetype 'int8[]' $_876 at $877
.data $877 = {
bytearray ( 46 41 49 4c 55 52 45 0 )
}
.field public static valuetype 'int8[]' $_869 at $1163
.data $1163 = {
bytearray ( 20 20 20 20 20 20 20 20 20 20 50 61 67 65 3a 20 25 64 a a 0 )
}
.field public static valuetype 'int8[]' $_868 at $1164
.data $1164 = {
bytearray ( a 44 69 61 67 6e 6f 73 69 73 20 72 65 73 75 6d 65 73 20 61 66 74 65 72 20 6d 69 6c 65 73
 74 6f 6e 65 20 4e 75 6d 62 65 72 20 25 64 0 )
}
.field public static valuetype 'int8[]' $_859 at $1165
.data $1165 = {
bytearray ( 45 4e 44 20 4f 46 20 54 45 53 54 2e a 0 )
}
.field public static valuetype 'int8[]' $_858 at $1166
.data $1166 = {
bytearray ( a 41 20 74 6f 74 61 6c 20 6f 66 20 25 64 20 66 6c 6f 61 74 69 6e 67 20 70 6f 69 6e 74 20
 65 78 63 65 70 74 69 6f 6e 73 20 77 65 72 65 20 72 65 67 69 73 74 65 72 65 64 2e a 0 )
}
.field public static valuetype 'int8[]' $_855 at $1167
.data $1167 = {
bytearray ( 54 68 65 20 61 72 69 74 68 6d 65 74 69 63 20 64 69 61 67 6e 6f 73 65 64 20 61 70 70 65 61
 72 73 20 74 6f 20 62 65 20 45 78 63 65 6c 6c 65 6e 74 21 a 0 )
}
.field public static valuetype 'int8[]' $_854 at $1168
.data $1168 = {
bytearray ( 20 64 75 72 69 6e 67 20 47 72 61 64 75 61 6c 20 55 6e 64 65 72 66 6c 6f 77 2e a 0 )
}
.field public static valuetype 'int8[]' $_853 at $1169
.data $1169 = {
bytearray ( 2c a 65 78 63 65 70 74 20 66 6f 72 20 70 6f 73 73 69 62 6c 79 20 44 6f 75 62 6c 65 20 52
 6f 75 6e 64 69 6e 67 0 )
}
.field public static valuetype 'int8[]' $_852 at $1170
.data $1170 = {
bytearray ( 2e a 0 )
}
.field public static valuetype 'int8[]' $_849 at $1171
.data $1171 = {
bytearray ( 38 35 34 0 )
}
.field public static valuetype 'int8[]' $_848 at $1172
.data $1172 = {
bytearray ( 37 35 34 0 )
}
.field public static valuetype 'int8[]' $_845 at $1173
.data $1173 = {
bytearray ( 74 68 65 20 70 72 6f 70 6f 73 65 64 20 49 45 45 45 20 73 74 61 6e 64 61 72 64 20 50 0 )
}
.field public static valuetype 'int8[]' $_844 at $1174
.data $1174 = {
bytearray ( 52 6f 75 6e 64 69 6e 67 20 61 70 70 65 61 72 73 20 74 6f 20 63 6f 6e 66 6f 72 6d 20 74 6f
 20 0 )
}
.field public static valuetype 'int8[]' $_841 at $1175
.data $1175 = {
bytearray ( 54 68 65 20 61 72 69 74 68 6d 65 74 69 63 20 64 69 61 67 6e 6f 73 65 64 20 73 65 65 6d 73
 20 53 61 74 69 73 66 61 63 74 6f 72 79 2e a 0 )
}
.field public static valuetype 'int8[]' $_835 at $1176
.data $1176 = {
bytearray ( 4e 6f 20 66 61 69 6c 75 72 65 73 2c 20 64 65 66 65 63 74 73 20 6e 6f 72 20 66 6c 61 77 73
 20 68 61 76 65 20 62 65 65 6e 20 64 69 73 63 6f 76 65 72 65 64 2e a 0 )
}
.field public static valuetype 'int8[]' $_834 at $1177
.data $1177 = {
bytearray ( 20 70 72 6f 67 72 61 6d 27 73 20 73 75 62 73 65 71 75 65 6e 74 20 64 69 61 67 6e 6f 73 65
 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_833 at $1178
.data $1178 = {
bytearray ( 50 6f 74 65 6e 74 69 61 6c 6c 79 20 66 61 74 61 6c 20 46 41 49 4c 55 52 45 20 6d 61 79 20
 68 61 76 65 20 73 70 6f 69 6c 65 64 20 74 68 69 73 0 )
}
.field public static valuetype 'int8[]' $_830 at $1179
.data $1179 = {
bytearray ( 75 6e 61 63 63 65 70 74 61 62 6c 65 20 53 65 72 69 6f 75 73 20 44 65 66 65 63 74 73 2e a
 0 )
}
.field public static valuetype 'int8[]' $_829 at $1180
.data $1180 = {
bytearray ( 54 68 65 20 61 72 69 74 68 6d 65 74 69 63 20 64 69 61 67 6e 6f 73 65 64 20 68 61 73 20 0 )
}
.field public static valuetype 'int8[]' $_826 at $1181
.data $1181 = {
bytearray ( 64 65 73 70 69 74 65 20 69 6e 63 6f 6e 76 65 6e 69 65 6e 74 20 44 65 66 65 63 74 73 2e a
 0 )
}
.field public static valuetype 'int8[]' $_825 at $1182
.data $1182 = {
bytearray ( 54 68 65 20 61 72 69 74 68 6d 65 74 69 63 20 64 69 61 67 6e 6f 73 65 64 20 6d 61 79 20 62
 65 20 41 63 63 65 70 74 61 62 6c 65 a 0 )
}
.field public static valuetype 'int8[]' $_822 at $1183
.data $1183 = {
bytearray ( 53 61 74 69 73 66 61 63 74 6f 72 79 20 74 68 6f 75 67 68 20 66 6c 61 77 65 64 2e a 0 )
}
.field public static valuetype 'int8[]' $_821 at $1184
.data $1184 = {
bytearray ( 54 68 65 20 61 72 69 74 68 6d 65 74 69 63 20 64 69 61 67 6e 6f 73 65 64 20 73 65 65 6d 73
 20 0 )
}
.field public static valuetype 'int8[]' $_816 at $1185
.data $1185 = {
bytearray ( 54 68 65 20 6e 75 6d 62 65 72 20 6f 66 20 20 25 2d 32 39 73 20 25 64 2e a 0 )
}
.field public static valuetype 'int8[]' $_808 at $809
.data $809 = {
bytearray ( 46 4c 41 57 73 20 20 64 69 73 63 6f 76 65 72 65 64 20 3d 0 )
}
.field public static valuetype 'int8[]' $_806 at $807
.data $807 = {
bytearray ( 44 45 46 45 43 54 73 20 20 64 69 73 63 6f 76 65 72 65 64 20 3d 0 )
}
.field public static valuetype 'int8[]' $_804 at $805
.data $805 = {
bytearray ( 53 45 52 49 4f 55 53 20 44 45 46 45 43 54 73 20 20 64 69 73 63 6f 76 65 72 65 64 20 3d 0 )
}
.field public static valuetype 'int8[]' $_802 at $803
.data $803 = {
bytearray ( 46 41 49 4c 55 52 45 73 20 20 65 6e 63 6f 75 6e 74 65 72 65 64 20 3d 0 )
}
.field public static valuetype 'int8[]' $_796 at $1186
.data $1186 = {
bytearray ( a 20 20 20 20 54 72 79 69 6e 67 20 74 6f 20 63 6f 6d 70 75 74 65 20 30 20 2f 20 30 20 70
 72 6f 64 75 63 65 73 20 2e 2e 2e 0 )
}
.field public static valuetype 'int8[]' $_795 at $1187
.data $1187 = {
bytearray ( 20 20 25 2e 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_792 at $1188
.data $1188 = {
bytearray ( 20 20 20 20 54 72 79 69 6e 67 20 74 6f 20 63 6f 6d 70 75 74 65 20 31 20 2f 20 30 20 70 72
 6f 64 75 63 65 73 20 2e 2e 2e 0 )
}
.field public static valuetype 'int8[]' $_791 at $1189
.data $1189 = {
bytearray ( 57 68 61 74 20 6d 65 73 73 61 67 65 20 61 6e 64 2f 6f 72 20 76 61 6c 75 65 73 20 64 6f 65
 73 20 44 69 76 69 73 69 6f 6e 20 62 79 20 5a 65 72 6f 20 70 72 6f 64 75 63 65 3f a 0 )
}
.field public static valuetype 'int8[]' $_789 at $1190
.data $1190 = {
bytearray ( 20 20 69 6e 73 74 65 61 64 2c 20 58 20 2f 20 58 20 2d 20 31 2f 32 20 2d 20 31 2f 32 20 3d
 20 25 2e 31 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_788 at $1191
.data $1191 = {
bytearray ( 20 20 58 20 2f 20 58 20 64 69 66 66 65 72 73 20 66 72 6f 6d 20 31 20 77 68 65 6e 20 58 20
 3d 20 25 2e 31 37 65 a 0 )
}
.field public static valuetype 'int8[]' $_783 at $1192
.data $1192 = {
bytearray ( 20 20 58 20 2f 20 58 20 20 74 72 61 70 73 20 77 68 65 6e 20 58 20 3d 20 25 67 a 0 )
}
.field public static valuetype 'int8[]' $_766 at $1193
.data $1193 = {
bytearray ( 69 73 20 74 6f 6f 20 66 61 72 20 66 72 6f 6d 20 31 2e a 0 )
}
.field public static valuetype 'int8[]' $_765 at $1194
.data $1194 = {
bytearray ( 20 75 6e 62 61 6c 61 6e 63 65 64 20 72 61 6e 67 65 3b 20 55 66 54 68 6f 6c 64 20 2a 20 56
 20 3d 20 25 2e 31 37 65 a 9 25 73 a 0 )
}
.field public static valuetype 'int8[]' $_764 at $1195
.data $1195 = {
bytearray ( 42 61 64 6c 79 0 )
}
.field public static valuetype 'int8[]' $_756 at $1196
.data $1196 = {
bytearray ( 20 69 73 20 74 6f 6f 20 66 61 72 20 66 72 6f 6d 20 73 71 72 74 28 5a 29 20 5e 20 32 20 28
 25 2e 31 37 65 29 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_755 at $1197
.data $1197 = {
bytearray ( 43 6f 6d 70 61 72 69 73 6f 6e 20 61 6c 6c 65 67 65 73 20 74 68 61 74 20 5a 20 3d 20 25 31
 37 65 a 0 )
}
.field public static valuetype 'int8[]' $_742 at $1198
.data $1198 = {
bytearray ( 20 69 73 20 74 6f 6f 20 66 61 72 20 66 72 6f 6d 20 73 71 72 74 28 5a 29 20 5e 20 32 20 3d
 20 25 2e 31 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_741 at $1199
.data $1199 = {
bytearray ( 43 6f 6d 70 61 72 69 73 6f 6e 20 61 6c 6c 65 67 65 73 20 74 68 61 74 20 77 68 61 74 20 70
 72 69 6e 74 73 20 61 73 20 5a 20 3d 20 25 2e 31 37 65 a 0 )
}
.field public static valuetype 'int8[]' $_721 at $1200
.data $1200 = {
bytearray ( 2b 2d 25 67 2c 20 2b 2d 25 67 a 61 6e 64 20 2b 2d 25 67 20 61 72 65 20 63 6f 6e 66 75 73
 65 64 20 62 79 20 4f 76 65 72 66 6c 6f 77 2e 0 )
}
.field public static valuetype 'int8[]' $_720 at $1201
.data $1201 = {
bytearray ( 43 6f 6d 70 61 72 69 73 6f 6e 73 20 69 6e 76 6f 6c 76 69 6e 67 20 0 )
}
.field public static valuetype 'int8[]' $_713 at $1202
.data $1202 = {
bytearray ( 61 62 6f 76 65 20 69 73 20 61 20 44 45 46 45 43 54 2e a 0 )
}
.field public static valuetype 'int8[]' $_712 at $1203
.data $1203 = {
bytearray ( 41 6e 79 20 6f 76 65 72 66 6c 6f 77 20 73 69 67 6e 61 6c 20 73 65 70 61 72 61 74 69 6e 67
 20 74 68 69 73 20 2a 20 66 72 6f 6d 20 74 68 65 20 6f 6e 65 a 0 )
}
.field public static valuetype 'int8[]' $_711 at $1204
.data $1204 = {
bytearray ( 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 6e 6f 72
 20 66 6f 72 20 56 20 2f 20 31 20 3d 20 25 2e 31 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_710 at $1205
.data $1205 = {
bytearray ( 4e 6f 20 4f 76 65 72 66 6c 6f 77 20 73 68 6f 75 6c 64 20 62 65 20 73 69 67 6e 61 6c 65 64
 20 66 6f 72 20 56 20 2a 20 31 20 3d 20 25 2e 31 37 65 a 0 )
}
.field public static valuetype 'int8[]' $_709 at $1206
.data $1206 = {
bytearray ( 54 68 65 72 65 20 69 73 20 6e 6f 20 73 61 74 75 72 61 74 69 6f 6e 20 76 61 6c 75 65 20 62
 65 63 61 75 73 65 20 74 68 65 20 73 79 73 74 65 6d 20 74 72 61 70 73 20 6f 6e 20 6f 76 65
 72 66 6c 6f 77 2e a 0 )
}
.field public static valuetype 'int8[]' $_708 at $1207
.data $1207 = {
bytearray ( 4f 76 65 72 66 6c 6f 77 20 73 61 74 75 72 61 74 65 73 20 61 74 20 56 30 20 3d 20 25 2e 31
 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_705 at $1208
.data $1208 = {
bytearray ( 4f 76 65 72 66 6c 6f 77 20 74 68 72 65 73 68 6f 6c 64 20 69 73 20 56 20 20 3d 20 25 2e 31
 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_696 at $1209
.data $1209 = {
bytearray ( 6f 76 65 72 66 6c 6f 77 20 70 61 73 74 20 25 2e 31 37 65 a 9 73 68 72 69 6e 6b 73 20 74
 6f 20 25 2e 31 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_693 at $1210
.data $1210 = {
bytearray ( 2d 28 2d 59 29 20 64 69 66 66 65 72 73 20 66 72 6f 6d 20 59 2e a 0 )
}
.field public static valuetype 'int8[]' $_692 at $1211
.data $1211 = {
bytearray ( 66 69 6e 64 73 20 61 20 0 )
}
.field public static valuetype 'int8[]' $_691 at $1212
.data $1212 = {
bytearray ( 53 65 65 6d 73 20 4f 2e 4b 2e a 0 )
}
.field public static valuetype 'int8[]' $_688 at $1213
.data $1213 = {
bytearray ( 54 72 79 69 6e 67 20 69 74 20 6f 6e 20 59 20 3d 20 25 2e 31 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_687 at $1214
.data $1214 = {
bytearray ( 43 61 6e 20 60 5a 20 3d 20 2d 59 27 20 6f 76 65 72 66 6c 6f 77 3f a 0 )
}
.field public static valuetype 'int8[]' $_680 at $1215
.data $1215 = {
bytearray ( 54 68 69 73 20 6d 61 79 20 67 65 6e 65 72 61 74 65 20 61 6e 20 65 72 72 6f 72 2e a 0 )
}
.field public static valuetype 'int8[]' $_679 at $1216
.data $1216 = {
bytearray ( 53 65 61 72 63 68 69 6e 67 20 66 6f 72 20 4f 76 65 72 66 6c 6f 77 20 74 68 72 65 73 68 6f
 6c 64 3a a 0 )
}
.field public static valuetype 'int8[]' $_677 at $1217
.data $1217 = {
bytearray ( 20 2e 2e 2e 20 6e 6f 20 64 69 73 63 72 65 70 61 6e 63 69 65 73 20 66 6f 75 6e 64 2e a 0 )
}
.field public static valuetype 'int8[]' $_669 at $1218
.data $1218 = {
bytearray ( 54 65 73 74 69 6e 67 20 70 6f 77 65 72 73 20 5a 5e 51 20 61 74 20 66 6f 75 72 20 6e 65 61
 72 6c 79 20 65 78 74 72 65 6d 65 20 76 61 6c 75 65 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_667 at $1219
.data $1219 = {
bytearray ( 41 63 63 75 72 61 63 79 20 73 65 65 6d 73 20 61 64 65 71 75 61 74 65 2e a 0 )
}
.field public static valuetype 'int8[]' $_660 at $1220
.data $1220 = {
bytearray ( 9 63 61 6c 63 75 6c 61 74 69 6f 6e 73 20 69 6e 76 6f 6c 76 69 6e 67 20 74 69 6e 79 20 69
 6e 74 65 72 65 73 74 20 72 61 74 65 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_659 at $1221
.data $1221 = {
bytearray ( 9 54 68 69 73 20 6d 75 63 68 20 65 72 72 6f 72 20 6d 61 79 20 73 70 6f 69 6c 20 66 69 6e
 61 6e 63 69 61 6c a 0 )
}
.field public static valuetype 'int8[]' $_658 at $1222
.data $1222 = {
bytearray ( 9 64 69 66 66 65 72 73 20 66 72 6f 6d 20 63 6f 72 72 65 63 74 20 76 61 6c 75 65 20 62 79
 20 25 2e 31 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_657 at $1223
.data $1223 = {
bytearray ( 9 28 31 20 2b 20 28 25 2e 31 37 65 29 20 5e 20 28 25 2e 31 37 65 29 3b a 0 )
}
.field public static valuetype 'int8[]' $_656 at $1224
.data $1224 = {
bytearray ( 20 25 2e 31 37 65 20 66 6f 72 a 0 )
}
.field public static valuetype 'int8[]' $_655 at $1225
.data $1225 = {
bytearray ( 43 61 6c 63 75 6c 61 74 65 64 0 )
}
.field public static valuetype 'int8[]' $_648 at $1226
.data $1226 = {
bytearray ( 54 65 73 74 69 6e 67 20 58 5e 28 28 58 20 2b 20 31 29 20 2f 20 28 58 20 2d 20 31 29 29 20
 76 73 2e 20 65 78 70 28 32 29 20 3d 20 25 2e 31 37 65 20 61 73 20 58 20 2d 3e 20 31 2e a
 0 )
}
.field public static valuetype 'int8[]' $_643 at $1227
.data $1227 = {
bytearray ( 54 68 69 73 20 63 6f 6d 70 75 74 65 64 20 76 61 6c 75 65 20 69 73 20 4f 2e 4b 2e a 0 )
}
.field public static valuetype 'int8[]' $_640 at $1228
.data $1228 = {
bytearray ( 20 20 20 74 68 72 65 73 68 6f 6c 64 20 3d 20 25 2e 31 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_639 at $1229
.data $1229 = {
bytearray ( 74 68 69 73 20 69 73 20 6e 6f 74 20 62 65 74 77 65 65 6e 20 30 20 61 6e 64 20 75 6e 64 65
 72 66 6c 6f 77 a 0 )
}
.field public static valuetype 'int8[]' $_635 at $1230
.data $1230 = {
bytearray ( 61 63 74 75 61 6c 6c 79 20 63 61 6c 63 75 6c 61 74 69 6e 67 20 79 69 65 6c 64 73 3a 20 25
 2e 31 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_634 at $1231
.data $1231 = {
bytearray ( 73 68 6f 75 6c 64 20 61 66 66 6c 69 63 74 20 74 68 65 20 65 78 70 72 65 73 73 69 6f 6e a
 9 28 25 2e 31 37 65 29 20 5e 20 28 25 2e 31 37 65 29 3b a 0 )
}
.field public static valuetype 'int8[]' $_633 at $1232
.data $1232 = {
bytearray ( 55 66 54 68 6f 6c 64 20 3d 20 28 25 2e 31 37 65 29 20 5e 20 28 25 2e 31 37 65 29 a 6f 6e
 6c 79 20 75 6e 64 65 72 66 6c 6f 77 20 0 )
}
.field public static valuetype 'int8[]' $_632 at $1233
.data $1233 = {
bytearray ( 53 69 6e 63 65 20 75 6e 64 65 72 66 6c 6f 77 20 6f 63 63 75 72 73 20 62 65 6c 6f 77 20 74
 68 65 20 74 68 72 65 73 68 6f 6c 64 a 0 )
}
.field public static valuetype 'int8[]' $_630 at $1234
.data $1234 = {
bytearray ( 52 61 6e 67 65 20 69 73 20 74 6f 6f 20 6e 61 72 72 6f 77 3b 20 55 31 5e 25 64 20 55 6e 64
 65 72 66 6c 6f 77 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_624 at $1235
.data $1235 = {
bytearray ( 6d 65 72 65 6c 79 20 72 6f 75 6e 64 6f 66 66 2e a 0 )
}
.field public static valuetype 'int8[]' $_623 at $1236
.data $1236 = {
bytearray ( 63 61 6c 63 75 6c 61 74 69 6f 6e 20 6d 61 79 20 73 75 66 66 65 72 20 6c 61 72 67 65 72 20
 52 65 6c 61 74 69 76 65 20 65 72 72 6f 72 20 74 68 61 6e 20 0 )
}
.field public static valuetype 'int8[]' $_622 at $1237
.data $1237 = {
bytearray ( 20 62 65 6c 6f 77 20 77 68 69 63 68 0 )
}
.field public static valuetype 'int8[]' $_621 at $1238
.data $1238 = {
bytearray ( 54 68 65 20 55 6e 64 65 72 66 6c 6f 77 20 74 68 72 65 73 68 6f 6c 64 20 69 73 20 25 2e 31
 37 65 2c 20 25 73 a 0 )
}
.field public static valuetype 'int8[]' $_620 at $1239
.data $1239 = {
bytearray ( 58 20 2f 20 5a 20 3d 20 31 20 2b 20 25 67 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_619 at $1240
.data $1240 = {
bytearray ( 58 20 2f 20 5a 20 66 61 69 6c 73 21 a 0 )
}
.field public static valuetype 'int8[]' $_616 at $1241
.data $1241 = {
bytearray ( 65 6e 63 6f 75 6e 74 65 72 20 44 69 76 69 73 69 6f 6e 20 62 79 20 5a 65 72 6f 20 61 6c 74
 68 6f 75 67 68 20 61 63 74 75 61 6c 6c 79 a 0 )
}
.field public static valuetype 'int8[]' $_615 at $1242
.data $1242 = {
bytearray ( 20 20 2e 2e 2e 20 28 66 28 58 29 20 2d 20 66 28 5a 29 29 20 2f 20 28 58 20 2d 20 5a 29 20
 2e 2e 2e a 0 )
}
.field public static valuetype 'int8[]' $_614 at $1243
.data $1243 = {
bytearray ( 20 20 20 20 69 66 20 28 58 20 3d 3d 20 5a 29 20 20 2e 2e 2e 20 20 65 6c 73 65 0 )
}
.field public static valuetype 'int8[]' $_613 at $1244
.data $1244 = {
bytearray ( 63 6f 6e 66 75 73 69 6f 6e 20 77 68 65 6e 20 69 6e 6e 6f 63 65 6e 74 20 73 74 61 74 65 6d
 65 6e 74 73 20 6c 69 6b 65 a 0 )
}
.field public static valuetype 'int8[]' $_612 at $1245
.data $1245 = {
bytearray ( 74 68 69 73 20 69 73 20 61 20 53 45 52 49 4f 55 53 20 44 45 46 45 43 54 a 74 68 61 74 20
 63 61 75 73 65 73 20 0 )
}
.field public static valuetype 'int8[]' $_611 at $1246
.data $1246 = {
bytearray ( 20 20 20 20 53 68 6f 75 6c 64 20 74 68 69 73 20 4e 4f 54 20 73 69 67 6e 61 6c 20 55 6e 64
 65 72 66 6c 6f 77 2c 20 0 )
}
.field public static valuetype 'int8[]' $_610 at $1247
.data $1247 = {
bytearray ( 79 65 74 20 58 20 2d 20 5a 20 79 69 65 6c 64 73 20 25 2e 31 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_609 at $1248
.data $1248 = {
bytearray ( 58 20 3d 20 25 2e 31 37 65 a 9 69 73 20 6e 6f 74 20 65 71 75 61 6c 20 74 6f 20 5a 20 3d
 20 25 2e 31 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_604 at $1249
.data $1249 = {
bytearray ( 55 6e 64 65 72 66 6c 6f 77 20 2f 20 55 66 54 68 6f 6c 64 20 66 61 69 6c 65 64 21 a 0 )
}
.field public static valuetype 'int8[]' $_593 at $1250
.data $1250 = {
bytearray ( 28 72 6f 75 6e 64 6f 66 66 20 69 6e 20 55 66 54 68 6f 6c 64 29 20 3c 20 45 30 2e a 0 )
}
.field public static valuetype 'int8[]' $_592 at $1251
.data $1251 = {
bytearray ( 55 6e 64 65 72 66 6c 6f 77 20 69 73 20 67 72 61 64 75 61 6c 3b 20 69 74 20 69 6e 63 75 72
 73 20 41 62 73 6f 6c 75 74 65 20 45 72 72 6f 72 20 3d a 0 )
}
.field public static valuetype 'int8[]' $_587 at $1252
.data $1252 = {
bytearray ( 7c 51 20 2d 20 59 7c 20 3d 20 25 2e 31 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_586 at $1253
.data $1253 = {
bytearray ( 70 72 69 6e 74 20 6f 75 74 20 61 73 20 51 20 3d 20 25 2e 31 37 65 2c 20 59 20 3d 20 25 2e
 31 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_585 at $1254
.data $1254 = {
bytearray ( 51 20 3d 3d 20 59 20 77 68 69 6c 65 20 64 65 6e 79 69 6e 67 20 74 68 61 74 20 7c 51 20 2d
 20 59 7c 20 3d 3d 20 30 3b 20 74 68 65 73 65 20 76 61 6c 75 65 73 a 0 )
}
.field public static valuetype 'int8[]' $_584 at $1255
.data $1255 = {
bytearray ( 55 6e 64 65 72 66 6c 6f 77 20 63 6f 6e 66 75 73 65 73 20 43 6f 6d 70 61 72 69 73 6f 6e 2c
 20 77 68 69 63 68 20 61 6c 6c 65 67 65 73 20 74 68 61 74 a 0 )
}
.field public static valuetype 'int8[]' $_582 at $1256
.data $1256 = {
bytearray ( 20 6f 72 20 65 6c 73 65 20 6d 75 6c 74 69 70 6c 69 63 61 74 69 6f 6e 20 67 65 74 73 20 74
 6f 6f 20 6d 61 6e 79 20 6c 61 73 74 20 64 69 67 69 74 73 20 77 72 6f 6e 67 2e a 0 )
}
.field public static valuetype 'int8[]' $_581 at $1257
.data $1257 = {
bytearray ( 20 63 6f 6d 69 6e 67 20 64 6f 77 6e 20 66 72 6f 6d 20 25 2e 31 37 65 a 0 )
}
.field public static valuetype 'int8[]' $_580 at $1258
.data $1258 = {
bytearray ( 61 70 70 72 6f 61 63 68 20 61 20 74 68 72 65 73 68 6f 6c 64 20 3d 20 25 2e 31 37 65 a 0 )
}
.field public static valuetype 'int8[]' $_579 at $1259
.data $1259 = {
bytearray ( 45 69 74 68 65 72 20 61 63 63 75 72 61 63 79 20 64 65 74 65 72 69 6f 72 61 74 65 73 20 61
 73 20 6e 75 6d 62 65 72 73 a 0 )
}
.field public static valuetype 'int8[]' $_567 at $1260
.data $1260 = {
bytearray ( 53 6d 61 6c 6c 65 73 74 20 73 74 72 69 63 74 6c 79 20 70 6f 73 69 74 69 76 65 20 6e 75 6d
 62 65 72 20 66 6f 75 6e 64 20 69 73 20 45 30 20 3d 20 25 67 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_566 at $1261
.data $1261 = {
bytearray ( 20 74 68 72 65 73 68 6f 6c 64 20 74 68 61 6e 20 70 72 6f 64 75 63 74 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_565 at $1262
.data $1262 = {
bytearray ( 44 69 66 66 65 72 65 6e 63 65 20 75 6e 64 65 72 66 6c 6f 77 73 20 61 74 20 61 20 68 69 67
 68 65 72 0 )
}
.field public static valuetype 'int8[]' $_562 at $1263
.data $1263 = {
bytearray ( 20 74 68 72 65 73 68 6f 6c 64 20 74 68 61 6e 20 64 69 66 66 65 72 65 6e 63 65 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_561 at $1264
.data $1264 = {
bytearray ( 50 72 6f 64 75 63 74 73 20 75 6e 64 65 72 66 6c 6f 77 20 61 74 20 61 20 68 69 67 68 65 72
 0 )
}
.field public static valuetype 'int8[]' $_553 at $1265
.data $1265 = {
bytearray ( 76 61 6c 75 65 20 50 73 65 75 64 6f 5a 65 72 6f 20 74 68 61 74 20 70 72 69 6e 74 73 20 6f
 75 74 20 61 73 20 25 67 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_552 at $1266
.data $1266 = {
bytearray ( 55 6e 64 65 72 66 6c 6f 77 20 63 61 6e 20 73 74 69 63 6b 20 61 74 20 61 6e 20 61 6c 6c 65
 67 65 64 6c 79 20 70 6f 73 69 74 69 76 65 a 0 )
}
.field public static valuetype 'int8[]' $_551 at $1267
.data $1267 = {
bytearray ( 70 6f 73 69 74 69 76 65 2c 20 69 73 6e 27 74 3b 20 69 74 20 70 72 69 6e 74 73 20 6f 75 74
 20 61 73 20 20 25 67 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_550 at $1268
.data $1268 = {
bytearray ( 42 75 74 20 2d 50 73 65 75 64 6f 5a 65 72 6f 2c 20 77 68 69 63 68 20 73 68 6f 75 6c 64 20
 62 65 a 0 )
}
.field public static valuetype 'int8[]' $_547 at $1269
.data $1269 = {
bytearray ( 50 73 65 75 64 6f 5a 65 72 6f 20 74 68 61 74 20 70 72 69 6e 74 73 20 6f 75 74 20 61 73 3a
 20 25 67 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_546 at $1270
.data $1270 = {
bytearray ( 61 6c 6c 65 67 65 64 6c 79 20 6e 65 67 61 74 69 76 65 20 76 61 6c 75 65 a 0 )
}
.field public static valuetype 'int8[]' $_545 at $1271
.data $1271 = {
bytearray ( 50 6f 73 69 74 69 76 65 20 65 78 70 72 65 73 73 69 6f 6e 73 20 63 61 6e 20 75 6e 64 65 72
 66 6c 6f 77 20 74 6f 20 61 6e a 0 )
}
.field public static valuetype 'int8[]' $_532 at $1272
.data $1272 = {
bytearray ( 6d 75 6c 74 69 70 6c 69 63 61 74 69 6f 6e 20 67 65 74 73 20 74 6f 6f 20 6d 61 6e 79 20 6c
 61 73 74 20 64 69 67 69 74 73 20 77 72 6f 6e 67 2e a 0 )
}
.field public static valuetype 'int8[]' $_508 at $1273
.data $1273 = {
bytearray ( 53 65 65 6b 69 6e 67 20 55 6e 64 65 72 66 6c 6f 77 20 74 68 72 65 73 68 6f 6c 64 73 20 55
 66 54 68 6f 6c 64 20 61 6e 64 20 45 30 2e a 0 )
}
.field public static valuetype 'int8[]' $_504 at $1274
.data $1274 = {
bytearray ( 2e 2e 2e 20 6e 6f 20 64 69 73 63 72 65 70 61 6e 63 69 73 20 66 6f 75 6e 64 2e a 0 )
}
.field public static valuetype 'int8[]' $_501 at $1275
.data $1275 = {
bytearray ( 9 69 6e 76 6f 6c 76 69 6e 67 20 69 6e 74 65 72 65 73 74 20 72 61 74 65 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_500 at $1276
.data $1276 = {
bytearray ( 45 72 72 6f 72 73 20 6c 69 6b 65 20 74 68 69 73 20 6d 61 79 20 69 6e 76 61 6c 69 64 61 74
 65 20 66 69 6e 61 6e 63 69 61 6c 20 63 61 6c 63 75 6c 61 74 69 6f 6e 73 a 0 )
}
.field public static valuetype 'int8[]' $_476 at $1277
.data $1277 = {
bytearray ( 54 65 73 74 69 6e 67 20 70 6f 77 65 72 73 20 5a 5e 69 20 66 6f 72 20 73 6d 61 6c 6c 20 49
 6e 74 65 67 65 72 73 20 5a 20 61 6e 64 20 69 2e a 0 )
}
.field public static valuetype 'int8[]' $_472 at $1278
.data $1278 = {
bytearray ( 73 71 72 74 20 67 65 74 73 20 74 6f 6f 20 6d 61 6e 79 20 6c 61 73 74 20 64 69 67 69 74 73
 20 77 72 6f 6e 67 0 )
}
.field public static valuetype 'int8[]' $_470 at $1279
.data $1279 = {
bytearray ( 74 6f 20 25 2e 37 65 20 75 6c 70 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_469 at $1280
.data $1280 = {
bytearray ( 4f 62 73 65 72 76 65 64 20 65 72 72 6f 72 73 20 72 75 6e 20 66 72 6f 6d 20 25 2e 37 65 20
 0 )
}
.field public static valuetype 'int8[]' $_468 at $1281
.data $1281 = {
bytearray ( 53 71 75 61 72 65 20 72 6f 6f 74 20 69 73 20 6e 65 69 74 68 65 72 20 63 68 6f 70 70 65 64
 20 6e 6f 72 20 63 6f 72 72 65 63 74 6c 79 20 72 6f 75 6e 64 65 64 2e a 0 )
}
.field public static valuetype 'int8[]' $_465 at $1282
.data $1282 = {
bytearray ( 53 71 75 61 72 65 20 72 6f 6f 74 20 61 70 70 65 61 72 73 20 74 6f 20 62 65 20 63 68 6f 70
 70 65 64 2e a 0 )
}
.field public static valuetype 'int8[]' $_460 at $1283
.data $1283 = {
bytearray ( 53 71 75 61 72 65 20 72 6f 6f 74 20 61 70 70 65 61 72 73 20 74 6f 20 62 65 20 63 6f 72 72
 65 63 74 6c 79 20 72 6f 75 6e 64 65 64 2e a 0 )
}
.field public static valuetype 'int8[]' $_455 at $1284
.data $1284 = {
bytearray ( 20 66 61 69 6c 73 20 74 65 73 74 20 77 68 65 74 68 65 72 20 73 71 72 74 20 72 6f 75 6e 64
 73 20 6f 72 20 63 68 6f 70 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_454 at $1285
.data $1285 = {
bytearray ( 52 61 64 69 78 5e 50 72 65 63 69 73 69 6f 6e 20 3d 20 25 2e 37 65 a 0 )
}
.field public static valuetype 'int8[]' $_453 at $1286
.data $1286 = {
bytearray ( 41 6e 6f 6d 61 6c 6f 75 73 20 61 72 69 74 68 6d 65 74 69 63 20 77 69 74 68 20 49 6e 74 65
 67 65 72 20 3c 20 0 )
}
.field public static valuetype 'int8[]' $_413 at $1287
.data $1287 = {
bytearray ( 54 65 73 74 69 6e 67 20 77 68 65 74 68 65 72 20 73 71 72 74 20 69 73 20 72 6f 75 6e 64 65
 64 20 6f 72 20 63 68 6f 70 70 65 64 2e a 0 )
}
.field public static valuetype 'int8[]' $_389 at $1288
.data $1288 = {
bytearray ( 73 71 72 74 28 58 29 20 69 73 20 6e 6f 6e 2d 6d 6f 6e 6f 74 6f 6e 69 63 20 66 6f 72 20 58
 20 6e 65 61 72 20 25 2e 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_388 at $1289
.data $1289 = {
bytearray ( 73 71 72 74 20 68 61 73 20 70 61 73 73 65 64 20 61 20 74 65 73 74 20 66 6f 72 20 4d 6f 6e
 6f 74 6f 6e 69 63 69 74 79 2e a 0 )
}
.field public static valuetype 'int8[]' $_370 at $1290
.data $1290 = {
bytearray ( 54 65 73 74 20 66 6f 72 20 73 71 72 74 20 6d 6f 6e 6f 74 6f 6e 69 63 69 74 79 2e a 0 )
}
.field public static valuetype 'int8[]' $_359 at $1291
.data $1291 = {
bytearray ( 54 65 73 74 69 6e 67 20 69 66 20 73 71 72 74 28 58 20 2a 20 58 29 20 3d 3d 20 58 20 66 6f
 72 20 25 64 20 49 6e 74 65 67 65 72 73 20 58 2e a 0 )
}
.field public static valuetype 'int8[]' $_354 at $1292
.data $1292 = {
bytearray ( 53 71 75 61 72 65 20 72 6f 6f 74 20 6f 66 20 30 2e 30 2c 20 2d 30 2e 30 20 6f 72 20 31 2e
 30 20 77 72 6f 6e 67 0 )
}
.field public static valuetype 'int8[]' $_352 at $1293
.data $1293 = {
bytearray ( a 52 75 6e 6e 69 6e 67 20 74 65 73 74 20 6f 66 20 73 71 75 61 72 65 20 72 6f 6f 74 28 78
 29 2e a 0 )
}
.field public static valuetype 'int8[]' $_350 at $1294
.data $1294 = {
bytearray ( 20 20 20 20 20 4e 6f 20 66 61 69 6c 75 72 65 73 20 66 6f 75 6e 64 20 69 6e 20 25 64 20 69
 6e 74 65 67 65 72 20 70 61 69 72 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_349 at $1295
.data $1295 = {
bytearray ( 58 20 2a 20 59 20 3d 3d 20 59 20 2a 20 58 20 74 72 69 61 6c 20 66 61 69 6c 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_339 at $1296
.data $1296 = {
bytearray ( 54 65 73 74 69 6e 67 20 6f 6e 20 25 64 20 72 61 6e 64 6f 6d 20 70 61 69 72 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_338 at $1297
.data $1297 = {
bytearray ( 44 6f 65 73 20 4d 75 6c 74 69 70 6c 69 63 61 74 69 6f 6e 20 63 6f 6d 6d 75 74 65 3f 20 20
 0 )
}
.field public static valuetype 'int8[]' $_334 at $1298
.data $1298 = {
bytearray ( 6c 61 63 6b 28 73 29 20 6f 66 20 67 75 61 72 64 20 64 69 67 69 74 73 20 6f 72 20 66 61 69
 6c 75 72 65 28 73 29 20 74 6f 20 63 6f 72 72 65 63 74 6c 79 20 72 6f 75 6e 64 20 6f 72 20
 63 68 6f 70 a 28 6e 6f 74 65 64 20 61 62 6f 76 65 29 20 63 6f 75 6e 74 20 61 73 20 6f 6e
 65 20 66 6c 61 77 20 69 6e 20 74 68 65 20 66 69 6e 61 6c 20 74 61 6c 6c 79 20 62 65 6c 6f
 77 0 )
}
.field public static valuetype 'int8[]' $_332 at $1299
.data $1299 = {
bytearray ( 53 74 69 63 6b 79 20 62 69 74 20 75 73 65 64 20 69 6e 63 6f 72 72 65 63 74 6c 79 20 6f 72
 20 6e 6f 74 20 61 74 20 61 6c 6c 2e a 0 )
}
.field public static valuetype 'int8[]' $_331 at $1300
.data $1300 = {
bytearray ( 53 74 69 63 6b 79 20 62 69 74 20 61 70 70 61 72 65 6e 74 6c 79 20 75 73 65 64 20 63 6f 72
 72 65 63 74 6c 79 2e a 0 )
}
.field public static valuetype 'int8[]' $_314 at $1301
.data $1301 = {
bytearray ( 43 68 65 63 6b 69 6e 67 20 66 6f 72 20 73 74 69 63 6b 79 20 62 69 74 2e a 0 )
}
.field public static valuetype 'int8[]' $_311 at $1302
.data $1302 = {
bytearray ( 28 58 20 2d 20 59 29 20 2b 20 28 59 20 2d 20 58 29 20 69 73 20 6e 6f 6e 20 7a 65 72 6f 21
 a 0 )
}
.field public static valuetype 'int8[]' $_308 at $1303
.data $1303 = {
bytearray ( 41 64 64 69 74 69 6f 6e 2f 53 75 62 74 72 61 63 74 69 6f 6e 20 6e 65 69 74 68 65 72 20 72
 6f 75 6e 64 73 20 6e 6f 72 20 63 68 6f 70 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_307 at $1304
.data $1304 = {
bytearray ( 41 64 64 2f 53 75 62 74 72 61 63 74 0 )
}
.field public static valuetype 'int8[]' $_304 at $1305
.data $1305 = {
bytearray ( 41 64 64 69 74 69 6f 6e 2f 53 75 62 74 72 61 63 74 69 6f 6e 20 61 70 70 65 61 72 73 20 74
 6f 20 72 6f 75 6e 64 20 63 6f 72 72 65 63 74 6c 79 2e a 0 )
}
.field public static valuetype 'int8[]' $_297 at $1306
.data $1306 = {
bytearray ( 41 64 64 2f 53 75 62 74 72 61 63 74 20 61 70 70 65 61 72 73 20 74 6f 20 62 65 20 63 68 6f
 70 70 65 64 2e a 0 )
}
.field public static valuetype 'int8[]' $_292 at $1307
.data $1307 = {
bytearray ( 49 6e 63 6f 6d 70 6c 65 74 65 20 63 61 72 72 79 2d 70 72 6f 70 61 67 61 74 69 6f 6e 20 69
 6e 20 41 64 64 69 74 69 6f 6e 0 )
}
.field public static valuetype 'int8[]' $_287 at $1308
.data $1308 = {
bytearray ( 52 61 64 69 78 20 2a 20 28 20 31 20 2f 20 52 61 64 69 78 20 29 20 64 69 66 66 65 72 73 20
 66 72 6f 6d 20 31 0 )
}
.field public static valuetype 'int8[]' $_285 at $1309
.data $1309 = {
bytearray ( 2f 20 69 73 20 6e 65 69 74 68 65 72 20 63 68 6f 70 70 65 64 20 6e 6f 72 20 63 6f 72 72 65
 63 74 6c 79 20 72 6f 75 6e 64 65 64 2e a 0 )
}
.field public static valuetype 'int8[]' $_282 at $1310
.data $1310 = {
bytearray ( 44 69 76 69 73 69 6f 6e 20 61 70 70 65 61 72 73 20 74 6f 20 63 68 6f 70 2e a 0 )
}
.field public static valuetype 'int8[]' $_279 at $1311
.data $1311 = {
bytearray ( 44 69 76 69 73 69 6f 6e 0 )
}
.field public static valuetype 'int8[]' $_276 at $1312
.data $1312 = {
bytearray ( 44 69 76 69 73 69 6f 6e 20 61 70 70 65 61 72 73 20 74 6f 20 72 6f 75 6e 64 20 63 6f 72 72
 65 63 74 6c 79 2e a 0 )
}
.field public static valuetype 'int8[]' $_270 at $1313
.data $1313 = {
bytearray ( 4d 75 6c 74 69 70 6c 69 63 61 74 69 6f 6e 0 )
}
.field public static valuetype 'int8[]' $_267 at $1314
.data $1314 = {
bytearray ( 2a 20 69 73 20 6e 65 69 74 68 65 72 20 63 68 6f 70 70 65 64 20 6e 6f 72 20 63 6f 72 72 65
 63 74 6c 79 20 72 6f 75 6e 64 65 64 2e a 0 )
}
.field public static valuetype 'int8[]' $_266 at $1315
.data $1315 = {
bytearray ( 4d 75 6c 74 69 70 6c 69 63 61 74 69 6f 6e 20 61 70 70 65 61 72 73 20 74 6f 20 63 68 6f 70
 2e a 0 )
}
.field public static valuetype 'int8[]' $_263 at $1316
.data $1316 = {
bytearray ( 4d 75 6c 74 69 70 6c 69 63 61 74 69 6f 6e 20 61 70 70 65 61 72 73 20 74 6f 20 72 6f 75 6e
 64 20 63 6f 72 72 65 63 74 6c 79 2e a 0 )
}
.field public static valuetype 'int8[]' $_253 at $1317
.data $1317 = {
bytearray ( 58 20 2a 20 28 31 2f 58 29 20 64 69 66 66 65 72 73 20 66 72 6f 6d 20 31 0 )
}
.field public static valuetype 'int8[]' $_234 at $1318
.data $1318 = {
bytearray ( 43 68 65 63 6b 69 6e 67 20 72 6f 75 6e 64 69 6e 67 20 6f 6e 20 6d 75 6c 74 69 70 6c 79 2c
 20 64 69 76 69 64 65 20 61 6e 64 20 61 64 64 2f 73 75 62 74 72 61 63 74 2e a 0 )
}
.field public static valuetype 'int8[]' $_232 at $1319
.data $1319 = {
bytearray ( 20 20 20 20 20 2a 2c 20 2f 2c 20 61 6e 64 20 2d 20 61 70 70 65 61 72 20 74 6f 20 68 61 76
 65 20 67 75 61 72 64 20 64 69 67 69 74 73 2c 20 61 73 20 74 68 65 79 20 73 68 6f 75 6c 64
 2e a 0 )
}
.field public static valuetype 'int8[]' $_229 at $1320
.data $1320 = {
bytearray ( 20 20 2e 2e 2e 20 20 69 66 20 28 58 20 3d 3d 20 31 2e 30 29 20 7b 2e 2e 2e 2e 2e 7d 20 65
 6c 73 65 20 7b 2e 2e 2e 2f 28 58 2d 31 2e 30 29 2e 2e 2e 7d a 0 )
}
.field public static valuetype 'int8[]' $_228 at $1321
.data $1321 = {
bytearray ( 20 20 73 75 63 68 20 70 72 65 63 61 75 74 69 6f 6e 73 20 61 67 61 69 6e 73 74 20 64 69 76
 69 73 69 6f 6e 20 62 79 20 7a 65 72 6f 20 61 73 a 0 )
}
.field public static valuetype 'int8[]' $_227 at $1322
.data $1322 = {
bytearray ( 20 20 73 75 62 74 72 61 63 74 69 6f 6e 20 79 69 65 6c 64 73 20 20 28 31 2d 55 31 29 20 2d
 20 31 20 3d 20 30 20 2c 20 74 68 65 72 65 62 79 20 76 69 74 69 61 74 69 6e 67 a 0 )
}
.field public static valuetype 'int8[]' $_226 at $1323
.data $1323 = {
bytearray ( 63 6f 6d 70 61 72 69 73 6f 6e 20 61 6c 6c 65 67 65 73 20 20 28 31 2d 55 31 29 20 3c 20 31
 20 20 61 6c 74 68 6f 75 67 68 a 0 )
}
.field public static valuetype 'int8[]' $_223 at $1324
.data $1324 = {
bytearray ( 2d 20 6c 61 63 6b 73 20 47 75 61 72 64 20 44 69 67 69 74 2c 20 73 6f 20 63 61 6e 63 65 6c
 6c 61 74 69 6f 6e 20 69 73 20 6f 62 73 63 75 72 65 64 0 )
}
.field public static valuetype 'int8[]' $_218 at $1325
.data $1325 = {
bytearray ( 2a 20 61 6e 64 2f 6f 72 20 2f 20 67 65 74 73 20 74 6f 6f 20 6d 61 6e 79 20 6c 61 73 74 20
 64 69 67 69 74 73 20 77 72 6f 6e 67 0 )
}
.field public static valuetype 'int8[]' $_214 at $1326
.data $1326 = {
bytearray ( 43 6f 6d 70 75 74 65 64 20 76 61 6c 75 65 20 6f 66 20 31 2f 31 2e 30 30 30 2e 2e 31 20 3e
 3d 20 31 0 )
}
.field public static valuetype 'int8[]' $_212 at $1327
.data $1327 = {
bytearray ( 44 69 76 69 73 69 6f 6e 20 6c 61 63 6b 73 20 61 20 47 75 61 72 64 20 44 69 67 69 74 2c 20
 73 6f 20 58 2f 31 20 21 3d 20 58 0 )
}
.field public static valuetype 'int8[]' $_207 at $1328
.data $1328 = {
bytearray ( 44 69 76 69 73 69 6f 6e 20 6c 61 63 6b 73 20 61 20 47 75 61 72 64 20 44 69 67 69 74 2c 20
 73 6f 20 65 72 72 6f 72 20 63 61 6e 20 65 78 63 65 65 64 20 31 20 75 6c 70 a 6f 72 20 20
 31 2f 33 20 20 61 6e 64 20 20 33 2f 39 20 20 61 6e 64 20 20 39 2f 32 37 20 6d 61 79 20 64
 69 73 61 67 72 65 65 0 )
}
.field public static valuetype 'int8[]' $_203 at $1329
.data $1329 = {
bytearray ( 2a 20 67 65 74 73 20 74 6f 6f 20 6d 61 6e 79 20 66 69 6e 61 6c 20 64 69 67 69 74 73 20 77
 72 6f 6e 67 2e a 0 )
}
.field public static valuetype 'int8[]' $_201 at $1330
.data $1330 = {
bytearray ( 2a 20 6c 61 63 6b 73 20 61 20 47 75 61 72 64 20 44 69 67 69 74 2c 20 73 6f 20 31 2a 58 20
 21 3d 20 58 0 )
}
.field public static valuetype 'int8[]' $_198 at $1331
.data $1331 = {
bytearray ( a 43 68 65 63 6b 69 6e 67 20 66 6f 72 20 67 75 61 72 64 20 64 69 67 69 74 20 69 6e 20 2a
 2c 20 2f 2c 20 61 6e 64 20 2d 2e a 0 )
}
.field public static valuetype 'int8[]' $_197 at $1332
.data $1332 = {
bytearray ( 53 75 62 74 72 61 63 74 69 6f 6e 20 61 70 70 65 61 72 73 20 74 6f 20 62 65 20 6e 6f 72 6d
 61 6c 69 7a 65 64 2c 20 61 73 20 69 74 20 73 68 6f 75 6c 64 20 62 65 2e 0 )
}
.field public static valuetype 'int8[]' $_192 at $1333
.data $1333 = {
bytearray ( 53 75 62 74 72 61 63 74 69 6f 6e 20 69 73 20 6e 6f 74 20 6e 6f 72 6d 61 6c 69 7a 65 64 20
 58 3d 59 2c 58 2b 5a 20 21 3d 20 59 2b 5a 21 0 )
}
.field public static valuetype 'int8[]' $_187 at $1334
.data $1334 = {
bytearray ( 72 6f 75 67 68 6c 79 20 25 67 20 65 78 74 72 61 20 73 69 67 6e 69 66 69 63 61 6e 74 20 64
 65 63 69 6d 61 6c 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_186 at $1335
.data $1335 = {
bytearray ( 70 72 65 63 69 73 65 6c 79 20 77 69 74 68 20 61 62 6f 75 74 20 25 67 20 65 78 74 72 61 20
 42 2d 64 69 67 69 74 73 2c 20 69 2e 65 2e a 0 )
}
.field public static valuetype 'int8[]' $_185 at $1336
.data $1336 = {
bytearray ( 53 6f 6d 65 20 73 75 62 65 78 70 72 65 73 73 69 6f 6e 73 20 61 70 70 65 61 72 20 74 6f 20
 62 65 20 63 61 6c 63 75 6c 61 74 65 64 20 65 78 74 72 61 a 0 )
}
.field public static valuetype 'int8[]' $_179 at $1337
.data $1337 = {
bytearray ( 6f 66 20 61 6e a 65 78 74 72 61 2d 70 72 65 63 69 73 69 6f 6e 0 )
}
.field public static valuetype 'int8[]' $_178 at $1338
.data $1338 = {
bytearray ( 5a 31 20 3d 20 25 2e 37 65 2c 20 6f 72 20 5a 32 20 3d 20 25 2e 37 65 20 0 )
}
.field public static valuetype 'int8[]' $_177 at $1339
.data $1339 = {
bytearray ( 2c 20 6f 72 20 65 78 61 63 74 20 72 61 74 69 6f 6e 61 6c 20 61 72 69 74 68 6d 65 74 69 63
 20 61 20 72 65 73 75 6c 74 a 0 )
}
.field public static valuetype 'int8[]' $_176 at $1340
.data $1340 = {
bytearray ( 42 65 63 61 75 73 65 20 6f 66 20 75 6e 75 73 75 61 6c 20 52 61 64 69 78 20 3d 20 25 66 0 )
}
.field public static valuetype 'int8[]' $_172 at $1341
.data $1341 = {
bytearray ( 9 55 32 20 3d 20 25 2e 37 65 2c 20 5a 32 20 2d 20 55 32 20 3d 20 25 2e 37 65 a 0 )
}
.field public static valuetype 'int8[]' $_171 at $1342
.data $1342 = {
bytearray ( 9 55 31 20 3d 20 25 2e 37 65 2c 20 5a 31 20 2d 20 55 31 20 3d 20 25 2e 37 65 a 0 )
}
.field public static valuetype 'int8[]' $_170 at $1343
.data $1343 = {
bytearray ( 50 72 65 63 69 73 69 6f 6e 0 )
}
.field public static valuetype 'int8[]' $_169 at $1344
.data $1344 = {
bytearray ( 0 )
}
.field public static valuetype 'int8[]' $_162 at $1345
.data $1345 = {
bytearray ( 54 68 61 74 20 66 65 61 74 75 72 65 20 69 73 20 6e 6f 74 20 74 65 73 74 65 64 20 66 75 72
 74 68 65 72 20 62 79 20 74 68 69 73 20 70 72 6f 67 72 61 6d 2e a 0 )
}
.field public static valuetype 'int8[]' $_157 at $1346
.data $1346 = {
bytearray ( 50 6f 73 73 69 62 6c 79 20 73 6f 6d 65 20 70 61 72 74 20 6f 66 20 74 68 69 73 0 )
}
.field public static valuetype 'int8[]' $_156 at $1347
.data $1347 = {
bytearray ( 62 79 20 65 78 74 72 61 2d 70 72 65 63 69 73 65 20 65 76 61 6c 75 61 74 69 6f 6e 20 6f 66
 20 61 72 69 74 68 6d 65 74 69 63 20 73 75 62 65 78 70 72 65 73 73 69 6f 6e 73 2e a 0 )
}
.field public static valuetype 'int8[]' $_155 at $1348
.data $1348 = {
bytearray ( 61 72 65 20 73 79 6d 70 74 6f 6d 73 20 6f 66 20 69 6e 63 6f 6e 73 69 73 74 65 6e 63 69 65
 73 20 69 6e 74 72 6f 64 75 63 65 64 a 0 )
}
.field public static valuetype 'int8[]' $_154 at $1349
.data $1349 = {
bytearray ( 72 65 73 70 65 63 74 69 76 65 6c 79 20 20 25 2e 37 65 2c 20 20 25 2e 37 65 2c 20 20 25 2e
 37 65 2c a 0 )
}
.field public static valuetype 'int8[]' $_153 at $1350
.data $1350 = {
bytearray ( 44 69 73 61 67 72 65 65 6d 65 6e 74 73 20 61 6d 6f 6e 67 20 74 68 65 20 76 61 6c 75 65 73
 20 58 31 2c 20 59 31 2c 20 5a 31 2c a 0 )
}
.field public static valuetype 'int8[]' $_130 at $1351
.data $1351 = {
bytearray ( 50 72 65 63 69 73 69 6f 6e 20 77 6f 72 73 65 20 74 68 61 6e 20 35 20 64 65 63 69 6d 61 6c
 20 66 69 67 75 72 65 73 20 20 0 )
}
.field public static valuetype 'int8[]' $_128 at $1352
.data $1352 = {
bytearray ( 54 68 65 20 6e 75 6d 62 65 72 20 6f 66 20 73 69 67 6e 69 66 69 63 61 6e 74 20 64 69 67 69
 74 73 20 6f 66 20 74 68 65 20 52 61 64 69 78 20 69 73 20 25 66 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_127 at $1353
.data $1353 = {
bytearray ( 6c 6f 67 61 72 69 74 68 6d 69 63 20 65 6e 63 6f 64 69 6e 67 20 68 61 73 20 70 72 65 63 69
 73 69 6f 6e 20 63 68 61 72 61 63 74 65 72 69 7a 65 64 20 73 6f 6c 65 6c 79 20 62 79 20 55
 31 2e a 0 )
}
.field public static valuetype 'int8[]' $_124 at $1354
.data $1354 = {
bytearray ( 6f 66 20 73 69 67 6e 69 66 69 63 61 6e 74 20 64 69 67 69 74 73 20 62 75 74 2c 20 62 79 20
 69 74 73 65 6c 66 2c 20 74 68 69 73 20 69 73 20 61 20 6d 69 6e 6f 72 20 66 6c 61 77 2e a
 0 )
}
.field public static valuetype 'int8[]' $_123 at $1355
.data $1355 = {
bytearray ( 50 72 65 63 69 73 69 6f 6e 20 63 61 6e 6e 6f 74 20 62 65 20 63 68 61 72 61 63 74 65 72 69
 7a 65 64 20 62 79 20 61 6e 20 49 6e 74 65 67 65 72 20 6e 75 6d 62 65 72 a 0 )
}
.field public static valuetype 'int8[]' $_109 at $1356
.data $1356 = {
bytearray ( 43 6f 6d 70 61 72 69 73 6f 6e 20 69 73 20 66 75 7a 7a 79 2c 58 3d 31 20 62 75 74 20 58 2d
 31 2f 32 2d 31 2f 32 20 21 3d 20 30 0 )
}
.field public static valuetype 'int8[]' $_105 at $1357
.data $1357 = {
bytearray ( 28 31 2d 55 31 29 2d 31 2f 32 20 3c 20 31 2f 32 20 69 73 20 46 41 4c 53 45 2c 20 70 72 6f
 67 2e 20 66 61 69 6c 73 3f 0 )
}
.field public static valuetype 'int8[]' $_96 at $1358
.data $1358 = {
bytearray ( 52 61 64 69 78 20 69 73 20 6e 6f 74 20 61 73 20 67 6f 6f 64 20 61 73 20 32 20 6f 72 20 31
 30 0 )
}
.field public static valuetype 'int8[]' $_91 at $1359
.data $1359 = {
bytearray ( 52 61 64 69 78 20 69 73 20 74 6f 6f 20 62 69 67 3a 20 72 6f 75 6e 64 6f 66 66 20 70 72 6f
 62 6c 65 6d 73 0 )
}
.field public static valuetype 'int8[]' $_89 at $1360
.data $1360 = {
bytearray ( 4d 59 53 54 45 52 59 3a 20 72 65 63 61 6c 63 75 6c 61 74 65 64 20 52 61 64 69 78 20 3d 20
 25 2e 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_88 at $1361
.data $1361 = {
bytearray ( 52 61 64 69 78 20 63 6f 6e 66 69 72 6d 65 64 2e a 0 )
}
.field public static valuetype 'int8[]' $_84 at $1362
.data $1362 = {
bytearray ( 67 65 74 73 20 62 65 74 74 65 72 20 63 6c 6f 73 65 73 74 20 72 65 6c 61 74 69 76 65 20 73
 65 70 61 72 61 74 69 6f 6e 20 55 31 20 3d 20 25 2e 37 65 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_83 at $1363
.data $1363 = {
bytearray ( 63 6f 6e 66 69 72 6d 73 20 63 6c 6f 73 65 73 74 20 72 65 6c 61 74 69 76 65 20 73 65 70 61
 72 61 74 69 6f 6e 20 55 31 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_68 at $1364
.data $1364 = {
bytearray ( 52 65 63 61 6c 63 75 6c 61 74 69 6e 67 20 72 61 64 69 78 20 61 6e 64 20 70 72 65 63 69 73
 69 6f 6e a 20 0 )
}
.field public static valuetype 'int8[]' $_67 at $1365
.data $1365 = {
bytearray ( 43 6c 6f 73 65 73 74 20 72 65 6c 61 74 69 76 65 20 73 65 70 61 72 61 74 69 6f 6e 20 66 6f
 75 6e 64 20 69 73 20 55 31 20 3d 20 25 2e 37 65 20 2e a a 0 )
}
.field public static valuetype 'int8[]' $_61 at $1366
.data $1366 = {
bytearray ( 52 61 64 69 78 20 3d 20 25 66 20 2e a 0 )
}
.field public static valuetype 'int8[]' $_52 at $1367
.data $1367 = {
bytearray ( 53 65 61 72 63 68 69 6e 67 20 66 6f 72 20 52 61 64 69 78 20 61 6e 64 20 50 72 65 63 69 73
 69 6f 6e 2e a 0 )
}
.field public static valuetype 'int8[]' $_51 at $1368
.data $1368 = {
bytearray ( a 0 )
}
.field public static valuetype 'int8[]' $_50 at $1369
.data $1369 = {
bytearray ( 2d 31 2c 20 30 2c 20 31 2f 32 2c 20 31 2c 20 32 2c 20 33 2c 20 34 2c 20 35 2c 20 39 2c 20
 32 37 2c 20 33 32 20 26 20 32 34 30 20 61 72 65 20 4f 2e 4b 2e a 0 )
}
.field public static valuetype 'int8[]' $_45 at $1370
.data $1370 = {
bytearray ( 35 20 21 3d 20 34 2b 31 2c 20 32 34 30 2f 33 20 21 3d 20 38 30 2c 20 32 34 30 2f 34 20 21
 3d 20 36 30 2c 20 6f 72 20 32 34 30 2f 35 20 21 3d 20 34 38 0 )
}
.field public static valuetype 'int8[]' $_41 at $1371
.data $1371 = {
bytearray ( 39 20 21 3d 20 33 2a 33 2c 20 32 37 20 21 3d 20 39 2a 33 2c 20 33 32 20 21 3d 20 38 2a 34
 2c 20 6f 72 20 33 32 2d 32 37 2d 34 2d 31 20 21 3d 20 30 0 )
}
.field public static valuetype 'int8[]' $_36 at $1372
.data $1372 = {
bytearray ( 31 2f 32 20 2b 20 28 2d 31 29 20 2b 20 31 2f 32 20 21 3d 20 30 0 )
}
.field public static valuetype 'int8[]' $_32 at $1373
.data $1373 = {
bytearray ( 2d 31 2b 31 20 21 3d 20 30 2c 20 28 2d 31 29 2b 61 62 73 28 31 29 20 21 3d 20 30 2c 20 6f
 72 20 2d 31 2b 28 2d 31 29 2a 28 2d 31 29 20 21 3d 20 30 0 )
}
.field public static valuetype 'int8[]' $_28 at $1374
.data $1374 = {
bytearray ( 33 20 21 3d 20 32 2b 31 2c 20 34 20 21 3d 20 33 2b 31 2c 20 34 2b 32 2a 28 2d 32 29 20 21
 3d 20 30 2c 20 6f 72 20 34 2d 33 2d 31 20 21 3d 20 30 0 )
}
.field public static valuetype 'int8[]' $_25 at $1375
.data $1375 = {
bytearray ( 43 6f 6d 70 61 72 69 73 6f 6e 20 61 6c 6c 65 67 65 73 20 74 68 61 74 20 2d 30 2e 30 20 69
 73 20 4e 6f 6e 2d 7a 65 72 6f 21 a 0 )
}
.field public static valuetype 'int8[]' $_20 at $1376
.data $1376 = {
bytearray ( 30 2b 30 20 21 3d 20 30 2c 20 31 2d 31 20 21 3d 20 30 2c 20 31 20 3c 3d 20 30 2c 20 6f 72
 20 31 2b 31 20 21 3d 20 32 0 )
}
.field public static valuetype 'int8[]' $_18 at $1377
.data $1377 = {
bytearray ( 50 72 6f 67 72 61 6d 20 69 73 20 6e 6f 77 20 52 55 4e 4e 49 4e 47 20 74 65 73 74 73 20 6f
 6e 20 73 6d 61 6c 6c 20 69 6e 74 65 67 65 72 73 3a a 0 )
}
.field public static valuetype 'int8[]' $_4 at $1378
.data $1378 = {
bytearray ( a 2a 20 2a 20 2a 20 46 4c 4f 41 54 49 4e 47 2d 50 4f 49 4e 54 20 45 52 52 4f 52 20 2a 20
 2a 20 2a a 0 )
}
